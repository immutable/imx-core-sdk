{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Immutable X API",
    "contact": {
      "name": "Immutable API Support",
      "email": "support@immutable.com"
    },
    "version": "0.1"
  },
  "host": "api.ropsten.x.immutable.com",
  "basePath": "/",
  "paths": {
    "/v1/assets": {
      "get": {
        "description": "Get a list of assets",
        "produces": [
          "application/json"
        ],
        "tags": [
          "assets"
        ],
        "summary": "Get a list of assets",
        "operationId": "listAssets",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "enum": [
              "updated_at",
              "name"
            ],
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who owns these assets",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status of these assets",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the asset to search",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for these asset. Example: {'proto':['1147'],'quality':['Meteorite']}",
            "name": "metadata",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Set flag to true to fetch an array of sell order details with accepted status associated with the asset",
            "name": "sell_orders",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Set flag to true to fetch an array of buy order details  with accepted status associated with the asset",
            "name": "buy_orders",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Set flag to include fees associated with the asset",
            "name": "include_fees",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "collection",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "updated_min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "updated_max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients",
            "name": "auxiliary_fee_percentages",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages",
            "name": "auxiliary_fee_recipients",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListAssetsResponse"
            }
          }
        }
      }
    },
    "/v1/assets/{token_address}/{token_id}": {
      "get": {
        "description": "Get details of an asset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "assets"
        ],
        "summary": "Get details of an asset",
        "operationId": "getAsset",
        "parameters": [
          {
            "type": "string",
            "description": "Address of the ERC721 contract",
            "name": "token_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Either ERC721 token ID or internal IMX ID",
            "name": "token_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Set flag to include fees associated with the asset",
            "name": "include_fees",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        }
      }
    },
    "/v1/collections": {
      "get": {
        "description": "Get a list of collections",
        "produces": [
          "application/json"
        ],
        "tags": [
          "collections"
        ],
        "summary": "Get a list of collections",
        "operationId": "listCollections",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of collections not to be included, separated by commas",
            "name": "blacklist",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of collections to be included, separated by commas",
            "name": "whitelist",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Keyword to search in collection name and description",
            "name": "keyword",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListCollectionsResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create collection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "collections"
        ],
        "summary": "Create collection",
        "operationId": "createCollection",
        "parameters": [
          {
            "description": "create a collection",
            "name": "CreateCollectionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCollectionRequest"
            }
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature",
            "name": "IMX-Signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "IMX-Timestamp",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Collection"
            },
            "headers": {
              "Collection_Limit": {
                "type": "string",
                "description": "The collection limit available to the project for each four-week window."
              },
              "Collection_Limit_Reset": {
                "type": "string",
                "description": "The expiry date of the current four-week window."
              },
              "Collection_Remaining": {
                "type": "string",
                "description": "The amount of collections remaining for current four-week window."
              }
            }
          }
        }
      }
    },
    "/v1/collections/{address}": {
      "get": {
        "description": "Get details of a collection at the given address",
        "produces": [
          "application/json"
        ],
        "tags": [
          "collections"
        ],
        "summary": "Get details of a collection at the given address",
        "operationId": "getCollection",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        }
      },
      "patch": {
        "description": "Update collection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "collections"
        ],
        "summary": "Update collection",
        "operationId": "updateCollection",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "description": "update a collection",
            "name": "UpdateCollectionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCollectionRequest"
            }
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp",
            "name": "IMX-Signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "IMX-Timestamp",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        }
      }
    },
    "/v1/collections/{address}/filters": {
      "get": {
        "description": "Get a list of collection filters",
        "produces": [
          "application/json"
        ],
        "tags": [
          "collections"
        ],
        "summary": "Get a list of collection filters",
        "operationId": "listCollectionFilters",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Next page token",
            "name": "next_page_token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CollectionFilter"
            }
          }
        }
      }
    },
    "/v1/collections/{address}/metadata-schema": {
      "get": {
        "description": "Get collection metadata schema",
        "produces": [
          "application/json"
        ],
        "tags": [
          "metadata"
        ],
        "summary": "Get collection metadata schema",
        "operationId": "getMetadataSchema",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetadataSchemaProperty"
              }
            }
          }
        }
      },
      "post": {
        "description": "Add metadata schema to collection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "metadata"
        ],
        "summary": "Add metadata schema to collection",
        "operationId": "addMetadataSchemaToCollection",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "description": "add metadata schema to a collection",
            "name": "AddMetadataSchemaToCollectionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddMetadataSchemaToCollectionRequest"
            }
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp",
            "name": "IMX-Signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "IMX-Timestamp",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          }
        }
      }
    },
    "/v1/collections/{address}/metadata-schema/{name}": {
      "patch": {
        "description": "Update metadata schema by name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "metadata"
        ],
        "summary": "Update metadata schema by name",
        "operationId": "updateMetadataSchemaByName",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Metadata schema name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "description": "update metadata schema",
            "name": "MetadataSchemaRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetadataSchemaRequest"
            }
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp",
            "name": "IMX-Signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "IMX-Timestamp",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          }
        }
      }
    },
    "/v1/deposits": {
      "get": {
        "description": "Get a list of deposits",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deposits"
        ],
        "summary": "Get a list of deposits",
        "operationId": "listDeposits",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this deposit",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status of this deposit",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "updated_min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "updated_max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the deposited asset",
            "name": "token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the minted asset",
            "name": "token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the minted asset",
            "name": "asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token address of the deposited asset",
            "name": "token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the deposited asset",
            "name": "token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the deposited asset",
            "name": "min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the deposited asset",
            "name": "max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the deposited asset",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDepositsResponse"
            }
          }
        }
      }
    },
    "/v1/deposits/{id}": {
      "get": {
        "description": "Get details of a deposit with the given ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deposits"
        ],
        "summary": "Get details of a deposit with the given ID",
        "operationId": "getDeposit",
        "parameters": [
          {
            "type": "string",
            "description": "Deposit ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Deposit"
            }
          }
        }
      }
    },
    "/v1/encode/{assetType}": {
      "post": {
        "description": "Retrieves the Starkex Encoded format for a given asset so that it can be used as parameter for Starkex smart contracts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "encoding"
        ],
        "summary": "Retrieves the Starkex Encoded format for a given asset",
        "operationId": "encodeAsset",
        "parameters": [
          {
            "type": "string",
            "description": "Asset type to be encoded. (asset/mintable-asset)",
            "name": "assetType",
            "in": "path",
            "required": true
          },
          {
            "description": "Encode Asset",
            "name": "EncodeAssetRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EncodeAssetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EncodeAssetResponse"
            }
          }
        }
      }
    },
    "/v1/mintable-token/{token_address}/{token_id}": {
      "get": {
        "description": "Get details of a mintable token with the given token address and token ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mints"
        ],
        "summary": "Get details of a mintable token with the given token address and token ID",
        "operationId": "getMintableTokenDetailsByClientTokenId",
        "parameters": [
          {
            "type": "string",
            "description": "Address of the ERC721 contract",
            "name": "token_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ERC721 token ID",
            "name": "token_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MintableTokenDetails"
            }
          }
        }
      }
    },
    "/v1/mints": {
      "get": {
        "description": "Get a list of mints",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mints"
        ],
        "summary": "Get a list of mints",
        "operationId": "listMints",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this mint",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status of this mint",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this mint, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "updated_min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this mint, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "updated_max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the minted asset",
            "name": "token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the minted asset",
            "name": "token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the minted asset",
            "name": "asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token Name of the minted asset",
            "name": "token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token address of the minted asset",
            "name": "token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the minted asset",
            "name": "min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the minted asset",
            "name": "max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the minted asset",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListMintsResponse"
            }
          }
        }
      }
    },
    "/v1/mints/{id}": {
      "get": {
        "description": "Get details of a mint with the given ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mints"
        ],
        "summary": "Get details of a mint with the given ID",
        "operationId": "getMint",
        "parameters": [
          {
            "type": "string",
            "description": "Mint ID. This is the transaction_id returned from listMints",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Mint"
            }
          }
        }
      }
    },
    "/v1/orders": {
      "get": {
        "description": "Get a list of orders",
        "tags": [
          "orders"
        ],
        "summary": "Get a list of orders",
        "operationId": "listOrders",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "enum": [
              "created_at",
              "expired_at",
              "sell_quantity",
              "buy_quantity",
              "buy_quantity_with_fees",
              "updated_at"
            ],
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this order",
            "name": "user",
            "in": "query"
          },
          {
            "enum": [
              "active",
              "filled",
              "cancelled",
              "expired",
              "inactive"
            ],
            "type": "string",
            "description": "Status of this order",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum created at timestamp for this order, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum created at timestamp for this order, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum updated at timestamp for this order, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "updated_min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum updated at timestamp for this order, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "updated_max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the asset this order buys",
            "name": "buy_token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the asset this order buys",
            "name": "buy_token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the asset this order buys",
            "name": "buy_asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of token addresses of the asset this order buys",
            "name": "buy_token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the asset this order buys",
            "name": "buy_token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the asset this order buys",
            "name": "buy_min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the asset this order buys",
            "name": "buy_max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the asset this order buys",
            "name": "buy_metadata",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the asset this order sells",
            "name": "sell_token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the asset this order sells",
            "name": "sell_token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the asset this order sells",
            "name": "sell_asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of token addresses of the asset this order sells",
            "name": "sell_token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the asset this order sells",
            "name": "sell_token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the asset this order sells",
            "name": "sell_min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the asset this order sells",
            "name": "sell_max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the asset this order sells",
            "name": "sell_metadata",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients",
            "name": "auxiliary_fee_percentages",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages",
            "name": "auxiliary_fee_recipients",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Set flag to true to include fee object for orders",
            "name": "include_fees",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListOrdersResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create an order",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "orders"
        ],
        "summary": "Create an order",
        "operationId": "createOrder",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "description": "create an order",
            "name": "CreateOrderRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateOrderResponse"
            }
          }
        }
      }
    },
    "/v1/orders/{id}": {
      "get": {
        "description": "Get details of an order with the given ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "orders"
        ],
        "summary": "Get details of an order with the given ID",
        "operationId": "getOrder",
        "parameters": [
          {
            "type": "string",
            "description": "Order ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Set flag to true to include fee body for the order",
            "name": "include_fees",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients",
            "name": "auxiliary_fee_percentages",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages",
            "name": "auxiliary_fee_recipients",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        }
      },
      "delete": {
        "description": "Cancel an order",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "orders"
        ],
        "summary": "cancel an order",
        "operationId": "cancelOrder",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "description": "cancel an order",
            "name": "CancelOrderRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelOrderRequest"
            }
          },
          {
            "type": "string",
            "description": "Order ID to cancel",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CancelOrderResponse"
            }
          }
        }
      }
    },
    "/v1/projects": {
      "get": {
        "description": "Get projects",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ],
        "summary": "Get projects",
        "operationId": "getProjects",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp",
            "name": "IMX-Signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "IMX-Timestamp",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetProjectsResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a project",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ],
        "summary": "Create a project",
        "operationId": "createProject",
        "parameters": [
          {
            "description": "create a project",
            "name": "CreateProjectRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProjectRequest"
            }
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp",
            "name": "IMX-Signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "IMX-Timestamp",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateProjectResponse"
            }
          }
        }
      }
    },
    "/v1/projects/{id}": {
      "get": {
        "description": "Get a project",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ],
        "summary": "Get a project",
        "operationId": "getProject",
        "parameters": [
          {
            "type": "string",
            "description": "Project ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp",
            "name": "IMX-Signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "IMX-Timestamp",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/v1/signable-cancel-order-details": {
      "post": {
        "description": "Get details a signable cancel order",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "orders"
        ],
        "summary": "Get details a signable cancel order",
        "operationId": "getSignableCancelOrder",
        "parameters": [
          {
            "description": "get a signable cancel order",
            "name": "GetSignableCancelOrderRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableCancelOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableCancelOrderResponse"
            }
          }
        }
      }
    },
    "/v1/signable-deposit-details": {
      "post": {
        "description": "Gets details of a signable deposit",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deposits"
        ],
        "summary": "Gets details of a signable deposit",
        "operationId": "getSignableDeposit",
        "parameters": [
          {
            "description": "Get details of signable deposit",
            "name": "GetSignableDepositRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableDepositRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableDepositResponse"
            }
          }
        }
      }
    },
    "/v1/signable-registration": {
      "post": {
        "description": "Get operator signature to allow clients to register the user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get operator signature to allow clients to register the user",
        "operationId": "getSignableRegistration",
        "parameters": [
          {
            "description": "Register User",
            "name": "GetSignableRegistrationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableRegistrationResponse"
            }
          }
        }
      }
    },
    "/v1/signable-registration-offchain": {
      "post": {
        "description": "Get encoded details to allow clients to register the user offchain",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get encoded details to allow clients to register the user offchain",
        "operationId": "getSignableRegistrationOffchain",
        "parameters": [
          {
            "description": "Register User Offchain",
            "name": "GetSignableRegistrationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableRegistrationOffchainResponse"
            }
          }
        }
      }
    },
    "/v1/signable-transfer-details": {
      "post": {
        "description": "Gets details of a signable transfer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfers"
        ],
        "summary": "Gets details of a signable transfer",
        "operationId": "getSignableTransferV1",
        "parameters": [
          {
            "description": "get details of signable transfer",
            "name": "GetSignableTransferRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableTransferRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableTransferResponseV1"
            }
          }
        }
      }
    },
    "/v1/signable-withdrawal-details": {
      "post": {
        "description": "Gets details of a signable withdrawal",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "withdrawals"
        ],
        "summary": "Gets details of a signable withdrawal",
        "operationId": "getSignableWithdrawal",
        "parameters": [
          {
            "description": "get details of signable withdrawal",
            "name": "GetSignableWithdrawalRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableWithdrawalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableWithdrawalResponse"
            }
          }
        }
      }
    },
    "/v1/tokens": {
      "get": {
        "description": "Get a list of tokens",
        "produces": [
          "application/json"
        ],
        "tags": [
          "tokens"
        ],
        "summary": "Get a list of tokens",
        "operationId": "listTokens",
        "parameters": [
          {
            "type": "string",
            "description": "Contract address of the token",
            "name": "address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token symbols for the token, e.g. ?symbols=IMX,ETH",
            "name": "symbols",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListTokensResponse"
            }
          }
        }
      }
    },
    "/v1/tokens/{address}": {
      "get": {
        "description": "Get details of a token",
        "produces": [
          "application/json"
        ],
        "tags": [
          "tokens"
        ],
        "summary": "Get details of a token",
        "operationId": "getToken",
        "parameters": [
          {
            "type": "string",
            "description": "Token Contract Address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenDetails"
            }
          }
        }
      }
    },
    "/v1/trades": {
      "get": {
        "description": "Get a list of trades",
        "produces": [
          "application/json"
        ],
        "tags": [
          "trades"
        ],
        "summary": "Get a list of trades",
        "operationId": "listTrades",
        "parameters": [
          {
            "type": "string",
            "description": "Party A's sell token type",
            "name": "party_a_token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Party A's sell token address",
            "name": "party_a_token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Party A's sell token id",
            "name": "party_a_token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Party B's sell token type",
            "name": "party_b_token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Party B's sell token address",
            "name": "party_b_token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Party B's sell token id",
            "name": "party_b_token_id",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this trade, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this trade, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "max_timestamp",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListTradesResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a Trade",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "trades"
        ],
        "summary": "Create a Trade between two parties",
        "operationId": "createTrade",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "description": "create a trade",
            "name": "CreateTradeRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTradeRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateTradeResponse"
            }
          }
        }
      }
    },
    "/v1/trades/{id}": {
      "get": {
        "description": "Get details of a trade with the given ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "trades"
        ],
        "summary": "Get details of a trade with the given ID",
        "operationId": "getTrade",
        "parameters": [
          {
            "type": "string",
            "description": "Trade ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Trade"
            }
          }
        }
      }
    },
    "/v1/transfers": {
      "get": {
        "description": "Get a list of transfers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfers"
        ],
        "summary": "Get a list of transfers",
        "operationId": "listTransfers",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this transfer",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who received this transfer",
            "name": "receiver",
            "in": "query"
          },
          {
            "enum": [
              "success",
              "failure"
            ],
            "type": "string",
            "description": "Status of this transfer",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this transfer, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this transfer, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the transferred asset",
            "name": "token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the minted asset",
            "name": "token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the minted asset",
            "name": "asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token address of the transferred asset",
            "name": "token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the transferred asset",
            "name": "token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the transferred asset",
            "name": "min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the transferred asset",
            "name": "max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the transferred asset",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListTransfersResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a new transfer request",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfers"
        ],
        "summary": "Creates a transfer of tokens between two parties",
        "operationId": "createTransferV1",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "description": "Create transfer",
            "name": "CreateTransferRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTransferRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateTransferResponseV1"
            }
          }
        }
      }
    },
    "/v1/transfers/{id}": {
      "get": {
        "description": "Get details of a transfer with the given ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfers"
        ],
        "summary": "Get details of a transfer with the given ID",
        "operationId": "getTransfer",
        "parameters": [
          {
            "type": "string",
            "description": "Transfer ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Transfer"
            }
          }
        }
      }
    },
    "/v1/users": {
      "post": {
        "description": "Registers a user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Registers a user",
        "operationId": "registerUser",
        "parameters": [
          {
            "description": "Register User",
            "name": "RegisterUserRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegisterUserResponse"
            }
          }
        }
      }
    },
    "/v1/users/{user}": {
      "get": {
        "description": "Get stark keys for a registered user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get stark keys for a registered user",
        "operationId": "getUsers",
        "parameters": [
          {
            "type": "string",
            "description": "User",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetUsersApiResponse"
            }
          }
        }
      }
    },
    "/v1/withdrawals": {
      "get": {
        "description": "Get a list of withdrawals",
        "produces": [
          "application/json"
        ],
        "tags": [
          "withdrawals"
        ],
        "summary": "Get a list of withdrawals",
        "operationId": "listWithdrawals",
        "parameters": [
          {
            "type": "boolean",
            "description": "Withdrawal has been transferred to user's Layer 1 wallet",
            "name": "withdrawn_to_wallet",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status of the on-chain batch confirmation for this withdrawal",
            "name": "rollup_status",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this withdrawal",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status of this withdrawal",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the withdrawn asset",
            "name": "token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the minted asset",
            "name": "token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the minted asset",
            "name": "asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token address of the withdrawn asset",
            "name": "token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the withdrawn asset",
            "name": "token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the withdrawn asset",
            "name": "min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the withdrawn asset",
            "name": "max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the withdrawn asset",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListWithdrawalsResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a withdrawal",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "withdrawals"
        ],
        "summary": "Creates a withdrawal of a token",
        "operationId": "createWithdrawal",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "description": "create a withdrawal",
            "name": "CreateWithdrawalRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWithdrawalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateWithdrawalResponse"
            }
          }
        }
      }
    },
    "/v1/withdrawals/{id}": {
      "get": {
        "description": "Gets details of withdrawal with the given ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "withdrawals"
        ],
        "summary": "Gets details of withdrawal with the given ID",
        "operationId": "getWithdrawal",
        "parameters": [
          {
            "type": "string",
            "description": "Withdrawal ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        }
      }
    },
    "/v2/balances/{owner}": {
      "get": {
        "description": "Get a list of balances for given user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "balances"
        ],
        "summary": "Get a list of balances for given user",
        "operationId": "listBalances",
        "parameters": [
          {
            "type": "string",
            "description": "Ethereum wallet address for user",
            "name": "owner",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListBalancesResponse"
            }
          }
        }
      }
    },
    "/v2/balances/{owner}/{address}": {
      "get": {
        "description": "Fetches the token balances of the user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "balances"
        ],
        "summary": "Fetches the token balances of the user",
        "operationId": "getBalance",
        "parameters": [
          {
            "type": "string",
            "description": "Address of the owner/user",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Token address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Balance"
            }
          }
        }
      }
    },
    "/v2/mints": {
      "post": {
        "description": "Mint tokens in a batch with fees",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mints"
        ],
        "summary": "Mint Tokens V2",
        "operationId": "mintTokens",
        "parameters": [
          {
            "description": "details of tokens to mint",
            "name": "MintTokensRequestV2",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MintRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MintTokensResponse"
            },
            "headers": {
              "Mint_Limit": {
                "type": "string",
                "description": "The mint limit available to the project for each four-week window."
              },
              "Mint_Limit_Reset": {
                "type": "string",
                "description": "The expiry date of the current four-week window."
              },
              "Mint_Remaining": {
                "type": "string",
                "description": "The amount of mints remaining for current four-week window."
              }
            }
          }
        }
      }
    },
    "/v2/signable-transfer-details": {
      "post": {
        "description": "Gets bulk details of a signable transfer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfers"
        ],
        "summary": "Gets bulk details of a signable transfer",
        "operationId": "getSignableTransfer",
        "parameters": [
          {
            "description": "get details of signable transfer",
            "name": "GetSignableTransferRequestV2",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableTransferRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableTransferResponse"
            }
          }
        }
      }
    },
    "/v2/transfers": {
      "post": {
        "description": "Create a new transfer request",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfers"
        ],
        "summary": "Creates a transfer of multiple tokens between two parties",
        "operationId": "createTransfer",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "description": "Create transfer",
            "name": "CreateTransferRequestV2",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTransferRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateTransferResponse"
            }
          }
        }
      }
    },
    "/v3/signable-order-details": {
      "post": {
        "description": "Get a signable order request (V3)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "orders"
        ],
        "summary": "Get a signable order request (V3)",
        "operationId": "getSignableOrder",
        "parameters": [
          {
            "description": "get a signable order",
            "name": "GetSignableOrderRequestV3",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableOrderResponse"
            }
          }
        }
      }
    },
    "/v3/signable-trade-details": {
      "post": {
        "description": "Get details a signable trade V3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "trades"
        ],
        "summary": "Get details a signable trade V3",
        "operationId": "getSignableTrade",
        "parameters": [
          {
            "description": "get a signable trade",
            "name": "GetSignableTradeRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableTradeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableTradeResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AddMetadataSchemaToCollectionRequest": {
      "type": "object",
      "required": [
        "metadata"
      ],
      "properties": {
        "contract_address": {
          "description": "Not required from API user",
          "type": "string"
        },
        "metadata": {
          "description": "The metadata container",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/MetadataSchemaRequest"
          }
        }
      }
    },
    "Asset": {
      "type": "object",
      "required": [
        "collection",
        "created_at",
        "description",
        "image_url",
        "metadata",
        "name",
        "status",
        "token_address",
        "token_id",
        "updated_at",
        "uri",
        "user"
      ],
      "properties": {
        "collection": {
          "description": "Information about the collection to which this asset belongs",
          "$ref": "#/definitions/CollectionDetails"
        },
        "created_at": {
          "description": "Timestamp of when the asset was created",
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "description": "Description of this asset",
          "type": "string",
          "x-nullable": true
        },
        "fees": {
          "description": "Royalties to pay on this asset operations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fee"
          }
        },
        "id": {
          "description": "[DEPRECATED] Internal Immutable X Token ID",
          "type": "string"
        },
        "image_url": {
          "description": "URL of the image which should be used for this asset",
          "type": "string",
          "x-nullable": true
        },
        "metadata": {
          "description": "Metadata of this asset",
          "type": "object",
          "x-nullable": true
        },
        "name": {
          "description": "Name of this asset",
          "type": "string",
          "x-nullable": true
        },
        "orders": {
          "description": "Open orders for this asset",
          "$ref": "#/definitions/OrderDetails"
        },
        "status": {
          "description": "Status of this asset (where it is in the system)",
          "type": "string"
        },
        "token_address": {
          "description": "Address of the ERC721 contract",
          "type": "string"
        },
        "token_id": {
          "description": "ERC721 Token ID of this asset",
          "type": "string"
        },
        "updated_at": {
          "description": "Timestamp of when the asset was updated",
          "type": "string",
          "x-nullable": true
        },
        "uri": {
          "description": "URI to access this asset externally to Immutable X",
          "type": "string",
          "x-nullable": true
        },
        "user": {
          "description": "Ethereum address of the user who owns this asset",
          "type": "string"
        }
      }
    },
    "AssetProperties": {
      "type": "object",
      "properties": {
        "collection": {
          "description": "Details of this asset's collection",
          "$ref": "#/definitions/CollectionDetails"
        },
        "image_url": {
          "description": "Image URL of this asset",
          "type": "string"
        },
        "name": {
          "description": "Name of this asset",
          "type": "string"
        }
      }
    },
    "Balance": {
      "type": "object",
      "required": [
        "balance",
        "preparing_withdrawal",
        "symbol",
        "token_address",
        "withdrawable"
      ],
      "properties": {
        "balance": {
          "description": "Amount which is currently inside the exchange",
          "type": "string"
        },
        "preparing_withdrawal": {
          "description": "Amount which is currently preparing withdrawal from the exchange",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of the token (e.g. ETH, IMX)",
          "type": "string"
        },
        "token_address": {
          "description": "Address of the contract that represents this ERC20 token or empty for ETH",
          "type": "string"
        },
        "withdrawable": {
          "description": "Amount which is currently withdrawable from the exchange",
          "type": "string"
        }
      }
    },
    "CancelOrderRequest": {
      "type": "object",
      "required": [
        "order_id",
        "stark_signature"
      ],
      "properties": {
        "order_id": {
          "description": "ID of the order",
          "type": "integer"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        }
      }
    },
    "CancelOrderResponse": {
      "type": "object",
      "required": [
        "order_id",
        "status"
      ],
      "properties": {
        "order_id": {
          "description": "ID of the cancelled order",
          "type": "integer"
        },
        "status": {
          "description": "New status of the order",
          "type": "string"
        }
      }
    },
    "Collection": {
      "type": "object",
      "required": [
        "address",
        "collection_image_url",
        "description",
        "icon_url",
        "metadata_api_url",
        "name",
        "project_id",
        "project_owner_address"
      ],
      "properties": {
        "address": {
          "description": "Ethereum address of the ERC721 contract",
          "type": "string"
        },
        "collection_image_url": {
          "description": "URL of the tile image for this collection",
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "description": "Description of the collection",
          "type": "string",
          "x-nullable": true
        },
        "icon_url": {
          "description": "URL of the icon for this collection",
          "type": "string",
          "x-nullable": true
        },
        "metadata_api_url": {
          "description": "URL of the metadata for this collection",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "description": "Name of the collection",
          "type": "string"
        },
        "project_id": {
          "description": "The collection's project ID",
          "type": "integer"
        },
        "project_owner_address": {
          "description": "Project owner address",
          "type": "string"
        }
      }
    },
    "CollectionDetails": {
      "type": "object",
      "required": [
        "icon_url",
        "name"
      ],
      "properties": {
        "icon_url": {
          "description": "URL of the icon of the collection",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "description": "Name of the collection",
          "type": "string"
        }
      }
    },
    "CollectionFilter": {
      "type": "object",
      "properties": {
        "key": {
          "description": "Key of this property",
          "type": "string"
        },
        "range": {
          "description": "Range of values for this property",
          "$ref": "#/definitions/Range"
        },
        "type": {
          "description": "Type of this filter",
          "type": "string"
        },
        "value": {
          "description": "List of possible values for this property",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateCollectionRequest": {
      "type": "object",
      "required": [
        "contract_address",
        "name",
        "owner_public_key",
        "project_id"
      ],
      "properties": {
        "collection_image_url": {
          "description": "URL of the tile image for this collection",
          "type": "string"
        },
        "contract_address": {
          "description": "Ethereum address of the ERC721 contract",
          "type": "string"
        },
        "description": {
          "description": "Description of the collection",
          "type": "string"
        },
        "icon_url": {
          "description": "URL of the icon for this collection",
          "type": "string"
        },
        "metadata_api_url": {
          "description": "URL of the metadata for this collection",
          "type": "string"
        },
        "name": {
          "description": "Name of the collection",
          "type": "string"
        },
        "owner_public_key": {
          "description": "Owner Public Key: The public key of the owner of the contract",
          "type": "string"
        },
        "project_id": {
          "description": "The collection's project ID",
          "type": "integer"
        }
      }
    },
    "CreateOrderRequest": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "asset_id_buy",
        "asset_id_sell",
        "expiration_timestamp",
        "nonce",
        "stark_key",
        "stark_signature",
        "vault_id_buy",
        "vault_id_sell"
      ],
      "properties": {
        "amount_buy": {
          "description": "Amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "asset_id_buy": {
          "description": "ID of the asset to buy",
          "type": "string"
        },
        "asset_id_sell": {
          "description": "ID of the asset to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this order",
          "type": "integer"
        },
        "fees": {
          "description": "Fee information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeEntry"
          }
        },
        "include_fees": {
          "description": "Whether to include fees in order",
          "type": "boolean"
        },
        "nonce": {
          "description": "Nonce of the order",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the user creating order",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        },
        "vault_id_buy": {
          "description": "ID of the vault into which the bought asset will be placed",
          "type": "integer"
        },
        "vault_id_sell": {
          "description": "ID of the vault to sell from",
          "type": "integer"
        }
      }
    },
    "CreateOrderResponse": {
      "type": "object",
      "required": [
        "order_id",
        "status",
        "time"
      ],
      "properties": {
        "order_id": {
          "description": "ID of the created order",
          "type": "integer"
        },
        "status": {
          "description": "Status of the created order",
          "type": "string"
        },
        "time": {
          "description": "Timestamp of the created order",
          "type": "integer"
        }
      }
    },
    "CreateProjectRequest": {
      "type": "object",
      "required": [
        "company_name",
        "contact_email",
        "name"
      ],
      "properties": {
        "company_name": {
          "description": "The company name",
          "type": "string"
        },
        "contact_email": {
          "description": "The project contact email",
          "type": "string"
        },
        "name": {
          "description": "The project name",
          "type": "string"
        }
      }
    },
    "CreateProjectResponse": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "The project ID",
          "type": "integer"
        }
      }
    },
    "CreateTradeRequestV1": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "asset_id_buy",
        "asset_id_sell",
        "expiration_timestamp",
        "nonce",
        "order_id",
        "stark_key",
        "stark_signature",
        "vault_id_buy",
        "vault_id_sell"
      ],
      "properties": {
        "amount_buy": {
          "description": "Amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "asset_id_buy": {
          "description": "ID of the asset to buy",
          "type": "string"
        },
        "asset_id_sell": {
          "description": "ID of the asset to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this trade",
          "type": "integer"
        },
        "fee_info": {
          "description": "Fee details",
          "$ref": "#/definitions/FeeInfo"
        },
        "fees": {
          "description": "Fee information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeEntry"
          }
        },
        "include_fees": {
          "description": "Whether to include fees in trade",
          "type": "boolean"
        },
        "nonce": {
          "description": "Nonce of the trade",
          "type": "integer"
        },
        "order_id": {
          "description": "ID of the order",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the user creating trade",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        },
        "vault_id_buy": {
          "description": "ID of the vault into which the traded asset will be placed",
          "type": "integer"
        },
        "vault_id_sell": {
          "description": "ID of the vault to sell from",
          "type": "integer"
        }
      }
    },
    "CreateTradeResponse": {
      "type": "object",
      "required": [
        "status",
        "trade_id"
      ],
      "properties": {
        "request_id": {
          "description": "Request ID that returns when a trade initiated through risk-manager",
          "type": "string"
        },
        "status": {
          "description": "Current status of trade",
          "type": "string"
        },
        "trade_id": {
          "description": "ID of trade within Immutable X",
          "type": "integer"
        }
      }
    },
    "CreateTransferRequest": {
      "type": "object",
      "required": [
        "requests",
        "sender_stark_key"
      ],
      "properties": {
        "requests": {
          "description": "List of transfers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferRequest"
          }
        },
        "sender_stark_key": {
          "description": "Public stark key of the user sending the transfer",
          "type": "string"
        }
      }
    },
    "CreateTransferRequestV1": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "expiration_timestamp",
        "nonce",
        "receiver_stark_key",
        "receiver_vault_id",
        "sender_stark_key",
        "sender_vault_id",
        "stark_signature"
      ],
      "properties": {
        "amount": {
          "description": "Amount to transfer",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset to transfer",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this transfer",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce of the transfer",
          "type": "integer"
        },
        "receiver_stark_key": {
          "description": "Public stark key of the user receiving the transfer",
          "type": "string"
        },
        "receiver_vault_id": {
          "description": "ID of the vault into which the asset will be transferred to",
          "type": "integer"
        },
        "sender_stark_key": {
          "description": "Public stark key of the user sending the transfer",
          "type": "string"
        },
        "sender_vault_id": {
          "description": "ID of the vault into which the asset is from",
          "type": "integer"
        },
        "stark_signature": {
          "description": "Transfer payload signature",
          "type": "string"
        }
      }
    },
    "CreateTransferResponse": {
      "type": "object",
      "required": [
        "transfer_ids"
      ],
      "properties": {
        "transfer_ids": {
          "description": "List of transfer IDs",
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "CreateTransferResponseV1": {
      "type": "object",
      "required": [
        "sent_signature",
        "status",
        "time",
        "transfer_id"
      ],
      "properties": {
        "sent_signature": {
          "description": "[deprecated] Sent signature",
          "type": "string"
        },
        "status": {
          "description": "[deprecated] The status of transfer",
          "type": "string"
        },
        "time": {
          "description": "[deprecated] Time of the transfer",
          "type": "integer"
        },
        "transfer_id": {
          "description": "ID of the transfer",
          "type": "integer"
        }
      }
    },
    "CreateWithdrawalRequest": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "nonce",
        "stark_key",
        "stark_signature",
        "vault_id"
      ],
      "properties": {
        "amount": {
          "description": "Amount to withdraw",
          "type": "string"
        },
        "asset_id": {
          "description": "The ID of asset the user is withdrawing",
          "type": "string"
        },
        "nonce": {
          "description": "Nonce of the withdrawal",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the withdrawing user",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        },
        "vault_id": {
          "description": "The ID of the vault the asset belong to",
          "type": "integer"
        }
      }
    },
    "CreateWithdrawalResponse": {
      "type": "object",
      "required": [
        "status",
        "time",
        "withdrawal_id"
      ],
      "properties": {
        "status": {
          "description": "Status of the withdrawal",
          "type": "string"
        },
        "time": {
          "description": "Time of the withdrawal",
          "type": "integer"
        },
        "withdrawal_id": {
          "description": "ID of the withdrawal",
          "type": "integer"
        }
      }
    },
    "Deposit": {
      "type": "object",
      "required": [
        "status",
        "timestamp",
        "token",
        "transaction_id",
        "user"
      ],
      "properties": {
        "status": {
          "description": "Status of this deposit in Immutable X",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp of the deposit",
          "type": "string"
        },
        "token": {
          "description": "Details of the asset being deposited",
          "$ref": "#/definitions/Token"
        },
        "transaction_id": {
          "description": "Sequential ID of this transaction within Immutable X",
          "type": "integer"
        },
        "user": {
          "description": "Ethereum address of the user making this deposit",
          "type": "string"
        }
      }
    },
    "EncodeAssetRequest": {
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "$ref": "#/definitions/encodeAssetRequestToken"
        }
      }
    },
    "EncodeAssetResponse": {
      "type": "object",
      "required": [
        "asset_id",
        "asset_type"
      ],
      "properties": {
        "asset_id": {
          "description": "Stark encoded asset id",
          "type": "string"
        },
        "asset_type": {
          "description": "Stark encoded asset type",
          "type": "string"
        }
      }
    },
    "EncodeAssetTokenData": {
      "type": "object",
      "properties": {
        "blueprint": {
          "description": "Blueprint information of the token to be encoded. Used if token is mintable.",
          "type": "string"
        },
        "id": {
          "description": "ID of the token to be encoded. Used if token is mintable.",
          "type": "string"
        },
        "token_address": {
          "description": "Contract address of the token to be encoded",
          "type": "string"
        },
        "token_id": {
          "description": "TokenId of the token to be encoded. Used if token is non-mintable",
          "type": "string"
        }
      }
    },
    "Fee": {
      "type": "object",
      "required": [
        "address",
        "percentage",
        "type"
      ],
      "properties": {
        "address": {
          "description": "Wallet address",
          "type": "string"
        },
        "percentage": {
          "description": "The percentage of fee",
          "type": "number",
          "maximum": 100
        },
        "type": {
          "description": "Type of fee. Examples: `royalty`, `maker`, `taker` or `protocol`",
          "type": "string"
        }
      }
    },
    "FeeData": {
      "type": "object",
      "properties": {
        "contract_address": {
          "description": "Address of ERC721/ERC20 contract",
          "type": "string"
        },
        "decimals": {
          "description": "Number of decimals supported by this asset",
          "type": "integer"
        }
      }
    },
    "FeeEntry": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "fee_percentage": {
          "type": "number"
        }
      }
    },
    "FeeInfo": {
      "type": "object",
      "required": [
        "asset_id",
        "fee_limit",
        "source_vault_id"
      ],
      "properties": {
        "asset_id": {
          "description": "ID of the asset these fees relate to",
          "type": "string"
        },
        "fee_limit": {
          "description": "Fee limit",
          "type": "string"
        },
        "source_vault_id": {
          "description": "ID of vault the asset belong to",
          "type": "integer"
        }
      }
    },
    "FeeToken": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Fee token data details",
          "$ref": "#/definitions/FeeData"
        },
        "type": {
          "description": "Fee token type. One of ETH/ERC20",
          "type": "string",
          "enum": [
            "ETH",
            "ERC20"
          ]
        }
      }
    },
    "GetProjectsResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Projects matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        }
      }
    },
    "GetSignableCancelOrderRequest": {
      "type": "object",
      "required": [
        "order_id"
      ],
      "properties": {
        "order_id": {
          "description": "ID of the order to be cancelled",
          "type": "integer"
        }
      }
    },
    "GetSignableCancelOrderResponse": {
      "type": "object",
      "required": [
        "order_id",
        "payload_hash",
        "signable_message"
      ],
      "properties": {
        "order_id": {
          "description": "ID of the order to be cancelled",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Hash of the payload to be signed for cancel order",
          "type": "string"
        },
        "signable_message": {
          "description": "Message to sign from wallet to confirm cancel order",
          "type": "string"
        }
      }
    },
    "GetSignableDepositRequest": {
      "type": "object",
      "required": [
        "amount",
        "token",
        "user"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the token the user is depositing",
          "type": "string"
        },
        "token": {
          "description": "Details of the token the user is depositing",
          "$ref": "#/definitions/SignableToken"
        },
        "user": {
          "description": "User who is depositing",
          "type": "string"
        }
      }
    },
    "GetSignableDepositResponse": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "nonce",
        "stark_key",
        "vault_id"
      ],
      "properties": {
        "amount": {
          "description": "Amount this user is depositing",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset this user is depositing",
          "type": "string"
        },
        "nonce": {
          "description": "Nonce of the deposit",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the depositing user",
          "type": "string"
        },
        "vault_id": {
          "description": "ID of the vault this user is depositing to",
          "type": "integer"
        }
      }
    },
    "GetSignableOrderRequest": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "token_buy",
        "token_sell",
        "user"
      ],
      "properties": {
        "amount_buy": {
          "description": "Fee-exclusive amount to buy the asset",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell (quantity)",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "ExpirationTimestamp in Unix time. Note: will be rounded down to the nearest hour",
          "type": "integer"
        },
        "fees": {
          "description": "Inclusion of either maker or taker fees",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeEntry"
          }
        },
        "token_buy": {
          "description": "Token to buy",
          "$ref": "#/definitions/SignableToken"
        },
        "token_sell": {
          "description": "Token to sell",
          "$ref": "#/definitions/SignableToken"
        },
        "user": {
          "description": "Ethereum address of the submitting user",
          "type": "string"
        }
      }
    },
    "GetSignableOrderResponse": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "asset_id_buy",
        "asset_id_sell",
        "expiration_timestamp",
        "nonce",
        "payload_hash",
        "signable_message",
        "stark_key",
        "vault_id_buy",
        "vault_id_sell"
      ],
      "properties": {
        "amount_buy": {
          "description": "Fee-exclusive amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "asset_id_buy": {
          "description": "ID of the asset to buy",
          "type": "string"
        },
        "asset_id_sell": {
          "description": "ID of the asset to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this order",
          "type": "integer"
        },
        "fee_info": {
          "description": "Fee information",
          "$ref": "#/definitions/FeeInfo"
        },
        "nonce": {
          "description": "Nonce of the order",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Hash of the payload to be signed for signable order",
          "type": "string"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to confirm order request",
          "type": "string"
        },
        "stark_key": {
          "description": "Public stark key of the created user",
          "type": "string"
        },
        "vault_id_buy": {
          "description": "ID of the vault into which the bought asset will be placed",
          "type": "integer"
        },
        "vault_id_sell": {
          "description": "ID of the vault to sell from",
          "type": "integer"
        }
      }
    },
    "GetSignableRegistrationOffchainResponse": {
      "type": "object",
      "required": [
        "payload_hash",
        "signable_message"
      ],
      "properties": {
        "payload_hash": {
          "description": "Hash of the payload to be signed for user registration offchain",
          "type": "string"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to register user offchain",
          "type": "string"
        }
      }
    },
    "GetSignableRegistrationRequest": {
      "type": "object",
      "required": [
        "ether_key",
        "stark_key"
      ],
      "properties": {
        "ether_key": {
          "description": "Ether key of user",
          "type": "string"
        },
        "stark_key": {
          "description": "Public stark key of the user",
          "type": "string"
        }
      }
    },
    "GetSignableRegistrationResponse": {
      "type": "object",
      "required": [
        "operator_signature",
        "payload_hash"
      ],
      "properties": {
        "operator_signature": {
          "description": "Signature from authorised operator",
          "type": "string"
        },
        "payload_hash": {
          "description": "Hash of the payload to be signed for user registration",
          "type": "string"
        }
      }
    },
    "GetSignableTradeRequest": {
      "type": "object",
      "required": [
        "order_id",
        "user"
      ],
      "properties": {
        "expiration_timestamp": {
          "description": "ExpirationTimestamp in Unix time. Note: will be rounded down to the nearest hour",
          "type": "integer"
        },
        "fees": {
          "description": "Inclusion of either maker or taker fees",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeEntry"
          }
        },
        "order_id": {
          "description": "The ID of the maker order involved",
          "type": "integer"
        },
        "user": {
          "description": "Ethereum address of the submitting user",
          "type": "string"
        }
      }
    },
    "GetSignableTradeResponse": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "asset_id_buy",
        "asset_id_sell",
        "expiration_timestamp",
        "nonce",
        "payload_hash",
        "signable_message",
        "stark_key",
        "vault_id_buy",
        "vault_id_sell"
      ],
      "properties": {
        "amount_buy": {
          "description": "Amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "asset_id_buy": {
          "description": "ID of the asset to buy",
          "type": "string"
        },
        "asset_id_sell": {
          "description": "ID of the asset to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this order",
          "type": "integer"
        },
        "fee_info": {
          "description": "Fee information",
          "$ref": "#/definitions/FeeInfo"
        },
        "nonce": {
          "description": "Nonce of the order",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Payload Hash",
          "type": "string"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to confirm trade request",
          "type": "string"
        },
        "stark_key": {
          "description": "Public stark key of the created user",
          "type": "string"
        },
        "vault_id_buy": {
          "description": "ID of the vault into which the bought asset will be placed",
          "type": "integer"
        },
        "vault_id_sell": {
          "description": "ID of the vault to sell from",
          "type": "integer"
        }
      }
    },
    "GetSignableTransferRequest": {
      "type": "object",
      "required": [
        "sender_ether_key",
        "signable_requests"
      ],
      "properties": {
        "sender_ether_key": {
          "description": "Ethereum address of the transferring user",
          "type": "string"
        },
        "signable_requests": {
          "description": "List of signable transfer details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SignableTransferDetails"
          }
        }
      }
    },
    "GetSignableTransferRequestV1": {
      "type": "object",
      "required": [
        "amount",
        "receiver",
        "sender",
        "token"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the token to transfer",
          "type": "string"
        },
        "receiver": {
          "description": "Ethereum address of the receiving user",
          "type": "string"
        },
        "sender": {
          "description": "Ethereum address of the transferring user",
          "type": "string"
        },
        "token": {
          "description": "Token to transfer",
          "$ref": "#/definitions/SignableToken"
        }
      }
    },
    "GetSignableTransferResponse": {
      "type": "object",
      "required": [
        "sender_stark_key",
        "signable_message",
        "signable_responses"
      ],
      "properties": {
        "sender_stark_key": {
          "description": "Sender of the transfer",
          "type": "string"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to confirm transfer request",
          "type": "string"
        },
        "signable_responses": {
          "description": "List of transfer responses without the sender stark key",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SignableTransferResponseDetails"
          }
        }
      }
    },
    "GetSignableTransferResponseV1": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "expiration_timestamp",
        "nonce",
        "payload_hash",
        "receiver_stark_key",
        "receiver_vault_id",
        "sender_vault_id",
        "signable_message"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the asset being transferred",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset being transferred",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Token in request to match in SDK implementation",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce of the transfer",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Hash of the payload",
          "type": "string"
        },
        "receiver_stark_key": {
          "description": "Receiver of the transfer",
          "type": "string"
        },
        "receiver_vault_id": {
          "description": "ID of the vault being transferred to",
          "type": "integer"
        },
        "sender_stark_key": {
          "description": "Sender of the transfer",
          "type": "string"
        },
        "sender_vault_id": {
          "description": "ID of the vault being transferred from",
          "type": "integer"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to confirm transfer request",
          "type": "string"
        }
      }
    },
    "GetSignableWithdrawalRequest": {
      "type": "object",
      "required": [
        "amount",
        "token",
        "user"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the token to withdraw",
          "type": "string"
        },
        "token": {
          "description": "Token to withdraw",
          "$ref": "#/definitions/SignableToken"
        },
        "user": {
          "description": "Ethereum address of the user who is making this withdrawal",
          "type": "string"
        }
      }
    },
    "GetSignableWithdrawalResponse": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "nonce",
        "payload_hash",
        "signable_message",
        "stark_key",
        "vault_id"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the token we are withdrawing",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset to be withdrawn",
          "type": "string"
        },
        "nonce": {
          "description": "Nonce of this transaction",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Encoded payload hash",
          "type": "string"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to verity withdrawal request",
          "type": "string"
        },
        "stark_key": {
          "description": "Public stark key of this user",
          "type": "string"
        },
        "vault_id": {
          "description": "ID of the vault we are withdrawing from",
          "type": "integer"
        }
      }
    },
    "GetUsersApiResponse": {
      "type": "object",
      "required": [
        "accounts"
      ],
      "properties": {
        "accounts": {
          "description": "Accounts",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListAssetsResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Assets matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        }
      }
    },
    "ListBalancesResponse": {
      "type": "object",
      "required": [
        "cursor",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "result": {
          "description": "Dictionary of tokens",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Balance"
          }
        }
      }
    },
    "ListCollectionsResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Collections matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Collection"
          }
        }
      }
    },
    "ListDepositsResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Deposits matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Deposit"
          }
        }
      }
    },
    "ListMintsResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Mints matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Mint"
          }
        }
      }
    },
    "ListOrdersResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Orders matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        }
      }
    },
    "ListTokensResponse": {
      "type": "object",
      "required": [
        "cursor",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "result": {
          "description": "Tokens matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenDetails"
          }
        }
      }
    },
    "ListTradesResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Trades matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Trade"
          }
        }
      }
    },
    "ListTransfersResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Transfers matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transfer"
          }
        }
      }
    },
    "ListWithdrawalsResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Withdrawals matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Withdrawal"
          }
        }
      }
    },
    "MetadataSchemaProperty": {
      "type": "object",
      "required": [
        "filterable",
        "name",
        "type"
      ],
      "properties": {
        "filterable": {
          "description": "Sets the metadata as filterable",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the metadata key",
          "type": "string"
        },
        "type": {
          "description": "Type of the metadata. Values: \"enum\", \"text\", \"boolean\", \"continuous\", \"discrete\" | Default: \"text\".\nSrc: https://docs.x.immutable.com/docs/asset-metadata#property-type-mapping",
          "type": "string"
        }
      }
    },
    "MetadataSchemaRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "filterable": {
          "description": "Sets the metadata as filterable",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the metadata key",
          "type": "string"
        },
        "type": {
          "description": "Type of the metadata. Values: \"enum\", \"text\", \"boolean\", \"continuous\", \"discrete\" | Default: \"text\". Src: https://docs.x.immutable.com/docs/asset-metadata#property-type-mapping",
          "type": "string",
          "enum": [
            "enum",
            "text",
            "boolean",
            "continuous",
            "discrete"
          ]
        }
      }
    },
    "Mint": {
      "type": "object",
      "required": [
        "status",
        "timestamp",
        "token",
        "transaction_id",
        "user"
      ],
      "properties": {
        "fees": {
          "description": "Fee details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fee"
          }
        },
        "status": {
          "description": "Status of this mint",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp this mint was initiated",
          "type": "string"
        },
        "token": {
          "description": "Details of the asset which has been minted",
          "$ref": "#/definitions/Token"
        },
        "transaction_id": {
          "description": "Sequential ID of transaction in Immutable X",
          "type": "integer"
        },
        "user": {
          "description": "Ethereum address of the user to whom the asset has been minted",
          "type": "string"
        }
      }
    },
    "MintFee": {
      "type": "object",
      "required": [
        "percentage",
        "recipient"
      ],
      "properties": {
        "percentage": {
          "description": "Fee percentage",
          "type": "number",
          "maximum": 100
        },
        "recipient": {
          "description": "Recipient wallet address",
          "type": "string"
        }
      }
    },
    "MintRequest": {
      "type": "object",
      "required": [
        "auth_signature",
        "contract_address",
        "users"
      ],
      "properties": {
        "auth_signature": {
          "description": "Signature from authorised minter",
          "type": "string"
        },
        "contract_address": {
          "description": "minting contract",
          "type": "string"
        },
        "royalties": {
          "description": "Global contract-level royalty fees",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MintFee"
          }
        },
        "users": {
          "description": "Users to mint to",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MintUser"
          }
        }
      }
    },
    "MintResultDetails": {
      "type": "object",
      "required": [
        "contract_address",
        "token_id",
        "tx_id"
      ],
      "properties": {
        "contract_address": {
          "description": "Contract address of this token",
          "type": "string"
        },
        "token_id": {
          "description": "IMX ID of this token",
          "type": "string"
        },
        "tx_id": {
          "description": "Mint Transaction ID",
          "type": "integer"
        }
      }
    },
    "MintTokenDataV2": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "blueprint": {
          "description": "Token metadata blueprint",
          "type": "string"
        },
        "id": {
          "description": "Token ID",
          "type": "string"
        },
        "royalties": {
          "description": "List of mint fees",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MintFee"
          }
        }
      }
    },
    "MintTokensResponse": {
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "List of mint result details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MintResultDetails"
          }
        }
      }
    },
    "MintUser": {
      "type": "object",
      "required": [
        "tokens",
        "user"
      ],
      "properties": {
        "tokens": {
          "description": "List of Mint tokens",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MintTokenDataV2"
          }
        },
        "user": {
          "description": "User wallet address",
          "type": "string"
        }
      }
    },
    "MintableTokenDetails": {
      "type": "object",
      "required": [
        "blueprint",
        "client_token_id",
        "token_id"
      ],
      "properties": {
        "blueprint": {
          "description": "Blueprint of this token",
          "type": "string"
        },
        "client_token_id": {
          "description": "ID provided by the client for this token",
          "type": "string"
        },
        "token_id": {
          "description": "IMX Id of this token",
          "type": "string"
        }
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "amount_sold",
        "buy",
        "expiration_timestamp",
        "order_id",
        "sell",
        "status",
        "timestamp",
        "updated_timestamp",
        "user"
      ],
      "properties": {
        "amount_sold": {
          "description": "Amount of the asset already sold by this order",
          "type": "string",
          "x-nullable": true
        },
        "buy": {
          "description": "Details of the asset being bought",
          "$ref": "#/definitions/Token"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp of this order",
          "type": "string",
          "x-nullable": true
        },
        "fees": {
          "description": "Fee information for the order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderFeeInfo"
          }
        },
        "order_id": {
          "description": "ID of the order",
          "type": "integer"
        },
        "sell": {
          "description": "Details of the asset being sold",
          "$ref": "#/definitions/Token"
        },
        "status": {
          "description": "Status of the order",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp this order was created",
          "type": "string",
          "x-nullable": true
        },
        "updated_timestamp": {
          "description": "Updated timestamp of this order",
          "type": "string",
          "x-nullable": true
        },
        "user": {
          "description": "Ethereum address of the user who submitted the order",
          "type": "string"
        }
      }
    },
    "OrderDetails": {
      "type": "object",
      "properties": {
        "buy_orders": {
          "description": "Buy orders for this asset",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "sell_orders": {
          "description": "Sell orders for this asset",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "OrderFeeInfo": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/FeeToken"
        },
        "type": {
          "description": "Fee type",
          "type": "string"
        }
      }
    },
    "Project": {
      "type": "object",
      "required": [
        "collection_limit_expires_at",
        "collection_monthly_limit",
        "collection_remaining",
        "company_name",
        "contact_email",
        "id",
        "mint_limit_expires_at",
        "mint_monthly_limit",
        "mint_remaining",
        "name"
      ],
      "properties": {
        "collection_limit_expires_at": {
          "description": "The current period expiry date for collection limit",
          "type": "string"
        },
        "collection_monthly_limit": {
          "description": "The total monthly collection limit",
          "type": "integer"
        },
        "collection_remaining": {
          "description": "The number of collection remaining in the current period",
          "type": "integer"
        },
        "company_name": {
          "description": "The company name",
          "type": "string"
        },
        "contact_email": {
          "description": "The project contact email",
          "type": "string"
        },
        "id": {
          "description": "The project ID",
          "type": "integer"
        },
        "mint_limit_expires_at": {
          "description": "The current period expiry date for mint operation limit",
          "type": "string"
        },
        "mint_monthly_limit": {
          "description": "The total monthly mint operation limit",
          "type": "integer"
        },
        "mint_remaining": {
          "description": "The number of mint operation remaining in the current period",
          "type": "integer"
        },
        "name": {
          "description": "The project name",
          "type": "string"
        }
      }
    },
    "Range": {
      "type": "object",
      "properties": {
        "max": {
          "description": "Maximum value",
          "type": "integer"
        },
        "min": {
          "description": "Minimum value",
          "type": "integer"
        }
      }
    },
    "RegisterUserRequest": {
      "type": "object",
      "required": [
        "eth_signature",
        "ether_key",
        "stark_key",
        "stark_signature"
      ],
      "properties": {
        "email": {
          "description": "User email",
          "type": "string"
        },
        "eth_signature": {
          "description": "Eth signature",
          "type": "string"
        },
        "ether_key": {
          "description": "The ether key of the user",
          "type": "string"
        },
        "stark_key": {
          "description": "Public stark key of the user",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        }
      }
    },
    "RegisterUserResponse": {
      "type": "object",
      "required": [
        "tx_hash"
      ],
      "properties": {
        "tx_hash": {
          "description": "Immutable signature authorising registration",
          "type": "string"
        }
      }
    },
    "SignableToken": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Token data. See https://docs.x.immutable.com/docs/token-data-object\""
        },
        "type": {
          "description": "Type of token",
          "type": "string",
          "example": "ETH/ERC20/ERC721"
        }
      }
    },
    "SignableTransferDetails": {
      "type": "object",
      "required": [
        "amount",
        "receiver",
        "token"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the token to transfer",
          "type": "string"
        },
        "receiver": {
          "description": "Ethereum address of the receiving user",
          "type": "string"
        },
        "token": {
          "description": "Token to transfer",
          "$ref": "#/definitions/SignableToken"
        }
      }
    },
    "SignableTransferResponseDetails": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "expiration_timestamp",
        "nonce",
        "payload_hash",
        "receiver_stark_key",
        "receiver_vault_id",
        "sender_vault_id",
        "token"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the asset being transferred",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset being transferred",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Timestamp when this transfer will expire",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce of the transfer",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Hash of the payload to be signed for transfer",
          "type": "string"
        },
        "receiver_stark_key": {
          "description": "Receiver of the transfer",
          "type": "string"
        },
        "receiver_vault_id": {
          "description": "ID of the vault being transferred to",
          "type": "integer"
        },
        "sender_vault_id": {
          "description": "ID of the vault being transferred from",
          "type": "integer"
        },
        "token": {
          "description": "Token in request to match in SDK implementation",
          "$ref": "#/definitions/SignableToken"
        }
      }
    },
    "SuccessResponse": {
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "type": "string"
        }
      }
    },
    "Token": {
      "type": "object",
      "required": [
        "data",
        "type"
      ],
      "properties": {
        "data": {
          "description": "Token details of this asset",
          "$ref": "#/definitions/TokenData"
        },
        "type": {
          "description": "Type of this asset (ETH/ERC20/ERC721)",
          "type": "string"
        }
      }
    },
    "TokenData": {
      "type": "object",
      "required": [
        "quantity",
        "quantity_with_fees"
      ],
      "properties": {
        "decimals": {
          "description": "Number of decimals supported by this asset",
          "type": "integer"
        },
        "id": {
          "description": "[DEPRECATED] Internal Immutable X Token ID",
          "type": "string"
        },
        "properties": {
          "description": "Properties of this asset",
          "$ref": "#/definitions/AssetProperties"
        },
        "quantity": {
          "description": "Quantity of this asset",
          "type": "string"
        },
        "quantity_with_fees": {
          "description": "Quantity of this asset with the sum of all fees applied to the asset",
          "type": "string"
        },
        "token_address": {
          "description": "Address of ERC721/ERC20 contract",
          "type": "string"
        },
        "token_id": {
          "description": "ERC721 Token ID",
          "type": "string"
        }
      }
    },
    "TokenDetails": {
      "type": "object",
      "required": [
        "decimals",
        "image_url",
        "name",
        "quantum",
        "symbol",
        "token_address"
      ],
      "properties": {
        "decimals": {
          "description": "Number of decimals for token",
          "type": "string"
        },
        "image_url": {
          "description": "Url for the icon of the token",
          "type": "string"
        },
        "name": {
          "description": "Full name of the token (e.g. Ether)",
          "type": "string"
        },
        "quantum": {
          "description": "Quantum for token",
          "type": "string"
        },
        "symbol": {
          "description": "Ticker symbol for token (e.g. ETH/USDC/IMX)",
          "type": "string"
        },
        "token_address": {
          "description": "Address of the ERC721 contract",
          "type": "string"
        }
      }
    },
    "Trade": {
      "type": "object",
      "required": [
        "a",
        "b",
        "status",
        "timestamp",
        "transaction_id"
      ],
      "properties": {
        "a": {
          "description": "Side A of this trade",
          "$ref": "#/definitions/TradeSide"
        },
        "b": {
          "description": "Side B of this trade",
          "$ref": "#/definitions/TradeSide"
        },
        "status": {
          "description": "Status of this trade",
          "type": "string"
        },
        "timestamp": {
          "description": "Time this trade occurred",
          "type": "string",
          "x-nullable": true
        },
        "transaction_id": {
          "description": "Sequential ID of this trade within Immutable X",
          "type": "integer"
        }
      }
    },
    "TradeSide": {
      "type": "object",
      "required": [
        "order_id",
        "sold",
        "token_type"
      ],
      "properties": {
        "order_id": {
          "description": "The ID of the order involved in the trade",
          "type": "integer"
        },
        "sold": {
          "description": "The amount of that order's asset this trade sold",
          "type": "string"
        },
        "token_address": {
          "description": "The contract address of the token that this trade sold",
          "type": "string"
        },
        "token_id": {
          "description": "The ID of the token that this trade sold",
          "type": "string"
        },
        "token_type": {
          "description": "The type of the token that this trade sold",
          "type": "string"
        }
      }
    },
    "Transfer": {
      "type": "object",
      "required": [
        "receiver",
        "status",
        "timestamp",
        "token",
        "transaction_id",
        "user"
      ],
      "properties": {
        "receiver": {
          "description": "Ethereum address of the user who received this transfer",
          "type": "string"
        },
        "status": {
          "description": "Status of the transaction",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp of the transfer",
          "type": "string",
          "x-nullable": true
        },
        "token": {
          "description": "Token transferred by the user",
          "$ref": "#/definitions/Token"
        },
        "transaction_id": {
          "description": "Sequential transaction ID",
          "type": "integer"
        },
        "user": {
          "description": "Ethereum address of the user  who submitted this transfer",
          "type": "string"
        }
      }
    },
    "TransferRequest": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "expiration_timestamp",
        "nonce",
        "receiver_stark_key",
        "receiver_vault_id",
        "sender_vault_id",
        "stark_signature"
      ],
      "properties": {
        "amount": {
          "description": "Amount to transfer",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset to transfer",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this transfer",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce of the transfer",
          "type": "integer"
        },
        "receiver_stark_key": {
          "description": "Public stark key of the user receiving the transfer",
          "type": "string"
        },
        "receiver_vault_id": {
          "description": "ID of the vault into which the asset will be transferred to",
          "type": "integer"
        },
        "sender_vault_id": {
          "description": "ID of the vault into which the asset is from",
          "type": "integer"
        },
        "stark_signature": {
          "description": "Transfer payload signature",
          "type": "string"
        }
      }
    },
    "UpdateCollectionRequest": {
      "type": "object",
      "properties": {
        "collection_image_url": {
          "description": "URL of the tile image for this collection",
          "type": "string"
        },
        "description": {
          "description": "Description of the collection",
          "type": "string"
        },
        "icon_url": {
          "description": "URL of the icon for this collection",
          "type": "string"
        },
        "metadata_api_url": {
          "description": "URL of the metadata for this collection",
          "type": "string"
        },
        "name": {
          "description": "Name of the collection",
          "type": "string"
        }
      }
    },
    "Withdrawal": {
      "type": "object",
      "required": [
        "rollup_status",
        "sender",
        "status",
        "timestamp",
        "token",
        "transaction_id",
        "withdrawn_to_wallet"
      ],
      "properties": {
        "rollup_status": {
          "description": "Status of the on-chain batch confirmation for this withdrawal",
          "type": "string"
        },
        "sender": {
          "description": "Ethereum address of the user who requested this withdrawal",
          "type": "string"
        },
        "status": {
          "description": "Status of this withdrawal",
          "type": "string"
        },
        "timestamp": {
          "description": "Time when this withdrawal was initiated",
          "type": "string"
        },
        "token": {
          "description": "Details of the asset this user is withdrawing",
          "$ref": "#/definitions/Token"
        },
        "transaction_id": {
          "description": "Sequential ID of this transaction",
          "type": "integer"
        },
        "withdrawn_to_wallet": {
          "description": "Withdrawal has been transferred to user's Layer 1 wallet",
          "type": "boolean"
        }
      }
    },
    "encodeAssetRequestToken": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Extra token information to be encoded",
          "$ref": "#/definitions/EncodeAssetTokenData"
        },
        "type": {
          "description": "The type of the token to be encoded",
          "type": "string",
          "enum": [
            "ETH",
            "ERC20",
            "ERC721"
          ]
        }
      },
      "x-go-gen-location": "models"
    }
  }
}
