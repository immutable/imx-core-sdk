{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Immutable X API",
    "title": "Immutable X API",
    "contact": {
      "name": "Immutable API Support",
      "url": "https://support.immutable.com",
      "email": "support@immutable.com"
    },
    "version": "3.0"
  },
  "host": "api.sandbox.x.immutable.com",
  "basePath": "/",
  "paths": {
    "/v1/assets": {
      "get": {
        "description": "Get a list of assets",
        "produces": [
          "application/json"
        ],
        "tags": [
          "assets"
        ],
        "summary": "Get a list of assets",
        "operationId": "listAssets",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "enum": [
              "updated_at",
              "name"
            ],
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated list of ethereum address of the users who own these assets",
            "name": "user",
            "in": "query"
          },
          {
            "enum": [
              "eth",
              "imx",
              "preparing_withdrawal",
              "withdrawable",
              "burned"
            ],
            "type": "string",
            "description": "Status of these assets",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the asset to search",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "URL JSON-encoded metadata filters for these assets. Javascript example: encodeURI(JSON.stringify({'proto':['1147'],'quality':['Meteorite']}))",
            "name": "metadata",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Set flag to true to fetch an array of sell order details with accepted status associated with the asset",
            "name": "sell_orders",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Set flag to true to fetch an array of buy order details  with accepted status associated with the asset",
            "name": "buy_orders",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Set flag to include fees associated with the asset",
            "name": "include_fees",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated list of the collections contract address",
            "name": "collection",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "updated_min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "updated_max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients",
            "name": "auxiliary_fee_percentages",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages",
            "name": "auxiliary_fee_recipients",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListAssetsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/assets/{token_address}/{token_id}": {
      "get": {
        "description": "Get details of an asset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "assets"
        ],
        "summary": "Get details of an asset",
        "operationId": "getAsset",
        "parameters": [
          {
            "type": "string",
            "description": "Address of the ERC721 contract",
            "name": "token_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Either ERC721 token ID or internal IMX ID",
            "name": "token_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Set flag to include fees associated with the asset",
            "name": "include_fees",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/collections": {
      "get": {
        "description": "Get a list of collections",
        "produces": [
          "application/json"
        ],
        "tags": [
          "collections"
        ],
        "summary": "Get a list of collections",
        "operationId": "listCollections",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "enum": [
              "name",
              "address",
              "project_id",
              "created_at",
              "updated_at"
            ],
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of collections not to be included, separated by commas",
            "name": "blacklist",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of collections to be included, separated by commas",
            "name": "whitelist",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Keyword to search in collection name and description",
            "name": "keyword",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListCollectionsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      },
      "post": {
        "description": "Create collection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "collections"
        ],
        "summary": "Create collection",
        "operationId": "createCollection",
        "parameters": [
          {
            "description": "create a collection",
            "name": "CreateCollectionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCollectionRequest"
            }
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature",
            "name": "IMX-Signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "IMX-Timestamp",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Immutable secret API key generated in the Immutable Hub https://hub.immutable.com. This key is required for all projects that are created inside the Immutable Hub.",
            "name": "x-immutable-api-key",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Collection"
            },
            "headers": {
              "Collection_Limit": {
                "type": "string",
                "description": "The collection limit available to the project for each four-week window."
              },
              "Collection_Limit_Reset": {
                "type": "string",
                "description": "The expiry date of the current four-week window."
              },
              "Collection_Remaining": {
                "type": "string",
                "description": "The amount of collections remaining for current four-week window."
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/collections-summary": {
      "get": {
        "description": "Get details of the collections from which a set of wallets hold tokens, along with the number of tokens held in each collection.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "collections"
        ],
        "summary": "Get metadata about the collections held by a set of wallets",
        "operationId": "summarizeCollections",
        "parameters": [
          {
            "type": "string",
            "description": "Comma separated list of wallet addresses",
            "name": "user",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.SummarizeCollectionsResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/collections/{address}": {
      "get": {
        "description": "Get details of a collection at the given address",
        "produces": [
          "application/json"
        ],
        "tags": [
          "collections"
        ],
        "summary": "Get details of a collection at the given address",
        "operationId": "getCollection",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      },
      "patch": {
        "description": "Update collection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "collections"
        ],
        "summary": "Update collection",
        "operationId": "updateCollection",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "description": "update a collection",
            "name": "UpdateCollectionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCollectionRequest"
            }
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp",
            "name": "IMX-Signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "IMX-Timestamp",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/collections/{address}/filters": {
      "get": {
        "description": "Get a list of collection filters",
        "produces": [
          "application/json"
        ],
        "tags": [
          "collections"
        ],
        "summary": "Get a list of collection filters",
        "operationId": "listCollectionFilters",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Next page token",
            "name": "next_page_token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CollectionFilter"
              }
            }
          }
        }
      }
    },
    "/v1/collections/{address}/metadata-schema": {
      "get": {
        "description": "Get collection metadata schema",
        "produces": [
          "application/json"
        ],
        "tags": [
          "metadata"
        ],
        "summary": "Get collection metadata schema",
        "operationId": "getMetadataSchema",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetadataSchemaProperty"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      },
      "post": {
        "description": "Add metadata schema to collection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "metadata"
        ],
        "summary": "Add metadata schema to collection",
        "operationId": "addMetadataSchemaToCollection",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "description": "add metadata schema to a collection",
            "name": "AddMetadataSchemaToCollectionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddMetadataSchemaToCollectionRequest"
            }
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp",
            "name": "IMX-Signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "IMX-Timestamp",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/collections/{address}/metadata-schema/{name}": {
      "patch": {
        "description": "Update metadata schema by name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "metadata"
        ],
        "summary": "Update metadata schema by name",
        "operationId": "updateMetadataSchemaByName",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Metadata schema name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "description": "update metadata schema",
            "name": "MetadataSchemaRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetadataSchemaRequest"
            }
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp",
            "name": "IMX-Signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "IMX-Timestamp",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/deposits": {
      "get": {
        "description": "Get a list of deposits",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deposits"
        ],
        "summary": "Get a list of deposits",
        "operationId": "listDeposits",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this deposit",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status of this deposit",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the deposited asset",
            "name": "token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the minted asset",
            "name": "token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the minted asset",
            "name": "asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token address of the deposited asset",
            "name": "token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the deposited asset",
            "name": "token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the deposited asset",
            "name": "min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the deposited asset",
            "name": "max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the deposited asset",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDepositsResponse"
            }
          }
        }
      }
    },
    "/v1/deposits/{id}": {
      "get": {
        "description": "Get details of a deposit with the given ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deposits"
        ],
        "summary": "Get details of a deposit with the given ID",
        "operationId": "getDeposit",
        "parameters": [
          {
            "type": "string",
            "description": "Deposit ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Deposit"
            }
          }
        }
      }
    },
    "/v1/encode/{assetType}": {
      "post": {
        "description": "Retrieves the Starkex Encoded format for a given asset so that it can be used as parameter for Starkex smart contracts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "encoding"
        ],
        "summary": "Retrieves the Starkex Encoded format for a given asset",
        "operationId": "encodeAsset",
        "parameters": [
          {
            "type": "string",
            "description": "Asset type to be encoded. (asset/mintable-asset)",
            "name": "assetType",
            "in": "path",
            "required": true
          },
          {
            "description": "Encode Asset",
            "name": "EncodeAssetRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EncodeAssetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EncodeAssetResponse"
            }
          }
        }
      }
    },
    "/v1/metadata-refreshes": {
      "get": {
        "description": "Get a list of metadata refreshes",
        "produces": [
          "application/json"
        ],
        "tags": [
          "metadata-refreshes"
        ],
        "operationId": "Get a list of metadata refreshes",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Collection address",
            "name": "collection_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature",
            "name": "x-imx-eth-signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "x-imx-eth-timestamp",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Wallet Address that signed the signature",
            "name": "x-imx-eth-address",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetMetadataRefreshes"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Forbidden Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      },
      "post": {
        "description": "Request metadata refresh for provided tokens",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "metadata-refreshes"
        ],
        "operationId": "Request a metadata refresh",
        "parameters": [
          {
            "description": "Create metadata refresh request",
            "name": "CreateMetadataRefreshRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMetadataRefreshRequest"
            }
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature",
            "name": "x-imx-eth-signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "x-imx-eth-timestamp",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Wallet Address that signed the signature",
            "name": "x-imx-eth-address",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CreateMetadataRefreshResponse"
            },
            "headers": {
              "x-imx-refresh-limit-reset": {
                "type": "string",
                "description": "The expiry date of the current one-hour window."
              },
              "x-imx-refreshes-limit": {
                "type": "string",
                "description": "The refresh request limit available to the project for each one-hour window."
              },
              "x-imx-remaining-refreshes": {
                "type": "string",
                "description": "The amount of refresh requests remaining for current one-hour window."
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Forbidden Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/APIError"
            },
            "headers": {
              "x-imx-refresh-limit-reset": {
                "type": "string",
                "description": "The expiry date of the current one-hour window."
              },
              "x-imx-refreshes-limit": {
                "type": "string",
                "description": "The refresh request limit available to the project for each one-hour window."
              },
              "x-imx-remaining-refreshes": {
                "type": "string",
                "description": "The amount of refresh requests remaining for current one-hour window."
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/metadata-refreshes/{refresh_id}": {
      "get": {
        "description": "Get metadata refresh results",
        "produces": [
          "application/json"
        ],
        "tags": [
          "metadata-refreshes"
        ],
        "operationId": "Get metadata refresh results",
        "parameters": [
          {
            "type": "string",
            "description": "The metadata refresh ID",
            "name": "refresh_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature",
            "name": "x-imx-eth-signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "x-imx-eth-timestamp",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Wallet Address that signed the signature",
            "name": "x-imx-eth-address",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetMetadataRefreshResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Forbidden Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/metadata-refreshes/{refresh_id}/errors": {
      "get": {
        "description": "Get metadata refresh errors",
        "produces": [
          "application/json"
        ],
        "tags": [
          "metadata-refreshes"
        ],
        "operationId": "Get metadata refresh errors",
        "parameters": [
          {
            "type": "string",
            "description": "The metadata refresh ID",
            "name": "refresh_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature",
            "name": "x-imx-eth-signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "x-imx-eth-timestamp",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Wallet Address that signed the signature",
            "name": "x-imx-eth-address",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetMetadataRefreshErrorsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Forbidden Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/mintable-token/{token_address}/{token_id}": {
      "get": {
        "description": "Get details of a mintable token with the given token address and token ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mints"
        ],
        "summary": "Get details of a mintable token with the given token address and token ID",
        "operationId": "getMintableTokenDetailsByClientTokenId",
        "parameters": [
          {
            "type": "string",
            "description": "Address of the ERC721 contract",
            "name": "token_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ERC721 token ID",
            "name": "token_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MintableTokenDetails"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/mints": {
      "get": {
        "description": "Get information about token mints. If you want to get information about tokens that have already been minted, use the listAssets endpoint.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mints"
        ],
        "summary": "Get a list of mints",
        "operationId": "listMints",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "enum": [
              "transaction_id",
              "token_id",
              "created_at",
              "updated_at"
            ],
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this mint",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status of this mint",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this mint, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this mint, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the minted asset",
            "name": "token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the minted asset",
            "name": "token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token Name of the minted asset",
            "name": "token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token address of the minted asset",
            "name": "token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the minted asset",
            "name": "min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the minted asset",
            "name": "max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the minted asset",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListMintsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/mints/{id}": {
      "get": {
        "description": "Get details of a mint with the given ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mints"
        ],
        "summary": "Get details of a mint with the given ID",
        "operationId": "getMint",
        "parameters": [
          {
            "type": "string",
            "description": "Mint ID. This is the transaction_id returned from listMints",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Result array will contain only one item",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Mint"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/passport/users": {
      "post": {
        "description": "Registers a passport user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Registers a passport user",
        "operationId": "RegisterPassportUser",
        "parameters": [
          {
            "type": "string",
            "description": "Authorization header",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Register Passport User",
            "name": "RegisterPassportUserRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.RegisterPassportUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RegisterPassportUserResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/primary_sales": {
      "post": {
        "security": [
          {
            "ImxEthAddress": [],
            "ImxEthSignature": []
          }
        ],
        "description": "[Experimental] Create Primary Sale. This endpoint is experimental and may change in the future.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "primary-sales"
        ],
        "summary": "[Experimental] Create Primary Sale",
        "operationId": "CreatePrimarySale",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/createPrimarySaleParamsBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created response.",
            "schema": {
              "$ref": "#/definitions/createPrimarySaleCreatedBody"
            }
          },
          "400": {
            "description": "Bad Request (400)",
            "schema": {
              "$ref": "#/definitions/createPrimarySaleBadRequestBody"
            }
          },
          "401": {
            "description": "Unauthorised Request (401)",
            "schema": {
              "$ref": "#/definitions/createPrimarySaleUnauthorizedBody"
            }
          },
          "403": {
            "description": "Forbidden (403)",
            "schema": {
              "$ref": "#/definitions/createPrimarySaleForbiddenBody"
            }
          },
          "404": {
            "description": "The specified resource was not found (404)",
            "schema": {
              "$ref": "#/definitions/createPrimarySaleNotFoundBody"
            }
          },
          "500": {
            "description": "Internal Server Error (500)",
            "schema": {
              "$ref": "#/definitions/createPrimarySaleInternalServerErrorBody"
            }
          },
          "501": {
            "description": "Not Implemented Error (501)",
            "schema": {
              "$ref": "#/definitions/createPrimarySaleNotImplementedBody"
            }
          }
        }
      }
    },
    "/v1/primary_sales/signable-primary-sale-details": {
      "post": {
        "description": "[Experimental] Signable Create Primary Sale.  This endpoint is experimental and may change in the future.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "primary-sales"
        ],
        "summary": "[Experimental] Signable Create Primary Sale",
        "operationId": "SignableCreatePrimarySale",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/signableCreatePrimarySaleParamsBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/signableCreatePrimarySaleOKBody"
            }
          },
          "400": {
            "description": "Bad Request (400)",
            "schema": {
              "$ref": "#/definitions/signableCreatePrimarySaleBadRequestBody"
            }
          },
          "404": {
            "description": "The specified resource was not found (404)",
            "schema": {
              "$ref": "#/definitions/signableCreatePrimarySaleNotFoundBody"
            }
          },
          "500": {
            "description": "Internal Server Error (500)",
            "schema": {
              "$ref": "#/definitions/signableCreatePrimarySaleInternalServerErrorBody"
            }
          },
          "501": {
            "description": "Not Implemented Error (501)",
            "schema": {
              "$ref": "#/definitions/signableCreatePrimarySaleNotImplementedBody"
            }
          }
        }
      }
    },
    "/v1/primary_sales/{id}": {
      "get": {
        "description": "[Experimental] Get a single primary sale by ID. This endpoint is experimental and may change in the future.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "primary-sales"
        ],
        "summary": "[Experimental] Get a single primary sale by ID",
        "operationId": "GetPrimarySale",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Global Primary Sale identifier",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/getPrimarySaleOKBody"
            }
          },
          "400": {
            "description": "Bad Request (400)",
            "schema": {
              "$ref": "#/definitions/getPrimarySaleBadRequestBody"
            }
          },
          "404": {
            "description": "The specified resource was not found (404)",
            "schema": {
              "$ref": "#/definitions/getPrimarySaleNotFoundBody"
            }
          },
          "500": {
            "description": "Internal Server Error (500)",
            "schema": {
              "$ref": "#/definitions/getPrimarySaleInternalServerErrorBody"
            }
          },
          "501": {
            "description": "Not Implemented Error (501)",
            "schema": {
              "$ref": "#/definitions/getPrimarySaleNotImplementedBody"
            }
          }
        }
      }
    },
    "/v1/primary_sales/{id}/accept": {
      "post": {
        "security": [
          {
            "ImxEthAddress": [],
            "ImxEthSignature": []
          }
        ],
        "description": "[Experimental] Accept Primary Sale.  This endpoint is experimental and may change in the future.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "primary-sales"
        ],
        "summary": "[Experimental] Accept Primary Sale",
        "operationId": "AcceptPrimarySale",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Global Primary Sale identifier",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/acceptPrimarySaleOKBody"
            }
          },
          "400": {
            "description": "Bad Request (400)",
            "schema": {
              "$ref": "#/definitions/acceptPrimarySaleBadRequestBody"
            }
          },
          "401": {
            "description": "Unauthorised Request (401)",
            "schema": {
              "$ref": "#/definitions/acceptPrimarySaleUnauthorizedBody"
            }
          },
          "403": {
            "description": "Forbidden (403)",
            "schema": {
              "$ref": "#/definitions/acceptPrimarySaleForbiddenBody"
            }
          },
          "404": {
            "description": "The specified resource was not found (404)",
            "schema": {
              "$ref": "#/definitions/acceptPrimarySaleNotFoundBody"
            }
          },
          "422": {
            "description": "Unprocessable Entity (422)",
            "schema": {
              "$ref": "#/definitions/acceptPrimarySaleUnprocessableEntityBody"
            }
          },
          "500": {
            "description": "Internal Server Error (500)",
            "schema": {
              "$ref": "#/definitions/acceptPrimarySaleInternalServerErrorBody"
            }
          },
          "501": {
            "description": "Not Implemented Error (501)",
            "schema": {
              "$ref": "#/definitions/acceptPrimarySaleNotImplementedBody"
            }
          }
        }
      }
    },
    "/v1/primary_sales/{id}/reject": {
      "post": {
        "security": [
          {
            "ImxEthAddress": [],
            "ImxEthSignature": []
          }
        ],
        "description": "[Experimental] Reject Primary Sale.  This endpoint is experimental and may change in the future.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "primary-sales"
        ],
        "summary": "[Experimental] Reject Primary Sale",
        "operationId": "RejectPrimarySale",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Global Primary Sale identifier",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/rejectPrimarySaleOKBody"
            }
          },
          "400": {
            "description": "Bad Request (400)",
            "schema": {
              "$ref": "#/definitions/rejectPrimarySaleBadRequestBody"
            }
          },
          "401": {
            "description": "Unauthorised Request (401)",
            "schema": {
              "$ref": "#/definitions/rejectPrimarySaleUnauthorizedBody"
            }
          },
          "403": {
            "description": "Forbidden (403)",
            "schema": {
              "$ref": "#/definitions/rejectPrimarySaleForbiddenBody"
            }
          },
          "404": {
            "description": "The specified resource was not found (404)",
            "schema": {
              "$ref": "#/definitions/rejectPrimarySaleNotFoundBody"
            }
          },
          "422": {
            "description": "Unprocessable Entity (422)",
            "schema": {
              "$ref": "#/definitions/rejectPrimarySaleUnprocessableEntityBody"
            }
          },
          "500": {
            "description": "Internal Server Error (500)",
            "schema": {
              "$ref": "#/definitions/rejectPrimarySaleInternalServerErrorBody"
            }
          },
          "501": {
            "description": "Not Implemented Error (501)",
            "schema": {
              "$ref": "#/definitions/rejectPrimarySaleNotImplementedBody"
            }
          }
        }
      }
    },
    "/v1/primary_sales/{id}/signable-accept-details": {
      "post": {
        "description": "[Experimental] Signable Accept Primary Sale.  This endpoint is experimental and may change in the future.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "primary-sales"
        ],
        "summary": "[Experimental] Signable Accept Primary Sale",
        "operationId": "SignableAcceptPrimarySale",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Global Primary Sale identifier",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/signableAcceptPrimarySaleOKBody"
            }
          },
          "400": {
            "description": "Bad Request (400)",
            "schema": {
              "$ref": "#/definitions/signableAcceptPrimarySaleBadRequestBody"
            }
          },
          "404": {
            "description": "The specified resource was not found (404)",
            "schema": {
              "$ref": "#/definitions/signableAcceptPrimarySaleNotFoundBody"
            }
          },
          "422": {
            "description": "Unprocessable Entity (422)",
            "schema": {
              "$ref": "#/definitions/signableAcceptPrimarySaleUnprocessableEntityBody"
            }
          },
          "500": {
            "description": "Internal Server Error (500)",
            "schema": {
              "$ref": "#/definitions/signableAcceptPrimarySaleInternalServerErrorBody"
            }
          },
          "501": {
            "description": "Not Implemented Error (501)",
            "schema": {
              "$ref": "#/definitions/signableAcceptPrimarySaleNotImplementedBody"
            }
          }
        }
      }
    },
    "/v1/primary_sales/{id}/signable-reject-details": {
      "post": {
        "description": "[Experimental] Signable Reject Primary Sale.  This endpoint is experimental and may change in the future.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "primary-sales"
        ],
        "summary": "[Experimental] Signable Reject Primary Sale",
        "operationId": "SignableRejectPrimarySale",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Global Primary Sale identifier",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/signableRejectPrimarySaleOKBody"
            }
          },
          "400": {
            "description": "Bad Request (400)",
            "schema": {
              "$ref": "#/definitions/signableRejectPrimarySaleBadRequestBody"
            }
          },
          "404": {
            "description": "The specified resource was not found (404)",
            "schema": {
              "$ref": "#/definitions/signableRejectPrimarySaleNotFoundBody"
            }
          },
          "422": {
            "description": "Unprocessable Entity (422)",
            "schema": {
              "$ref": "#/definitions/signableRejectPrimarySaleUnprocessableEntityBody"
            }
          },
          "500": {
            "description": "Internal Server Error (500)",
            "schema": {
              "$ref": "#/definitions/signableRejectPrimarySaleInternalServerErrorBody"
            }
          },
          "501": {
            "description": "Not Implemented Error (501)",
            "schema": {
              "$ref": "#/definitions/signableRejectPrimarySaleNotImplementedBody"
            }
          }
        }
      }
    },
    "/v1/projects/{id}": {
      "get": {
        "description": "Get a project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "projects"
        ],
        "summary": "Get a project",
        "operationId": "getProject",
        "parameters": [
          {
            "type": "string",
            "description": "Project ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "String created by signing wallet address and timestamp",
            "name": "IMX-Signature",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix Epoc timestamp",
            "name": "IMX-Timestamp",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/signable-deposit-details": {
      "post": {
        "description": "Gets details of a signable deposit",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "deposits"
        ],
        "summary": "Gets details of a signable deposit",
        "operationId": "getSignableDeposit",
        "parameters": [
          {
            "description": "Get details of signable deposit",
            "name": "GetSignableDepositRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableDepositRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableDepositResponse"
            }
          }
        }
      }
    },
    "/v1/signable-registration": {
      "post": {
        "description": "Get operator signature to allow clients to register the user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get operator signature to allow clients to register the user",
        "operationId": "getSignableRegistration",
        "parameters": [
          {
            "description": "Register User",
            "name": "GetSignableRegistrationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableRegistrationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/signable-registration-offchain": {
      "post": {
        "description": "Get encoded details to allow clients to register the user offchain",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get encoded details to allow clients to register the user offchain",
        "operationId": "getSignableRegistrationOffchain",
        "parameters": [
          {
            "description": "Register User Offchain",
            "name": "GetSignableRegistrationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableRegistrationOffchainResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/signable-transfer-details": {
      "post": {
        "description": "Gets details of a signable transfer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfers"
        ],
        "summary": "Gets details of a signable transfer",
        "operationId": "getSignableTransferV1",
        "parameters": [
          {
            "description": "get details of signable transfer",
            "name": "GetSignableTransferRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableTransferRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableTransferResponseV1"
            }
          }
        }
      }
    },
    "/v1/signable-withdrawal-details": {
      "post": {
        "description": "Gets details of a signable withdrawal",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "withdrawals"
        ],
        "summary": "Gets details of a signable withdrawal",
        "operationId": "getSignableWithdrawal",
        "parameters": [
          {
            "description": "get details of signable withdrawal",
            "name": "GetSignableWithdrawalRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableWithdrawalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableWithdrawalResponse"
            }
          }
        }
      }
    },
    "/v1/tokens": {
      "get": {
        "description": "Get a list of tokens",
        "produces": [
          "application/json"
        ],
        "tags": [
          "tokens"
        ],
        "summary": "Get a list of tokens",
        "operationId": "listTokens",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "enum": [
              "contract_address",
              "name",
              "symbol"
            ],
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Contract address of the token",
            "name": "address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token symbols for the token, e.g. ?symbols=IMX,ETH",
            "name": "symbols",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListTokensResponse"
            }
          }
        }
      }
    },
    "/v1/tokens/{address}": {
      "get": {
        "description": "Get details of a token",
        "produces": [
          "application/json"
        ],
        "tags": [
          "tokens"
        ],
        "summary": "Get details of a token",
        "operationId": "getToken",
        "parameters": [
          {
            "type": "string",
            "description": "Token Contract Address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenDetails"
            }
          }
        }
      }
    },
    "/v1/transfers": {
      "get": {
        "description": "Get a list of transfers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfers"
        ],
        "summary": "Get a list of transfers",
        "operationId": "listTransfers",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "enum": [
              "transaction_id",
              "created_at",
              "sender_ether_key",
              "receiver_ether_key"
            ],
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this transfer",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who received this transfer",
            "name": "receiver",
            "in": "query"
          },
          {
            "enum": [
              "success",
              "failure"
            ],
            "type": "string",
            "description": "Status of this transfer",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this transfer, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this transfer, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the transferred asset",
            "name": "token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the minted asset",
            "name": "token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the minted asset",
            "name": "asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token address of the transferred asset",
            "name": "token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the transferred asset",
            "name": "token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the transferred asset",
            "name": "min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the transferred asset",
            "name": "max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the transferred asset",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListTransfersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      },
      "post": {
        "description": "Create a new transfer request. Use https://docs.x.immutable.com/reference#/operations/getSignableTransferV1 to get request body params.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfers"
        ],
        "summary": "Creates a transfer of tokens between two parties",
        "operationId": "createTransferV1",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Authorization header",
            "name": "Authorization",
            "in": "header"
          },
          {
            "description": "Create transfer",
            "name": "CreateTransferRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTransferRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateTransferResponseV1"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/transfers/{id}": {
      "get": {
        "description": "Get details of a transfer with the given ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfers"
        ],
        "summary": "Get details of a transfer with the given ID",
        "operationId": "getTransfer",
        "parameters": [
          {
            "type": "string",
            "description": "Transfer ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Transfer"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/users": {
      "post": {
        "description": "Registers a user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Registers a user",
        "operationId": "registerUser",
        "parameters": [
          {
            "description": "Register User",
            "name": "RegisterUserRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegisterUserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/users/{user}": {
      "get": {
        "description": "Get stark keys for a registered user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get stark keys for a registered user",
        "operationId": "getUsers",
        "parameters": [
          {
            "type": "string",
            "description": "User",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetUsersApiResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v1/withdrawals": {
      "get": {
        "description": "Get a list of withdrawals",
        "produces": [
          "application/json"
        ],
        "tags": [
          "withdrawals"
        ],
        "summary": "Get a list of withdrawals",
        "operationId": "listWithdrawals",
        "parameters": [
          {
            "type": "boolean",
            "description": "Withdrawal has been transferred to user's Layer 1 wallet",
            "name": "withdrawn_to_wallet",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status of the on-chain batch confirmation for this withdrawal",
            "name": "rollup_status",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this withdrawal",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status of this withdrawal",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the withdrawn asset",
            "name": "token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the minted asset",
            "name": "token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the minted asset",
            "name": "asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token address of the withdrawn asset",
            "name": "token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the withdrawn asset",
            "name": "token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the withdrawn asset",
            "name": "min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the withdrawn asset",
            "name": "max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the withdrawn asset",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListWithdrawalsResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a withdrawal. Use https://docs.x.immutable.com/reference#/operations/getSignableWithdrawal to get request body params.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "withdrawals"
        ],
        "summary": "Creates a withdrawal of a token",
        "operationId": "createWithdrawal",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header",
            "required": true
          },
          {
            "description": "create a withdrawal",
            "name": "CreateWithdrawalRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWithdrawalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateWithdrawalResponse"
            }
          }
        }
      }
    },
    "/v1/withdrawals/{id}": {
      "get": {
        "description": "Gets details of withdrawal with the given ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "withdrawals"
        ],
        "summary": "Gets details of withdrawal with the given ID",
        "operationId": "getWithdrawal",
        "parameters": [
          {
            "type": "string",
            "description": "Withdrawal ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        }
      }
    },
    "/v2/balances/{owner}": {
      "get": {
        "description": "Get a list of balances for given user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "balances"
        ],
        "summary": "Get a list of balances for given user",
        "operationId": "listBalances",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum wallet address for user",
            "name": "owner",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListBalancesResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v2/balances/{owner}/{address}": {
      "get": {
        "description": "Fetches the token balances of the user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "balances"
        ],
        "summary": "Fetches the token balances of the user",
        "operationId": "getBalance",
        "parameters": [
          {
            "type": "string",
            "description": "Address of the owner/user",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Token address or 'eth'",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Balance"
            }
          }
        }
      }
    },
    "/v2/exchanges/{id}/signable-transfer-details": {
      "post": {
        "description": "Send a request for signable-transfer-details (offramp)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "exchanges"
        ],
        "summary": "Send a request for signable-transfer-details (offramp)",
        "operationId": "getExchangeSignableTransfer",
        "parameters": [
          {
            "description": "get details of signable transfer",
            "name": "GetSignableTransferRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableTransferRequestV1"
            }
          },
          {
            "type": "string",
            "description": "Transaction ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableTransferResponseV1"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/lambdas.APIError"
            }
          }
        }
      }
    },
    "/v2/exchanges/{id}/transfers": {
      "post": {
        "description": "Accepts a transfer request and updates the transfer_status after processing transfer (offramp)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "exchanges"
        ],
        "summary": "Accepts a transfer request and updates the transfer_status after processing transfer (offramp)",
        "operationId": "createExchangeTransfer",
        "parameters": [
          {
            "description": "Create a transfer",
            "name": "CreateTransferRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTransferRequestV1"
            }
          },
          {
            "type": "string",
            "description": "Transaction ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Authorization header",
            "name": "Authorization",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateTransferResponseV1"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/lambdas.APIError"
            }
          }
        }
      }
    },
    "/v2/mints": {
      "post": {
        "description": "Mint tokens in a batch with fees",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mints"
        ],
        "summary": "Mint Tokens V2",
        "operationId": "mintTokens",
        "parameters": [
          {
            "description": "details of tokens to mint",
            "name": "MintTokensRequestV2",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MintRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MintTokensResponse"
            },
            "headers": {
              "Mint_Limit": {
                "type": "string",
                "description": "The mint limit available to the project for each four-week window."
              },
              "Mint_Limit_Reset": {
                "type": "string",
                "description": "The expiry date of the current four-week window."
              },
              "Mint_Remaining": {
                "type": "string",
                "description": "The amount of mints remaining for current four-week window."
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v2/nft/primary": {
      "get": {
        "description": "Returns a list of NFT primary sales transactions",
        "produces": [
          "application/json"
        ],
        "tags": [
          "nft-checkout-primary"
        ],
        "summary": "Get a list of NFT primary sales transactions",
        "operationId": "getNftPrimaryTransactions",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "enum": [
              "transaction_id",
              "status",
              "amount",
              "mint_id"
            ],
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Transaction id",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Contract address of the asset",
            "name": "contract_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the seller",
            "name": "seller_wallet_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who wants to create transaction",
            "name": "user_wallet_address",
            "in": "query"
          },
          {
            "enum": [
              "created",
              "waitingPayment",
              "pending",
              "completed",
              "failed"
            ],
            "type": "string",
            "description": "Transaction status",
            "name": "status",
            "in": "query"
          },
          {
            "enum": [
              "moonpay"
            ],
            "type": "string",
            "description": "Checkout provider name",
            "name": "provider",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minting transaction ID - see mintTokens response",
            "name": "mint_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/nftprimarytransaction.ListTransactionsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/lambdas.APIError"
            }
          }
        }
      },
      "post": {
        "description": "Creates a transaction representing minting an NFT with a card payment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "nft-checkout-primary"
        ],
        "summary": "Create NFT primary sale transaction",
        "operationId": "createNftPrimary",
        "parameters": [
          {
            "description": "req",
            "name": "CreateAPIRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nftprimarytransaction.CreateAPIRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/nftprimarytransaction.CreateResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/lambdas.APIError"
            }
          }
        }
      }
    },
    "/v2/nft/primary/currencies": {
      "get": {
        "description": "Returns a list of supported currencies and their limits",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "nft-checkout-primary"
        ],
        "summary": "Get currencies with limits",
        "operationId": "getCurrenciesNFTCheckoutPrimary",
        "parameters": [
          {
            "enum": [
              "moonpay"
            ],
            "type": "string",
            "description": "Provider name",
            "name": "provider",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Flag if limits should be included in the response or not",
            "name": "include_limits",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CurrencyWithLimits"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/lambdas.APIError"
            }
          }
        }
      }
    },
    "/v2/nft/primary/register": {
      "post": {
        "description": "Registers a new contract for use in the minting with fiat card flow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "nft-checkout-primary"
        ],
        "summary": "Executes NFT primary sales contract registration",
        "operationId": "registerNftPrimarySalesContract",
        "parameters": [
          {
            "description": "req",
            "name": "CreateAPIRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contract.CreateAPIRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/contract.CreateResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/lambdas.APIError"
            }
          }
        }
      }
    },
    "/v2/nft/primary/{transaction_id}": {
      "get": {
        "description": "given a transaction id, returns the corresponding transaction representing a mint executed from a card payment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "nft-checkout-primary"
        ],
        "summary": "Get NFT primary sale transaction by id",
        "operationId": "getNftPrimaryTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction id",
            "name": "transaction_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/nftprimarytransaction.GetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/lambdas.APIError"
            }
          }
        }
      }
    },
    "/v2/passport/users": {
      "post": {
        "description": "Registers a passport user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Registers a passport user",
        "operationId": "RegisterPassportUserV2",
        "parameters": [
          {
            "type": "string",
            "description": "Authorization header",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Register Passport User",
            "name": "RegisterPassportUserRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.RegisterPassportUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RegisterPassportUserResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v2/signable-transfer-details": {
      "post": {
        "description": "Gets bulk details of a signable transfer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfers"
        ],
        "summary": "Gets bulk details of a signable transfer",
        "operationId": "getSignableTransfer",
        "parameters": [
          {
            "description": "get details of signable transfer",
            "name": "GetSignableTransferRequestV2",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableTransferRequestV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableTransferResponseV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v2/signable-withdrawal-details": {
      "post": {
        "description": "Gets details of a signable withdrawal",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "withdrawals"
        ],
        "summary": "Gets details of a signable withdrawal for starkex contracts that are higher than v3",
        "operationId": "getSignableWithdrawalV2",
        "parameters": [
          {
            "description": "get details of signable withdrawal",
            "name": "GetSignableWithdrawalRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableWithdrawalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableWithdrawalResponseV2"
            }
          }
        }
      }
    },
    "/v2/transfers": {
      "post": {
        "description": "Create a new transfer request. Use https://docs.x.immutable.com/reference#/operations/getSignableTransfer to get request body params.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfers"
        ],
        "summary": "Creates a transfer of multiple tokens between two parties",
        "operationId": "createTransfer",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Authorization header",
            "name": "Authorization",
            "in": "header"
          },
          {
            "description": "Create transfer",
            "name": "CreateTransferRequestV2",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTransferRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateTransferResponseV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v2/withdrawals": {
      "post": {
        "description": "Creates a withdrawal. Use https://docs.x.immutable.com/reference#/operations/getSignableWithdrawal to get request body params.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "withdrawals"
        ],
        "summary": "Creates a withdrawal of a token for starkex contracts that are higher than v3",
        "operationId": "createWithdrawalV2",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header",
            "required": true
          },
          {
            "description": "create a withdrawal",
            "name": "CreateWithdrawalRequestV2",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWithdrawalRequestV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateWithdrawalResponse"
            }
          }
        }
      }
    },
    "/v3/exchanges": {
      "get": {
        "description": "Returns a list of exchanges based on the request",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "exchanges"
        ],
        "summary": "Returns a list of exchanges based on the request",
        "operationId": "getExchanges",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "enum": [
              "id",
              "status",
              "exchange",
              "amount",
              "transfer_id"
            ],
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "Direction to sort",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Transaction ID",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who created transaction",
            "name": "wallet_address",
            "in": "query"
          },
          {
            "enum": [
              "created",
              "pending",
              "completed",
              "failed",
              "waitingPayment",
              "timedOut"
            ],
            "type": "string",
            "description": "Transaction status",
            "name": "status",
            "in": "query"
          },
          {
            "enum": [
              "moonpay",
              "layerswap"
            ],
            "type": "string",
            "description": "Provider name",
            "name": "provider",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Transfer ID",
            "name": "transfer_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetTransactionsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/lambdas.APIError"
            }
          }
        }
      },
      "post": {
        "description": "Receive wallet_address, provider, type and widget information to create a base exchange transaction and return widget URL",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "exchanges"
        ],
        "summary": "Create an exchange with URL",
        "operationId": "createExchange",
        "parameters": [
          {
            "description": "req",
            "name": "CreateExchangeAPIRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateExchangeAndURLAPIRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/exchange.CreateExchangeAndURLResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/lambdas.APIError"
            }
          }
        }
      }
    },
    "/v3/exchanges/{id}": {
      "get": {
        "description": "Get an exchange by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "exchanges"
        ],
        "summary": "Get an exchange by ID",
        "operationId": "getExchange",
        "parameters": [
          {
            "type": "string",
            "description": "Exchange ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Exchange"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/lambdas.APIError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/lambdas.APIError"
            }
          }
        }
      }
    },
    "/v3/orders": {
      "get": {
        "description": "Get a list of orders (V3)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "orders"
        ],
        "summary": "Get a list of orders (V3)",
        "operationId": "listOrdersV3",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "enum": [
              "created_at",
              "expired_at",
              "sell_quantity",
              "buy_quantity",
              "buy_quantity_with_fees",
              "updated_at"
            ],
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this order",
            "name": "user",
            "in": "query"
          },
          {
            "enum": [
              "active",
              "filled",
              "cancelled",
              "expired",
              "inactive"
            ],
            "type": "string",
            "description": "Status of this order",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter orders to include those with created_at timestamps after this time, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter orders to include those with created_at timestamps before this time, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter orders to include those with updated_at timestamps after this time, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "updated_min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter orders to include those with updated_at timestamps before this time, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'",
            "name": "updated_max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the asset this order buys",
            "name": "buy_token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the asset this order buys",
            "name": "buy_token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the asset this order buys",
            "name": "buy_asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token address of the asset this order buys",
            "name": "buy_token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the asset this order buys",
            "name": "buy_token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the asset this order buys",
            "name": "buy_min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the asset this order buys",
            "name": "buy_max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the asset this order buys",
            "name": "buy_metadata",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the asset this order sells",
            "name": "sell_token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the asset this order sells",
            "name": "sell_token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the asset this order sells",
            "name": "sell_asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token address of the asset this order sells",
            "name": "sell_token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the asset this order sells",
            "name": "sell_token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the asset this order sells",
            "name": "sell_min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the asset this order sells",
            "name": "sell_max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the asset this order sells",
            "name": "sell_metadata",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients",
            "name": "auxiliary_fee_percentages",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages",
            "name": "auxiliary_fee_recipients",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Set flag to true to include fee object for orders",
            "name": "include_fees",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListOrdersResponseV3"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      },
      "post": {
        "description": "Create an order using the v3 orderbook.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "orders"
        ],
        "summary": "Create an order (V3)",
        "operationId": "createOrderV3",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Authorization header",
            "name": "Authorization",
            "in": "header"
          },
          {
            "description": "create an order",
            "name": "CreateOrderRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOrderRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateOrderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v3/orders/{id}": {
      "get": {
        "description": "Get an order (V3)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "orders"
        ],
        "summary": "Get an order (V3)",
        "operationId": "getOrderV3",
        "parameters": [
          {
            "type": "string",
            "description": "Order ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Set flag to true to include fee body for the order",
            "name": "include_fees",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients",
            "name": "auxiliary_fee_percentages",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages",
            "name": "auxiliary_fee_recipients",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderV3"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      },
      "delete": {
        "description": "Cancel an order (V3)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "orders"
        ],
        "summary": "Cancel an order (V3)",
        "operationId": "cancelOrderV3",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Authorization header",
            "name": "Authorization",
            "in": "header"
          },
          {
            "description": "cancel an order",
            "name": "CancelOrderRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelOrderRequest"
            }
          },
          {
            "type": "string",
            "description": "Order ID to cancel",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CancelOrderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v3/signable-cancel-order-details": {
      "post": {
        "description": "Generate a signable cancel order message (V3)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "orders"
        ],
        "summary": "Generate a signable cancel order message (V3)",
        "operationId": "getSignableCancelOrderV3",
        "parameters": [
          {
            "description": "get a signable cancel order",
            "name": "GetSignableCancelOrderRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableCancelOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableCancelOrderResponse"
            }
          }
        }
      }
    },
    "/v3/signable-order-details": {
      "post": {
        "description": "Generate a signable order request (V3)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "orders"
        ],
        "summary": "Generate a signable order request (V3)",
        "operationId": "getSignableOrder",
        "parameters": [
          {
            "description": "get a signable order v3",
            "name": "GetSignableOrderRequestV3",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableOrderRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableOrderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v3/signable-trade-details": {
      "post": {
        "description": "Generate a signable trade message (V3)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "trades"
        ],
        "summary": "Generate a signable trade message (V3)",
        "operationId": "getSignableTrade",
        "parameters": [
          {
            "description": "get a signable trade",
            "name": "GetSignableTradeRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSignableTradeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSignableTradeResponse"
            }
          }
        }
      }
    },
    "/v3/trades": {
      "get": {
        "description": "Get a list of trades (V3)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "trades"
        ],
        "summary": "Get a list of trades (V3)",
        "operationId": "listTradesV3",
        "parameters": [
          {
            "type": "string",
            "description": "Party A's (buy order) token type of currency used to buy",
            "name": "party_a_token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Party A's (buy order) token address of currency used to buy",
            "name": "party_a_token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Party B's (sell order) token type of NFT sold - always ERC721",
            "name": "party_b_token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Party B's (sell order) collection address of NFT sold",
            "name": "party_b_token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Party B's (sell order) token id of NFT sold",
            "name": "party_b_token_id",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "enum": [
              "created_at",
              "transaction_id",
              "party_a_sold_quantity",
              "party_b_sold_quantity",
              "timestamp",
              "updated_timestamp"
            ],
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this trade, in ISO 8601 UTC format. Example: '2022-06-27T00:10:22Z'",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this trade, in ISO 8601 UTC format. Example: '2022-06-27T00:10:22Z'",
            "name": "max_timestamp",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListTradesResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      },
      "post": {
        "description": "Create a Trade.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "trades"
        ],
        "summary": "Create a Trade (V3)",
        "operationId": "createTradeV3",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Authorization header",
            "name": "Authorization",
            "in": "header"
          },
          {
            "description": "create a trade",
            "name": "CreateTradeRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/trades.CreateTradeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateTradeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/v3/trades/{id}": {
      "get": {
        "description": "Get details of a trade with the given ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "trades"
        ],
        "summary": "Get details of a trade with the given ID",
        "operationId": "getTradeV3",
        "parameters": [
          {
            "type": "string",
            "description": "Trade ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Trade"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "APIError": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "The error code",
          "type": "string"
        },
        "details": {
          "description": "The error details",
          "type": "string"
        },
        "message": {
          "description": "The error message",
          "type": "string"
        }
      }
    },
    "AddMetadataSchemaToCollectionRequest": {
      "type": "object",
      "required": [
        "metadata"
      ],
      "properties": {
        "contract_address": {
          "description": "Not required from API user",
          "type": "string"
        },
        "metadata": {
          "description": "The metadata container",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/MetadataSchemaRequest"
          }
        }
      }
    },
    "Asset": {
      "type": "object",
      "required": [
        "collection",
        "created_at",
        "description",
        "image_url",
        "metadata",
        "name",
        "status",
        "token_address",
        "token_id",
        "updated_at",
        "uri",
        "user"
      ],
      "properties": {
        "collection": {
          "$ref": "#/definitions/assetCollection"
        },
        "created_at": {
          "description": "Timestamp of when the asset was created",
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "description": "Description of this asset",
          "type": "string",
          "x-nullable": true
        },
        "fees": {
          "description": "Royalties to pay on this asset operations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fee"
          }
        },
        "id": {
          "description": "[DEPRECATED] Internal Immutable X Token ID",
          "type": "string"
        },
        "image_url": {
          "description": "URL of the image which should be used for this asset",
          "type": "string",
          "x-nullable": true
        },
        "metadata": {
          "description": "Metadata of this asset",
          "type": "object",
          "x-nullable": true
        },
        "name": {
          "description": "Name of this asset",
          "type": "string",
          "x-nullable": true
        },
        "orders": {
          "$ref": "#/definitions/assetOrders"
        },
        "status": {
          "description": "Status of this asset (where it is in the system)",
          "type": "string"
        },
        "token_address": {
          "description": "Address of the ERC721 contract",
          "type": "string"
        },
        "token_id": {
          "description": "ERC721 Token ID of this asset",
          "type": "string"
        },
        "updated_at": {
          "description": "Timestamp of when the asset was updated",
          "type": "string",
          "x-nullable": true
        },
        "uri": {
          "description": "URI to access this asset externally to Immutable X",
          "type": "string",
          "x-nullable": true
        },
        "user": {
          "description": "Ethereum address of the user who owns this asset",
          "type": "string"
        }
      }
    },
    "AssetProperties": {
      "type": "object",
      "properties": {
        "collection": {
          "$ref": "#/definitions/assetPropertiesCollection"
        },
        "image_url": {
          "description": "Image URL of this asset",
          "type": "string"
        },
        "name": {
          "description": "Name of this asset",
          "type": "string"
        }
      }
    },
    "AssetWithOrders": {
      "type": "object",
      "required": [
        "collection",
        "created_at",
        "description",
        "image_url",
        "metadata",
        "name",
        "status",
        "token_address",
        "token_id",
        "updated_at",
        "uri",
        "user"
      ],
      "properties": {
        "collection": {
          "$ref": "#/definitions/assetWithOrdersCollection"
        },
        "created_at": {
          "description": "Timestamp of when the asset was created",
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "description": "Description of this asset",
          "type": "string",
          "x-nullable": true
        },
        "fees": {
          "description": "Royalties to pay on this asset operations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fee"
          }
        },
        "id": {
          "description": "[DEPRECATED] Internal Immutable X Token ID",
          "type": "string"
        },
        "image_url": {
          "description": "URL of the image which should be used for this asset",
          "type": "string",
          "x-nullable": true
        },
        "metadata": {
          "description": "Metadata of this asset",
          "type": "object",
          "x-nullable": true
        },
        "name": {
          "description": "Name of this asset",
          "type": "string",
          "x-nullable": true
        },
        "orders": {
          "$ref": "#/definitions/assetWithOrdersOrders"
        },
        "status": {
          "description": "Status of this asset (where it is in the system)",
          "type": "string"
        },
        "token_address": {
          "description": "Address of the ERC721 contract",
          "type": "string"
        },
        "token_id": {
          "description": "ERC721 Token ID of this asset",
          "type": "string"
        },
        "updated_at": {
          "description": "Timestamp of when the asset was updated",
          "type": "string",
          "x-nullable": true
        },
        "uri": {
          "description": "URI to access this asset externally to Immutable X",
          "type": "string",
          "x-nullable": true
        },
        "user": {
          "description": "Ethereum address of the user who owns this asset",
          "type": "string"
        }
      }
    },
    "Balance": {
      "type": "object",
      "required": [
        "balance",
        "preparing_withdrawal",
        "symbol",
        "token_address",
        "withdrawable"
      ],
      "properties": {
        "balance": {
          "description": "Amount which is currently inside the exchange",
          "type": "string"
        },
        "preparing_withdrawal": {
          "description": "Amount which is currently preparing withdrawal from the exchange",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of the token (e.g. ETH, IMX)",
          "type": "string"
        },
        "token_address": {
          "description": "Address of the contract that represents this ERC20 token or empty for ETH",
          "type": "string"
        },
        "withdrawable": {
          "description": "Amount which is currently withdrawable from the exchange",
          "type": "string"
        }
      }
    },
    "CancelOrderRequest": {
      "type": "object",
      "required": [
        "order_id",
        "stark_signature"
      ],
      "properties": {
        "order_id": {
          "description": "ID of the order",
          "type": "integer"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        }
      }
    },
    "CancelOrderResponse": {
      "type": "object",
      "required": [
        "order_id",
        "status"
      ],
      "properties": {
        "order_id": {
          "description": "ID of the cancelled order",
          "type": "integer"
        },
        "status": {
          "description": "New status of the order",
          "type": "string"
        }
      }
    },
    "Collection": {
      "type": "object",
      "required": [
        "address",
        "collection_image_url",
        "created_at",
        "description",
        "icon_url",
        "metadata_api_url",
        "name",
        "project_id",
        "project_owner_address",
        "updated_at"
      ],
      "properties": {
        "address": {
          "description": "Ethereum address of the ERC721 contract",
          "type": "string"
        },
        "collection_image_url": {
          "description": "URL of the tile image for this collection",
          "type": "string",
          "x-nullable": true
        },
        "created_at": {
          "description": "Timestamp of when the collection was created",
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "description": "Description of the collection",
          "type": "string",
          "x-nullable": true
        },
        "icon_url": {
          "description": "URL of the icon for this collection",
          "type": "string",
          "x-nullable": true
        },
        "metadata_api_url": {
          "description": "URL of the metadata for this collection",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "description": "Name of the collection",
          "type": "string"
        },
        "project_id": {
          "description": "The collection's project ID",
          "type": "integer"
        },
        "project_owner_address": {
          "description": "Project owner address",
          "type": "string"
        },
        "updated_at": {
          "description": "Timestamp of when the collection was updated",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "CollectionDetails": {
      "type": "object",
      "required": [
        "icon_url",
        "name"
      ],
      "properties": {
        "icon_url": {
          "description": "URL of the icon of the collection",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "description": "Name of the collection",
          "type": "string"
        }
      }
    },
    "CollectionFilter": {
      "type": "object",
      "properties": {
        "key": {
          "description": "Key of this property",
          "type": "string"
        },
        "range": {
          "$ref": "#/definitions/collectionFilterRange"
        },
        "type": {
          "description": "Type of this filter",
          "type": "string"
        },
        "value": {
          "description": "List of possible values for this property",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateCollectionRequest": {
      "type": "object",
      "required": [
        "contract_address",
        "name",
        "owner_public_key",
        "project_id"
      ],
      "properties": {
        "collection_image_url": {
          "description": "URL of the tile image for this collection",
          "type": "string"
        },
        "contract_address": {
          "description": "Ethereum address of the ERC721 contract",
          "type": "string"
        },
        "description": {
          "description": "Description of the collection",
          "type": "string"
        },
        "icon_url": {
          "description": "URL of the icon for this collection",
          "type": "string"
        },
        "metadata_api_url": {
          "description": "URL of the metadata for this collection",
          "type": "string"
        },
        "name": {
          "description": "Name of the collection",
          "type": "string"
        },
        "owner_public_key": {
          "description": "Owner Public Key: The uncompressed public key of the owner of the contract",
          "type": "string"
        },
        "project_id": {
          "description": "The collection's project ID",
          "type": "integer"
        }
      }
    },
    "CreateExchangeAndURLAPIRequest": {
      "type": "object",
      "properties": {
        "provider": {
          "description": "Provider name",
          "type": "string",
          "enum": [
            "moonpay",
            "layerswap"
          ]
        },
        "type": {
          "description": "Transaction type",
          "type": "string",
          "enum": [
            "onramp",
            "offramp"
          ]
        },
        "wallet_address": {
          "description": "Ethereum address of the user who wants to create transaction",
          "type": "string"
        },
        "widget": {
          "description": "Optional widget params",
          "$ref": "#/definitions/WidgetParams"
        }
      }
    },
    "CreateMetadataRefreshRequest": {
      "type": "object",
      "required": [
        "collection_address",
        "token_ids"
      ],
      "properties": {
        "collection_address": {
          "description": "The collection contract address",
          "type": "string"
        },
        "token_ids": {
          "description": "The tokens to refresh",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateMetadataRefreshResponse": {
      "type": "object",
      "required": [
        "refresh_id"
      ],
      "properties": {
        "refresh_id": {
          "description": "The metadata refresh ID",
          "type": "string"
        }
      }
    },
    "CreateOrderRequest": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "asset_id_buy",
        "asset_id_sell",
        "expiration_timestamp",
        "nonce",
        "stark_key",
        "stark_signature",
        "vault_id_buy",
        "vault_id_sell"
      ],
      "properties": {
        "amount_buy": {
          "description": "Amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "asset_id_buy": {
          "description": "ID of the asset to buy",
          "type": "string"
        },
        "asset_id_sell": {
          "description": "ID of the asset to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this order",
          "type": "integer"
        },
        "fees": {
          "description": "Fee information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeEntry"
          }
        },
        "include_fees": {
          "description": "Whether to include fees in order",
          "type": "boolean"
        },
        "nonce": {
          "description": "Nonce of the order",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the user creating order",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        },
        "vault_id_buy": {
          "description": "ID of the vault into which the bought asset will be placed",
          "type": "integer"
        },
        "vault_id_sell": {
          "description": "ID of the vault to sell from",
          "type": "integer"
        }
      }
    },
    "CreateOrderRequestV3": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "asset_id_buy",
        "asset_id_sell",
        "expiration_timestamp",
        "nonce",
        "stark_key",
        "stark_signature",
        "vault_id_buy",
        "vault_id_sell"
      ],
      "properties": {
        "amount_buy": {
          "description": "Amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "asset_id_buy": {
          "description": "ID of the asset to buy",
          "type": "string"
        },
        "asset_id_sell": {
          "description": "ID of the asset to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this order",
          "type": "integer"
        },
        "fees": {
          "description": "Fee information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeEntry"
          }
        },
        "include_fees": {
          "description": "[DEPRECATED] Whether to include fees in order",
          "type": "boolean"
        },
        "nonce": {
          "description": "Nonce of the order",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the user creating order",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        },
        "vault_id_buy": {
          "description": "ID of the vault into which the bought asset will be placed",
          "type": "integer"
        },
        "vault_id_sell": {
          "description": "ID of the vault to sell from",
          "type": "integer"
        }
      }
    },
    "CreateOrderResponse": {
      "type": "object",
      "required": [
        "order_id",
        "status",
        "time"
      ],
      "properties": {
        "order_id": {
          "description": "ID of the created order",
          "type": "integer"
        },
        "request_id": {
          "description": "Request ID as a reference for an asynchronous order creation request",
          "type": "string"
        },
        "status": {
          "description": "Status of the created order",
          "type": "string"
        },
        "time": {
          "description": "Timestamp of the created order",
          "type": "integer"
        }
      }
    },
    "CreateProjectAPIKeyResponse": {
      "type": "object",
      "required": [
        "key"
      ],
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "CreateProjectGroupRequest": {
      "type": "object",
      "required": [
        "chain_type",
        "name"
      ],
      "properties": {
        "chain_type": {
          "description": "The chain type",
          "type": "string",
          "enum": [
            "starkex",
            "zkevm"
          ]
        },
        "name": {
          "description": "The project group name",
          "type": "string"
        }
      }
    },
    "CreateProjectRequest": {
      "type": "object",
      "required": [
        "company_name",
        "contact_email",
        "name"
      ],
      "properties": {
        "company_name": {
          "description": "The company name",
          "type": "string"
        },
        "contact_email": {
          "description": "The project contact email (must be registered as a developer account with Immutable at https://hub.immutable.com)",
          "type": "string"
        },
        "name": {
          "description": "The project name",
          "type": "string"
        }
      }
    },
    "CreateProjectResponse": {
      "type": "object",
      "required": [
        "environment_id",
        "id"
      ],
      "properties": {
        "environment_id": {
          "description": "The environment ID",
          "type": "string"
        },
        "id": {
          "description": "The project ID",
          "type": "integer"
        }
      }
    },
    "CreateTradeRequestV1": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "asset_id_buy",
        "asset_id_sell",
        "expiration_timestamp",
        "nonce",
        "order_id",
        "stark_key",
        "stark_signature",
        "vault_id_buy",
        "vault_id_sell"
      ],
      "properties": {
        "amount_buy": {
          "description": "Amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "asset_id_buy": {
          "description": "ID of the asset to buy",
          "type": "string"
        },
        "asset_id_sell": {
          "description": "ID of the asset to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this trade",
          "type": "integer"
        },
        "fee_info": {
          "$ref": "#/definitions/createTradeRequestV1FeeInfo"
        },
        "fees": {
          "description": "Fee information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeEntry"
          }
        },
        "include_fees": {
          "description": "[deprecated] All orders include fees since the introduction of protocol fees",
          "type": "boolean"
        },
        "nonce": {
          "description": "Nonce of the trade",
          "type": "integer"
        },
        "order_id": {
          "description": "ID of the order",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the user creating trade",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        },
        "vault_id_buy": {
          "description": "ID of the vault into which the traded asset will be placed",
          "type": "integer"
        },
        "vault_id_sell": {
          "description": "ID of the vault to sell from",
          "type": "integer"
        }
      }
    },
    "CreateTradeResponse": {
      "type": "object",
      "required": [
        "status",
        "trade_id"
      ],
      "properties": {
        "request_id": {
          "description": "Request ID as a reference for an asynchronous trade creation request",
          "type": "string"
        },
        "status": {
          "description": "[DEPRECATED] Unused field that always returns an empty string. The presence of a trade_id signifies that a trade was successful.",
          "type": "string"
        },
        "trade_id": {
          "description": "ID of trade within Immutable X",
          "type": "integer"
        }
      }
    },
    "CreateTransferRequest": {
      "type": "object",
      "required": [
        "requests",
        "sender_stark_key"
      ],
      "properties": {
        "requests": {
          "description": "List of transfers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferRequest"
          }
        },
        "sender_stark_key": {
          "description": "Public stark key of the user sending the transfer",
          "type": "string"
        }
      }
    },
    "CreateTransferRequestV1": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "expiration_timestamp",
        "nonce",
        "receiver_stark_key",
        "receiver_vault_id",
        "sender_stark_key",
        "sender_vault_id",
        "stark_signature"
      ],
      "properties": {
        "amount": {
          "description": "Amount to transfer",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset to transfer",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this transfer",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce of the transfer",
          "type": "integer"
        },
        "receiver_stark_key": {
          "description": "Public stark key of the user receiving the transfer",
          "type": "string"
        },
        "receiver_vault_id": {
          "description": "ID of the vault into which the asset will be transferred to",
          "type": "integer"
        },
        "sender_stark_key": {
          "description": "Public stark key of the user sending the transfer",
          "type": "string"
        },
        "sender_vault_id": {
          "description": "ID of the vault into which the asset is from",
          "type": "integer"
        },
        "stark_signature": {
          "description": "Transfer payload signature",
          "type": "string"
        }
      }
    },
    "CreateTransferResponse": {
      "type": "object",
      "required": [
        "transfer_ids"
      ],
      "properties": {
        "transfer_ids": {
          "description": "List of transfer IDs",
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "CreateTransferResponseV1": {
      "type": "object",
      "required": [
        "sent_signature",
        "status",
        "time",
        "transfer_id"
      ],
      "properties": {
        "sent_signature": {
          "description": "[deprecated] Sent signature",
          "type": "string"
        },
        "status": {
          "description": "[deprecated] The status of transfer",
          "type": "string"
        },
        "time": {
          "description": "[deprecated] Time of the transfer",
          "type": "integer"
        },
        "transfer_id": {
          "description": "ID of the transfer",
          "type": "integer"
        }
      }
    },
    "CreateTransferResponseV2": {
      "type": "object",
      "required": [
        "transfer_ids"
      ],
      "properties": {
        "transfer_ids": {
          "description": "List of transfer IDs",
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "CreateWithdrawalRequest": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "nonce",
        "stark_key",
        "stark_signature",
        "vault_id"
      ],
      "properties": {
        "amount": {
          "description": "Amount to withdraw",
          "type": "string"
        },
        "asset_id": {
          "description": "The ID of asset the user is withdrawing",
          "type": "string"
        },
        "nonce": {
          "description": "Nonce of the withdrawal",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the withdrawing user",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        },
        "vault_id": {
          "description": "The ID of the vault the asset belong to",
          "type": "integer"
        }
      }
    },
    "CreateWithdrawalRequestV2": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "expiration_timestamp",
        "nonce",
        "receiver_stark_key",
        "sender_stark_key",
        "sender_vault_id",
        "stark_signature"
      ],
      "properties": {
        "amount": {
          "description": "Amount to withdraw",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset to withdraw",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this withdrawal",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce of the withdrawal",
          "type": "integer"
        },
        "receiver_stark_key": {
          "description": "Public stark key of the user receiving the withdrawal",
          "type": "string"
        },
        "receiver_vault_id": {
          "description": "ID of the vault into which the asset will be withdrawn",
          "type": "integer"
        },
        "sender_stark_key": {
          "description": "Public stark key of the withdrawing user",
          "type": "string"
        },
        "sender_vault_id": {
          "description": "ID of the vault into which the asset is from",
          "type": "integer"
        },
        "stark_signature": {
          "description": "Withdrawal payload signature",
          "type": "string"
        }
      }
    },
    "CreateWithdrawalResponse": {
      "type": "object",
      "required": [
        "status",
        "time",
        "withdrawal_id"
      ],
      "properties": {
        "status": {
          "description": "Status of the withdrawal",
          "type": "string"
        },
        "time": {
          "description": "Time of the withdrawal",
          "type": "integer"
        },
        "withdrawal_id": {
          "description": "ID of the withdrawal",
          "type": "integer"
        }
      }
    },
    "CurrencyWithLimits": {
      "type": "object",
      "properties": {
        "currency_code": {
          "description": "Provider currency code",
          "type": "string",
          "example": "eth_immutable"
        },
        "limits": {
          "description": "Currency limits will be null by default",
          "$ref": "#/definitions/aggregate.Limit"
        },
        "provider": {
          "description": "Provider name (e.g. moonpay)",
          "type": "string",
          "example": "moonpay"
        },
        "symbol": {
          "description": "Currency Symbol",
          "type": "string",
          "example": "ETH"
        }
      }
    },
    "Deposit": {
      "type": "object",
      "required": [
        "status",
        "timestamp",
        "token",
        "transaction_id",
        "user"
      ],
      "properties": {
        "status": {
          "description": "Status of this deposit in Immutable X",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp of the deposit",
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/depositToken"
        },
        "transaction_id": {
          "description": "Sequential ID of this transaction within Immutable X",
          "type": "integer"
        },
        "user": {
          "description": "Ethereum address of the user making this deposit",
          "type": "string"
        }
      }
    },
    "EncodeAssetRequest": {
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "$ref": "#/definitions/encodeAssetRequestToken"
        }
      }
    },
    "EncodeAssetResponse": {
      "type": "object",
      "required": [
        "asset_id",
        "asset_type"
      ],
      "properties": {
        "asset_id": {
          "description": "Stark encoded asset id",
          "type": "string"
        },
        "asset_type": {
          "description": "Stark encoded asset type",
          "type": "string"
        }
      }
    },
    "EncodeAssetTokenData": {
      "type": "object",
      "properties": {
        "blueprint": {
          "description": "Blueprint information of the token to be encoded. Used if token is mintable.",
          "type": "string"
        },
        "id": {
          "description": "ID of the token to be encoded. Used if token is mintable.",
          "type": "string"
        },
        "token_address": {
          "description": "Contract address of the token to be encoded",
          "type": "string"
        },
        "token_id": {
          "description": "TokenId of the token to be encoded. Used if token is non-mintable",
          "type": "string"
        }
      }
    },
    "Exchange": {
      "type": "object",
      "properties": {
        "created_at": {
          "description": "Time this transaction was created",
          "type": "string"
        },
        "data": {
          "description": "Additional transaction data",
          "$ref": "#/definitions/OptionalExchangeData"
        },
        "id": {
          "description": "Transaction ID",
          "type": "integer"
        },
        "provider": {
          "description": "Provider name",
          "type": "string",
          "example": "moonpay"
        },
        "status": {
          "description": "Transaction status",
          "type": "string",
          "example": "created, pending, completed, failed, waitingPayment, timedOut"
        },
        "type": {
          "description": "Transaction type",
          "type": "string",
          "example": "onramp"
        },
        "updated_at": {
          "description": "Time this transaction was updates",
          "type": "string"
        },
        "wallet_address": {
          "description": "Ethereum address of the user who created transaction",
          "type": "string"
        }
      }
    },
    "Fee": {
      "type": "object",
      "required": [
        "address",
        "percentage",
        "type"
      ],
      "properties": {
        "address": {
          "description": "Wallet address",
          "type": "string"
        },
        "percentage": {
          "description": "The percentage of fee",
          "type": "number",
          "maximum": 100
        },
        "type": {
          "description": "Type of fee. Examples: `royalty`, `maker`, `taker` or `protocol`",
          "type": "string"
        }
      }
    },
    "FeeData": {
      "type": "object",
      "properties": {
        "contract_address": {
          "description": "Address of ERC721/ERC20 contract",
          "type": "string"
        },
        "decimals": {
          "description": "Number of decimals supported by this asset",
          "type": "integer"
        }
      }
    },
    "FeeEntry": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "fee_percentage": {
          "type": "number"
        }
      }
    },
    "FeeInfo": {
      "type": "object",
      "required": [
        "asset_id",
        "fee_limit",
        "source_vault_id"
      ],
      "properties": {
        "asset_id": {
          "description": "ID of the asset these fees relate to",
          "type": "string"
        },
        "fee_limit": {
          "description": "Fee limit",
          "type": "string"
        },
        "source_vault_id": {
          "description": "ID of vault the asset belong to",
          "type": "integer"
        }
      }
    },
    "FeeToken": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/feeTokenData"
        },
        "type": {
          "description": "Fee token type. One of ETH/ERC20",
          "type": "string",
          "enum": [
            "ETH",
            "ERC20"
          ]
        }
      }
    },
    "GetMetadataRefreshErrorsResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Metadata refresh errors matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataRefreshErrors"
          }
        }
      }
    },
    "GetMetadataRefreshResponse": {
      "type": "object",
      "required": [
        "refresh_id",
        "status",
        "collection_address",
        "started_at",
        "summary"
      ],
      "properties": {
        "collection_address": {
          "description": "The collection address",
          "type": "string"
        },
        "completed_at": {
          "description": "When the metadata refresh completed",
          "type": "string",
          "x-nullable": true
        },
        "refresh_id": {
          "description": "The metadata refresh ID",
          "type": "string"
        },
        "started_at": {
          "description": "When the metadata refresh started",
          "type": "string"
        },
        "status": {
          "description": "The metadata refresh status",
          "type": "string",
          "enum": [
            "queued",
            "in_progress",
            "completed"
          ]
        },
        "summary": {
          "description": "The current metadata refresh summary. The summary continue to update until metadata refresh is completed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataRefreshSummary"
          }
        }
      }
    },
    "GetMetadataRefreshes": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Metadata refresh errors matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataRefreshExcludingSummary"
          }
        }
      }
    },
    "GetProjectsResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Projects matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        }
      }
    },
    "GetSignableCancelOrderRequest": {
      "type": "object",
      "required": [
        "order_id"
      ],
      "properties": {
        "order_id": {
          "description": "ID of the order to be cancelled",
          "type": "integer"
        }
      }
    },
    "GetSignableCancelOrderResponse": {
      "type": "object",
      "required": [
        "order_id",
        "payload_hash",
        "readable_transaction",
        "signable_message",
        "verification_signature"
      ],
      "properties": {
        "order_id": {
          "description": "ID of the order to be cancelled",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Hash of the payload to be signed for cancel order",
          "type": "string"
        },
        "readable_transaction": {
          "description": "EIP-712 encoding of the StarkEx cancel order request to be displayed to the user",
          "type": "string"
        },
        "signable_message": {
          "description": "Message to sign from wallet to confirm cancel order",
          "type": "string"
        },
        "verification_signature": {
          "description": "IMX signed readable_transaction and payload_hash",
          "type": "string"
        }
      }
    },
    "GetSignableDepositRequest": {
      "type": "object",
      "required": [
        "amount",
        "token",
        "user"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the token the user is depositing",
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/getSignableDepositRequestToken"
        },
        "user": {
          "description": "User who is depositing",
          "type": "string"
        }
      }
    },
    "GetSignableDepositResponse": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "nonce",
        "stark_key",
        "vault_id"
      ],
      "properties": {
        "amount": {
          "description": "Amount this user is depositing",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset this user is depositing",
          "type": "string"
        },
        "nonce": {
          "description": "Nonce of the deposit",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the depositing user",
          "type": "string"
        },
        "vault_id": {
          "description": "ID of the vault this user is depositing to",
          "type": "integer"
        }
      }
    },
    "GetSignableOrderRequest": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "token_buy",
        "token_sell",
        "user"
      ],
      "properties": {
        "amount_buy": {
          "description": "Fee-exclusive amount to buy the asset",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell (quantity)",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "ExpirationTimestamp in Unix time. Note: will be rounded down to the nearest hour",
          "type": "integer"
        },
        "fees": {
          "description": "Inclusion of either maker or taker fees",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeEntry"
          }
        },
        "split_fees": {
          "description": "SplitFees dictates whether fees will be split between maker \u0026 taker, set split_fees to true when submitting signing to v3 endpoints and vice versa for v1",
          "type": "boolean"
        },
        "token_buy": {
          "$ref": "#/definitions/getSignableOrderRequestTokenBuy"
        },
        "token_sell": {
          "$ref": "#/definitions/getSignableOrderRequestTokenSell"
        },
        "user": {
          "description": "Ethereum address of the submitting user",
          "type": "string"
        }
      }
    },
    "GetSignableOrderRequestV3": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "token_buy",
        "token_sell",
        "user"
      ],
      "properties": {
        "amount_buy": {
          "description": "Fee-exclusive amount to buy the asset",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell (quantity)",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "ExpirationTimestamp in Unix time in hours. Note: will be rounded down to the nearest hour",
          "type": "integer"
        },
        "fees": {
          "description": "Inclusion of either maker or taker fees",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeEntry"
          }
        },
        "split_fees": {
          "description": "SplitFees is a deprecated field. It's value is ignored.",
          "type": "boolean"
        },
        "token_buy": {
          "$ref": "#/definitions/getSignableOrderRequestV3TokenBuy"
        },
        "token_sell": {
          "$ref": "#/definitions/getSignableOrderRequestV3TokenSell"
        },
        "user": {
          "description": "Ethereum address of the submitting user",
          "type": "string"
        }
      }
    },
    "GetSignableOrderResponse": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "asset_id_buy",
        "asset_id_sell",
        "expiration_timestamp",
        "nonce",
        "payload_hash",
        "readable_transaction",
        "signable_message",
        "stark_key",
        "vault_id_buy",
        "vault_id_sell",
        "verification_signature"
      ],
      "properties": {
        "amount_buy": {
          "description": "Fee-exclusive amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "asset_id_buy": {
          "description": "ID of the asset to buy",
          "type": "string"
        },
        "asset_id_sell": {
          "description": "ID of the asset to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "ExpirationTimestamp in Unix time in hours. Note: will be rounded down to the nearest hour",
          "type": "integer"
        },
        "fee_info": {
          "$ref": "#/definitions/getSignableOrderResponseFeeInfo"
        },
        "nonce": {
          "description": "Nonce of the order",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Hash of the payload to be signed for signable order",
          "type": "string"
        },
        "readable_transaction": {
          "description": "EIP-712 encoding of the StarkEx order transaction to be displayed to the user",
          "type": "string"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to confirm order request",
          "type": "string"
        },
        "stark_key": {
          "description": "Public stark key of the created user",
          "type": "string"
        },
        "vault_id_buy": {
          "description": "ID of the vault into which the bought asset will be placed",
          "type": "integer"
        },
        "vault_id_sell": {
          "description": "ID of the vault to sell from",
          "type": "integer"
        },
        "verification_signature": {
          "description": "IMX signed readable_transaction and payload_hash",
          "type": "string"
        }
      }
    },
    "GetSignableRegistrationOffchainResponse": {
      "type": "object",
      "required": [
        "payload_hash",
        "readable_transaction",
        "signable_message",
        "verification_signature"
      ],
      "properties": {
        "payload_hash": {
          "description": "Hash of the payload to be signed for user registration offchain",
          "type": "string"
        },
        "readable_transaction": {
          "description": "EIP-712 encoding of the StarkEx Register User Offchain request to be displayed to the user",
          "type": "string"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to register user offchain",
          "type": "string"
        },
        "verification_signature": {
          "description": "IMX signed readable_transaction and payload_hash",
          "type": "string"
        }
      }
    },
    "GetSignableRegistrationRequest": {
      "type": "object",
      "required": [
        "ether_key",
        "stark_key"
      ],
      "properties": {
        "ether_key": {
          "description": "Ether key of user",
          "type": "string"
        },
        "stark_key": {
          "description": "Public stark key of the user",
          "type": "string"
        }
      }
    },
    "GetSignableRegistrationResponse": {
      "type": "object",
      "required": [
        "operator_signature",
        "payload_hash",
        "readable_transaction",
        "verification_signature"
      ],
      "properties": {
        "operator_signature": {
          "description": "Signature from authorised operator",
          "type": "string"
        },
        "payload_hash": {
          "description": "Hash of the payload to be signed for user registration",
          "type": "string"
        },
        "readable_transaction": {
          "description": "EIP-712 encoding of the StarkEx Register User request to be displayed to the user",
          "type": "string"
        },
        "verification_signature": {
          "description": "IMX signed readable_transaction and payload_hash",
          "type": "string"
        }
      }
    },
    "GetSignableTradeRequest": {
      "type": "object",
      "required": [
        "order_id",
        "user"
      ],
      "properties": {
        "expiration_timestamp": {
          "description": "ExpirationTimestamp in Unix time in hours. Note: will be rounded down to the nearest hour",
          "type": "integer"
        },
        "fees": {
          "description": "Inclusion of either maker or taker fees",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeEntry"
          }
        },
        "order_id": {
          "description": "The ID of the maker order involved",
          "type": "integer"
        },
        "user": {
          "description": "Ethereum address of the submitting user",
          "type": "string"
        }
      }
    },
    "GetSignableTradeResponse": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "asset_id_buy",
        "asset_id_sell",
        "expiration_timestamp",
        "nonce",
        "payload_hash",
        "readable_transaction",
        "signable_message",
        "stark_key",
        "vault_id_buy",
        "vault_id_sell",
        "verification_signature"
      ],
      "properties": {
        "amount_buy": {
          "description": "Amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "asset_id_buy": {
          "description": "ID of the asset to buy",
          "type": "string"
        },
        "asset_id_sell": {
          "description": "ID of the asset to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "ExpirationTimestamp in Unix time in hours. Note: will be rounded down to the nearest hour",
          "type": "integer"
        },
        "fee_info": {
          "$ref": "#/definitions/getSignableTradeResponseFeeInfo"
        },
        "nonce": {
          "description": "Nonce of the order",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Payload Hash",
          "type": "string"
        },
        "readable_transaction": {
          "description": "EIP-712 encoding of the StarkEx trade transaction to be displayed to the user",
          "type": "string"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to confirm trade request",
          "type": "string"
        },
        "stark_key": {
          "description": "Public stark key of the created user",
          "type": "string"
        },
        "vault_id_buy": {
          "description": "ID of the vault into which the bought asset will be placed",
          "type": "integer"
        },
        "vault_id_sell": {
          "description": "ID of the vault to sell from",
          "type": "integer"
        },
        "verification_signature": {
          "description": "IMX signed readable_transaction and payload_hash",
          "type": "string"
        }
      }
    },
    "GetSignableTradeResult": {
      "type": "object",
      "properties": {
        "amount_buy": {
          "description": "Amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "asset_id_buy": {
          "description": "ID of the asset to buy",
          "type": "string"
        },
        "asset_id_sell": {
          "description": "ID of the asset to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp of this trade",
          "type": "integer"
        },
        "fee_info": {
          "$ref": "#/definitions/getSignableTradeResultFeeInfo"
        },
        "nonce": {
          "description": "Nonce of the trade",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Payload Hash",
          "type": "string"
        },
        "readable_transaction": {
          "description": "EIP-712 encoding of the StarkEx trade transaction to be displayed to the user",
          "type": "string"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to confirm trade request",
          "type": "string"
        },
        "stark_key": {
          "description": "Public stark key of the trading user",
          "type": "string"
        },
        "vault_id_buy": {
          "description": "ID of the vault into which the traded asset will be placed",
          "type": "integer"
        },
        "vault_id_sell": {
          "description": "ID of the vault to sell from",
          "type": "integer"
        },
        "verification_signature": {
          "description": "IMX signed readable_transaction and payload_hash",
          "type": "string"
        }
      }
    },
    "GetSignableTransferRequest": {
      "type": "object",
      "required": [
        "amount",
        "receiver",
        "sender",
        "token"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the token to transfer",
          "type": "string"
        },
        "receiver": {
          "description": "Ethereum address of the receiving user",
          "type": "string"
        },
        "sender": {
          "description": "Ethereum address of the transferring user",
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/getSignableTransferRequestToken"
        }
      }
    },
    "GetSignableTransferRequestV1": {
      "type": "object",
      "required": [
        "amount",
        "receiver",
        "sender",
        "token"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the token to transfer",
          "type": "string"
        },
        "receiver": {
          "description": "Ethereum address of the receiving user",
          "type": "string"
        },
        "sender": {
          "description": "Ethereum address of the transferring user",
          "type": "string"
        },
        "token": {
          "description": "Token to transfer",
          "$ref": "#/definitions/SignableToken"
        }
      }
    },
    "GetSignableTransferRequestV2": {
      "type": "object",
      "required": [
        "sender_ether_key",
        "signable_requests"
      ],
      "properties": {
        "sender_ether_key": {
          "description": "Ethereum address of the transferring user",
          "type": "string"
        },
        "signable_requests": {
          "description": "List of signable transfer details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SignableTransferDetailsV2"
          }
        }
      }
    },
    "GetSignableTransferResponse": {
      "type": "object",
      "required": [
        "sender_stark_key",
        "signable_message",
        "signable_responses"
      ],
      "properties": {
        "sender_stark_key": {
          "description": "Sender of the transfer",
          "type": "string"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to confirm transfer request",
          "type": "string"
        },
        "signable_responses": {
          "description": "List of transfer responses without the sender stark key",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SignableTransferResponseDetails"
          }
        }
      }
    },
    "GetSignableTransferResponseV1": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "expiration_timestamp",
        "nonce",
        "payload_hash",
        "readable_transaction",
        "receiver_stark_key",
        "receiver_vault_id",
        "sender_vault_id",
        "signable_message",
        "verification_signature"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the asset being transferred",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset being transferred",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Token in request to match in SDK implementation",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce of the transfer",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Hash of the payload",
          "type": "string"
        },
        "readable_transaction": {
          "description": "EIP-712 encoding of the StarkEx transfer transaction to be displayed to the user",
          "type": "string"
        },
        "receiver_stark_key": {
          "description": "Receiver of the transfer",
          "type": "string"
        },
        "receiver_vault_id": {
          "description": "ID of the vault being transferred to",
          "type": "integer"
        },
        "sender_stark_key": {
          "description": "Sender of the transfer",
          "type": "string"
        },
        "sender_vault_id": {
          "description": "ID of the vault being transferred from",
          "type": "integer"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to confirm transfer request",
          "type": "string"
        },
        "verification_signature": {
          "description": "IMX signed readable_transaction and payload_hash",
          "type": "string"
        }
      }
    },
    "GetSignableTransferResponseV2": {
      "type": "object",
      "required": [
        "sender_stark_key",
        "signable_message",
        "signable_responses"
      ],
      "properties": {
        "sender_stark_key": {
          "description": "Sender of the transfer",
          "type": "string"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to confirm transfer request",
          "type": "string"
        },
        "signable_responses": {
          "description": "List of transfer responses without the sender stark key",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SignableTransferResponseDetails"
          }
        }
      }
    },
    "GetSignableWithdrawalRequest": {
      "type": "object",
      "required": [
        "amount",
        "token",
        "user"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the token to withdraw",
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/getSignableWithdrawalRequestToken"
        },
        "user": {
          "description": "Ethereum address of the user who is making this withdrawal",
          "type": "string"
        }
      }
    },
    "GetSignableWithdrawalResponse": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "nonce",
        "payload_hash",
        "readable_transaction",
        "signable_message",
        "stark_key",
        "vault_id",
        "verification_signature"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the token we are withdrawing",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset to be withdrawn",
          "type": "string"
        },
        "nonce": {
          "description": "Nonce of this transaction",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Encoded payload hash",
          "type": "string"
        },
        "readable_transaction": {
          "description": "EIP-712 encoding of the StarkEx withdrawal request to be displayed to the user",
          "type": "string"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to verity withdrawal request",
          "type": "string"
        },
        "stark_key": {
          "description": "Public stark key of this user",
          "type": "string"
        },
        "vault_id": {
          "description": "ID of the vault we are withdrawing from",
          "type": "integer"
        },
        "verification_signature": {
          "description": "IMX signed readable_transaction and payload_hash",
          "type": "string"
        }
      }
    },
    "GetSignableWithdrawalResponseV2": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "expiration_timestamp",
        "nonce",
        "payload_hash",
        "quantized_amount",
        "readable_transaction",
        "receiver_stark_key",
        "receiver_vault_id",
        "sender_stark_key",
        "sender_vault_id",
        "signable_message",
        "verification_signature"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the asset being withdrawn",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset being withdrawn",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Token in request to match in SDK implementation",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce of the transfer",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Hash of the payload",
          "type": "string"
        },
        "quantized_amount": {
          "description": "QuantizedAmount of the asset being withdrawn",
          "type": "string"
        },
        "readable_transaction": {
          "description": "EIP-712 encoding of the StarkEx withdrawal request to be displayed to the user",
          "type": "string"
        },
        "receiver_stark_key": {
          "description": "Receiver of the transfer (l1 eth wallet)",
          "type": "string"
        },
        "receiver_vault_id": {
          "description": "ID of the vault being transferred to (special vault = 0 used for withdrawal operations)",
          "type": "integer"
        },
        "sender_stark_key": {
          "description": "Sender of the withdrawal",
          "type": "string"
        },
        "sender_vault_id": {
          "description": "ID of the vault being withdrawn from",
          "type": "integer"
        },
        "signable_message": {
          "description": "Message to sign with L1 wallet to verity withdrawal request",
          "type": "string"
        },
        "verification_signature": {
          "description": "IMX signed readable_transaction and payload_hash",
          "type": "string"
        }
      }
    },
    "GetTransactionsResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Transactions matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Exchange"
          }
        }
      }
    },
    "GetUsersApiResponse": {
      "type": "object",
      "required": [
        "accounts"
      ],
      "properties": {
        "accounts": {
          "description": "Accounts",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListAssetsResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Assets matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetWithOrders"
          }
        }
      }
    },
    "ListBalancesResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Dictionary of tokens",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Balance"
          }
        }
      }
    },
    "ListCollectionsResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Collections matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Collection"
          }
        }
      }
    },
    "ListDepositsResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Deposits matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Deposit"
          }
        }
      }
    },
    "ListMintsResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Mints matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Mint"
          }
        }
      }
    },
    "ListOrdersResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Orders matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        }
      }
    },
    "ListOrdersResponseV3": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Orders matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderV3"
          }
        }
      }
    },
    "ListTokensResponse": {
      "type": "object",
      "required": [
        "cursor",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "result": {
          "description": "Tokens matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenDetails"
          }
        }
      }
    },
    "ListTradesResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Trades matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Trade"
          }
        }
      }
    },
    "ListTransfersResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Transfers matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transfer"
          }
        }
      }
    },
    "ListWithdrawalsResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Withdrawals matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Withdrawal"
          }
        }
      }
    },
    "MetadataRefreshErrors": {
      "required": [
        "collection_address",
        "token_id",
        "error_code",
        "client_token_metadata_url",
        "client_response_body",
        "client_response_status_code",
        "created_at"
      ],
      "properties": {
        "client_response_body": {
          "description": "Metadata API response for the token",
          "type": "string",
          "x-nullable": true
        },
        "client_response_status_code": {
          "description": "Metadata API response code for the token",
          "type": "string",
          "x-nullable": true
        },
        "client_token_metadata_url": {
          "description": "Requested metadata url for the token",
          "type": "string"
        },
        "collection_address": {
          "description": "The collection contract address",
          "type": "string"
        },
        "created_at": {
          "description": "When the error was created",
          "type": "string"
        },
        "error_code": {
          "description": "Metadata refresh error code",
          "type": "string"
        },
        "token_id": {
          "description": "The token ID",
          "type": "string"
        }
      }
    },
    "MetadataRefreshExcludingSummary": {
      "type": "object",
      "required": [
        "refresh_id",
        "status",
        "collection_address",
        "started_at"
      ],
      "properties": {
        "collection_address": {
          "description": "The collection address",
          "type": "string"
        },
        "completed_at": {
          "description": "When the metadata refresh completed",
          "type": "string",
          "x-nullable": true
        },
        "refresh_id": {
          "description": "The metadata refresh ID",
          "type": "string"
        },
        "started_at": {
          "description": "When the metadata refresh started",
          "type": "string"
        },
        "status": {
          "description": "The metadata refresh status",
          "type": "string",
          "enum": [
            "queued",
            "in_progress",
            "completed"
          ]
        }
      }
    },
    "MetadataRefreshSummary": {
      "properties": {
        "failed": {
          "description": "The number of tokens with failed metadata refreshes",
          "type": "integer"
        },
        "pending": {
          "description": "The number of tokens that has not been refreshed yet",
          "type": "integer"
        },
        "succeeded": {
          "description": "The number of tokens with successful metadata refreshes",
          "type": "integer"
        }
      }
    },
    "MetadataSchemaProperty": {
      "type": "object",
      "required": [
        "filterable",
        "name",
        "type"
      ],
      "properties": {
        "filterable": {
          "description": "Sets the metadata as filterable",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the metadata key",
          "type": "string"
        },
        "type": {
          "description": "Type of the metadata. Values: \"enum\", \"text\", \"boolean\", \"continuous\", \"discrete\" | Default: \"text\".\nSrc: https://docs.x.immutable.com/docs/asset-metadata#property-type-mapping",
          "type": "string"
        }
      }
    },
    "MetadataSchemaRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "filterable": {
          "description": "Sets the metadata as filterable",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the metadata key",
          "type": "string"
        },
        "type": {
          "description": "Type of the metadata. Values: \"enum\", \"text\", \"boolean\", \"continuous\", \"discrete\" | Default: \"text\". Src: https://docs.x.immutable.com/docs/asset-metadata#property-type-mapping",
          "type": "string",
          "enum": [
            "enum",
            "text",
            "boolean",
            "continuous",
            "discrete"
          ]
        }
      }
    },
    "Mint": {
      "type": "object",
      "required": [
        "status",
        "timestamp",
        "token",
        "transaction_id",
        "user"
      ],
      "properties": {
        "fees": {
          "description": "Fee details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fee"
          }
        },
        "status": {
          "description": "Status of this mint",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp this mint was initiated",
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/mintToken"
        },
        "transaction_id": {
          "description": "Sequential ID of transaction in Immutable X",
          "type": "integer"
        },
        "user": {
          "description": "Ethereum address of the user to whom the asset has been minted",
          "type": "string"
        }
      }
    },
    "MintFee": {
      "type": "object",
      "required": [
        "percentage",
        "recipient"
      ],
      "properties": {
        "percentage": {
          "description": "Fee percentage",
          "type": "number",
          "maximum": 100
        },
        "recipient": {
          "description": "Recipient wallet address",
          "type": "string"
        }
      }
    },
    "MintRequest": {
      "type": "object",
      "required": [
        "auth_signature",
        "contract_address",
        "users"
      ],
      "properties": {
        "auth_signature": {
          "description": "Signature from authorised minter",
          "type": "string"
        },
        "contract_address": {
          "description": "minting contract",
          "type": "string"
        },
        "royalties": {
          "description": "Global contract-level royalty fees",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MintFee"
          }
        },
        "users": {
          "description": "Users to mint to",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/MintUser"
          }
        }
      }
    },
    "MintResultDetails": {
      "type": "object",
      "required": [
        "contract_address",
        "token_id",
        "tx_id"
      ],
      "properties": {
        "contract_address": {
          "description": "Contract address of this token",
          "type": "string"
        },
        "token_id": {
          "description": "IMX ID of this token",
          "type": "string"
        },
        "tx_id": {
          "description": "Mint Transaction ID",
          "type": "integer"
        }
      }
    },
    "MintTokenDataV2": {
      "type": "object",
      "required": [
        "blueprint",
        "id"
      ],
      "properties": {
        "blueprint": {
          "description": "Token metadata blueprint",
          "type": "string"
        },
        "id": {
          "description": "Token ID\nNote: While the Token ID is required to be a string, it still needs to be a valid uint256 as per the ERC-721 token standard.",
          "type": "string"
        },
        "royalties": {
          "description": "List of mint fees",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MintFee"
          }
        }
      }
    },
    "MintTokensResponse": {
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "List of mint result details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MintResultDetails"
          }
        }
      }
    },
    "MintUser": {
      "type": "object",
      "required": [
        "tokens",
        "user"
      ],
      "properties": {
        "tokens": {
          "description": "List of Mint tokens",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MintTokenDataV2"
          }
        },
        "user": {
          "description": "User wallet address",
          "type": "string"
        }
      }
    },
    "MintableTokenDetails": {
      "type": "object",
      "required": [
        "blueprint",
        "client_token_id",
        "token_id"
      ],
      "properties": {
        "blueprint": {
          "description": "Blueprint of this token",
          "type": "string"
        },
        "client_token_id": {
          "description": "ID provided by the client for this token",
          "type": "string"
        },
        "token_id": {
          "description": "IMX Id of this token",
          "type": "string"
        }
      }
    },
    "OptionalExchangeData": {
      "type": "object",
      "properties": {
        "external_id": {
          "description": "Provider transaction ID",
          "type": "string"
        },
        "fees_amount": {
          "description": "Fees amount",
          "type": "number"
        },
        "from_amount": {
          "description": "Amount that was exchanged from",
          "type": "number"
        },
        "from_currency": {
          "description": "Currency that was exchanged from",
          "type": "string"
        },
        "provider_wallet_address": {
          "description": "Provider wallet address that was used for transferring crypto",
          "type": "string"
        },
        "to_amount": {
          "description": "Amount that was exchanged to",
          "type": "number"
        },
        "to_currency": {
          "description": "Currency that was exchanged to",
          "type": "string"
        },
        "transfer_id": {
          "description": "Transfer ID",
          "type": "string"
        }
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "amount_sold",
        "buy",
        "expiration_timestamp",
        "order_id",
        "sell",
        "status",
        "timestamp",
        "updated_timestamp",
        "user"
      ],
      "properties": {
        "amount_sold": {
          "description": "Amount of the asset already sold by this order",
          "type": "string",
          "x-nullable": true
        },
        "buy": {
          "$ref": "#/definitions/orderBuy"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp of this order",
          "type": "string",
          "x-nullable": true
        },
        "fees": {
          "description": "Fee information for the order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderFeeInfo"
          }
        },
        "order_id": {
          "description": "ID of the order",
          "type": "integer"
        },
        "sell": {
          "$ref": "#/definitions/orderSell"
        },
        "status": {
          "description": "Status of the order",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp this order was created",
          "type": "string",
          "x-nullable": true
        },
        "updated_timestamp": {
          "description": "Updated timestamp of this order",
          "type": "string",
          "x-nullable": true
        },
        "user": {
          "description": "Ethereum address of the user who submitted the order",
          "type": "string"
        }
      }
    },
    "OrderDetails": {
      "type": "object",
      "properties": {
        "buy_orders": {
          "description": "Buy orders for this asset",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "sell_orders": {
          "description": "Sell orders for this asset",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "OrderFeeInfo": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Address of the fee recipient",
          "type": "string"
        },
        "amount": {
          "description": "Fee amount",
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/orderFeeInfoToken"
        },
        "type": {
          "description": "Fee type",
          "type": "string"
        }
      }
    },
    "OrderV3": {
      "type": "object",
      "required": [
        "amount_sold",
        "buy",
        "expiration_timestamp",
        "order_id",
        "sell",
        "status",
        "timestamp",
        "updated_timestamp",
        "user"
      ],
      "properties": {
        "amount_sold": {
          "description": "Amount of the asset already sold by this order",
          "type": "string",
          "x-nullable": true
        },
        "buy": {
          "$ref": "#/definitions/orderV3Buy"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp of this order",
          "type": "string",
          "x-nullable": true
        },
        "fees": {
          "description": "[DEPRECATED] Fee information for the order.\nReplaced by maker_fees / taker_fees depending on the type of order.\nRefer https://docs.x.immutable.com/docs/maker-taker-fees/#new-maker-taker-fields-and-the-deprecation-of-quantity_with_fees-in-buy-and-sell.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderFeeInfo"
          }
        },
        "maker_fees": {
          "$ref": "#/definitions/orderV3MakerFees"
        },
        "maker_taker_type": {
          "description": "MakerTakerType",
          "type": "string"
        },
        "order_id": {
          "description": "ID of the order",
          "type": "integer"
        },
        "sell": {
          "$ref": "#/definitions/orderV3Sell"
        },
        "status": {
          "description": "Status of the order",
          "type": "string"
        },
        "taker_fees": {
          "$ref": "#/definitions/orderV3TakerFees"
        },
        "timestamp": {
          "description": "Timestamp this order was created",
          "type": "string",
          "x-nullable": true
        },
        "updated_timestamp": {
          "description": "Updated timestamp of this order",
          "type": "string",
          "x-nullable": true
        },
        "user": {
          "description": "Ethereum address of the user who submitted the order",
          "type": "string"
        }
      }
    },
    "Project": {
      "type": "object",
      "required": [
        "collection_limit_expires_at",
        "collection_monthly_limit",
        "collection_remaining",
        "company_name",
        "contact_email",
        "id",
        "mint_limit_expires_at",
        "mint_monthly_limit",
        "mint_remaining",
        "name"
      ],
      "properties": {
        "api_key": {
          "description": "API key for the project. This is only for zkevm project. This API is not for increasing rate limit yet.",
          "type": "string"
        },
        "chain_type": {
          "description": "The project ChainType",
          "type": "string"
        },
        "collection_limit_expires_at": {
          "description": "The current period expiry date for collection limit",
          "type": "string"
        },
        "collection_monthly_limit": {
          "description": "The total monthly collection limit",
          "type": "integer"
        },
        "collection_remaining": {
          "description": "The number of collection remaining in the current period",
          "type": "integer"
        },
        "company_name": {
          "description": "The company name",
          "type": "string"
        },
        "contact_email": {
          "description": "The project contact email (must be registered as a developer account with Immutable at https://hub.immutable.com)",
          "type": "string"
        },
        "environment_id": {
          "description": "The environment ID",
          "type": "string"
        },
        "environment_name": {
          "description": "The user environment name correlating to this project",
          "type": "string"
        },
        "id": {
          "description": "The project ID",
          "type": "integer"
        },
        "mint_limit_expires_at": {
          "description": "The current period expiry date for mint operation limit",
          "type": "string"
        },
        "mint_monthly_limit": {
          "description": "The total monthly mint operation limit",
          "type": "integer"
        },
        "mint_remaining": {
          "description": "The number of mint operation remaining in the current period",
          "type": "integer"
        },
        "name": {
          "description": "The project name",
          "type": "string"
        },
        "org_id": {
          "description": "The organisation ID that the project belongs to",
          "type": "string"
        },
        "project_group_id": {
          "description": "Project group id",
          "type": "string"
        },
        "publishable_key": {
          "description": "The public publishable_key for the project",
          "type": "string"
        },
        "publishable_key_created_at": {
          "description": "The public publishable_key created time",
          "type": "string"
        }
      }
    },
    "Range": {
      "type": "object",
      "properties": {
        "max": {
          "description": "Maximum value",
          "type": "integer"
        },
        "min": {
          "description": "Minimum value",
          "type": "integer"
        }
      }
    },
    "RegisterPassportUserRequest": {
      "type": "object",
      "required": [
        "eth_signature",
        "ether_key",
        "stark_key",
        "stark_signature",
        "user_id"
      ],
      "properties": {
        "eth_signature": {
          "description": "Eth signature",
          "type": "string"
        },
        "ether_key": {
          "description": "The ether key of the user",
          "type": "string"
        },
        "stark_key": {
          "description": "Public stark key of the user",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        },
        "user_id": {
          "description": "The auth0 user id",
          "type": "string"
        }
      }
    },
    "RegisterPassportUserResult": {
      "type": "object",
      "properties": {
        "ether_key": {
          "description": "The ether key of the user",
          "type": "string"
        },
        "stark_key": {
          "description": "The stark key of the user",
          "type": "string"
        },
        "user_admin_key": {
          "description": "The admin key of the user",
          "type": "string"
        }
      }
    },
    "RegisterUserRequest": {
      "type": "object",
      "required": [
        "eth_signature",
        "ether_key",
        "stark_key",
        "stark_signature"
      ],
      "properties": {
        "email": {
          "description": "User email",
          "type": "string"
        },
        "eth_signature": {
          "description": "Eth signature",
          "type": "string"
        },
        "ether_key": {
          "description": "The ether key of the user",
          "type": "string"
        },
        "stark_key": {
          "description": "Public stark key of the user",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        }
      }
    },
    "RegisterUserResponse": {
      "type": "object",
      "required": [
        "tx_hash"
      ],
      "properties": {
        "tx_hash": {
          "description": "Immutable signature authorising registration",
          "type": "string"
        }
      }
    },
    "SignableToken": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Token data. See https://docs.x.immutable.com/docs/token-data-object"
        },
        "type": {
          "description": "Type of token",
          "type": "string",
          "example": "ETH/ERC20/ERC721"
        }
      }
    },
    "SignableTransferDetails": {
      "type": "object",
      "required": [
        "amount",
        "receiver",
        "token"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the token to transfer",
          "type": "string"
        },
        "receiver": {
          "description": "Ethereum address of the receiving user",
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/signableTransferDetailsToken"
        }
      }
    },
    "SignableTransferDetailsV2": {
      "type": "object",
      "required": [
        "amount",
        "receiver",
        "token"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the token to transfer",
          "type": "string"
        },
        "receiver": {
          "description": "Ethereum address of the receiving user",
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/signableTransferDetailsV2Token"
        }
      }
    },
    "SignableTransferResponseDetails": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "expiration_timestamp",
        "nonce",
        "payload_hash",
        "readable_transaction",
        "receiver_stark_key",
        "receiver_vault_id",
        "sender_vault_id",
        "token",
        "verification_signature"
      ],
      "properties": {
        "amount": {
          "description": "Amount of the asset being transferred",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset being transferred",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Timestamp when this transfer will expire",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce of the transfer",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Hash of the payload to be signed for transfer",
          "type": "string"
        },
        "readable_transaction": {
          "description": "EIP-712 encoding of the StarkEx transfer request to be displayed to the user",
          "type": "string"
        },
        "receiver_stark_key": {
          "description": "Receiver of the transfer",
          "type": "string"
        },
        "receiver_vault_id": {
          "description": "ID of the vault being transferred to",
          "type": "integer"
        },
        "sender_vault_id": {
          "description": "ID of the vault being transferred from",
          "type": "integer"
        },
        "token": {
          "$ref": "#/definitions/signableTransferResponseDetailsToken"
        },
        "verification_signature": {
          "description": "IMX signed readable_transaction and payload_hash",
          "type": "string"
        }
      }
    },
    "SuccessResponse": {
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "type": "string"
        }
      }
    },
    "SummarizedCollection": {
      "type": "object",
      "required": [
        "collection",
        "owned_token_count",
        "owners"
      ],
      "properties": {
        "collection": {
          "$ref": "#/definitions/summarizedCollectionCollection"
        },
        "owned_token_count": {
          "description": "Combined amount of tokens owned by the provided wallets",
          "type": "integer"
        },
        "owners": {
          "description": "Subset of the provided wallets that own at least one token in this collection",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Token": {
      "type": "object",
      "required": [
        "data",
        "type"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/tokenDataOAIGen"
        },
        "type": {
          "description": "Type of this asset (ETH/ERC20/ERC721)",
          "type": "string"
        }
      }
    },
    "TokenData": {
      "type": "object",
      "required": [
        "quantity",
        "quantity_with_fees"
      ],
      "properties": {
        "decimals": {
          "description": "Number of decimals supported by this asset",
          "type": "integer"
        },
        "id": {
          "description": "[DEPRECATED] Internal Immutable X Token ID",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/tokenDataProperties"
        },
        "quantity": {
          "description": "Quantity of this asset - inclusive of fees for buy order in v1 API and exclusive of fees in v3 API",
          "type": "string"
        },
        "quantity_with_fees": {
          "description": "[DEPRECATED for v3 endpoints] Quantity of this asset with the sum of all fees applied to the asset.\nReplaced by quantity_with_fees in maker_fees / taker_fees depending on the type of order.\nRefer https://docs.x.immutable.com/docs/maker-taker-fees/#new-maker-taker-fields-and-the-deprecation-of-quantity_with_fees-in-buy-and-sell.",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of a token",
          "type": "string"
        },
        "token_address": {
          "description": "Address of ERC721/ERC20 contract",
          "type": "string"
        },
        "token_id": {
          "description": "ERC721 Token ID",
          "type": "string"
        }
      }
    },
    "TokenDetails": {
      "type": "object",
      "required": [
        "decimals",
        "image_url",
        "name",
        "quantum",
        "symbol",
        "token_address"
      ],
      "properties": {
        "decimals": {
          "description": "Number of decimals for token",
          "type": "string"
        },
        "image_url": {
          "description": "Url for the icon of the token",
          "type": "string"
        },
        "name": {
          "description": "Full name of the token (e.g. Ether)",
          "type": "string"
        },
        "quantum": {
          "description": "Quantum for token",
          "type": "string"
        },
        "symbol": {
          "description": "Ticker symbol for token (e.g. ETH/USDC/IMX)",
          "type": "string"
        },
        "token_address": {
          "description": "Address of the ERC20 contract",
          "type": "string"
        }
      }
    },
    "Trade": {
      "type": "object",
      "required": [
        "a",
        "b",
        "status",
        "timestamp",
        "transaction_id"
      ],
      "properties": {
        "a": {
          "$ref": "#/definitions/tradeA"
        },
        "b": {
          "$ref": "#/definitions/tradeB"
        },
        "status": {
          "description": "Status of this trade",
          "type": "string"
        },
        "timestamp": {
          "description": "Time this trade occurred",
          "type": "string",
          "x-nullable": true
        },
        "transaction_id": {
          "description": "Sequential ID of this trade within Immutable X",
          "type": "integer"
        }
      }
    },
    "TradeSide": {
      "type": "object",
      "required": [
        "order_id",
        "sold",
        "token_type"
      ],
      "properties": {
        "order_id": {
          "description": "The ID of the order involved in the trade",
          "type": "integer"
        },
        "sold": {
          "description": "The amount of that order's asset this trade sold",
          "type": "string"
        },
        "token_address": {
          "description": "The contract address of the token that this trade sold",
          "type": "string"
        },
        "token_id": {
          "description": "The ID of the token that this trade sold",
          "type": "string"
        },
        "token_type": {
          "description": "The type of the token that this trade sold",
          "type": "string"
        }
      }
    },
    "Transfer": {
      "type": "object",
      "required": [
        "receiver",
        "status",
        "timestamp",
        "token",
        "transaction_id",
        "user"
      ],
      "properties": {
        "receiver": {
          "description": "Ethereum address of the user who received this transfer",
          "type": "string"
        },
        "status": {
          "description": "Status of the transaction",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp of the transfer",
          "type": "string",
          "x-nullable": true
        },
        "token": {
          "$ref": "#/definitions/transferToken"
        },
        "transaction_id": {
          "description": "Sequential transaction ID",
          "type": "integer"
        },
        "user": {
          "description": "Ethereum address of the user  who submitted this transfer",
          "type": "string"
        }
      }
    },
    "TransferRequest": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "expiration_timestamp",
        "nonce",
        "receiver_stark_key",
        "receiver_vault_id",
        "sender_vault_id",
        "stark_signature"
      ],
      "properties": {
        "amount": {
          "description": "Amount to transfer",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset to transfer",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this transfer",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce of the transfer",
          "type": "integer"
        },
        "receiver_stark_key": {
          "description": "Public stark key of the user receiving the transfer",
          "type": "string"
        },
        "receiver_vault_id": {
          "description": "ID of the vault into which the asset will be transferred to",
          "type": "integer"
        },
        "sender_vault_id": {
          "description": "ID of the vault into which the asset is from",
          "type": "integer"
        },
        "stark_signature": {
          "description": "Transfer payload signature",
          "type": "string"
        }
      }
    },
    "UpdateCollectionRequest": {
      "type": "object",
      "properties": {
        "collection_image_url": {
          "description": "URL of the tile image for this collection",
          "type": "string"
        },
        "description": {
          "description": "Description of the collection",
          "type": "string"
        },
        "icon_url": {
          "description": "URL of the icon for this collection",
          "type": "string"
        },
        "metadata_api_url": {
          "description": "URL of the metadata for this collection",
          "type": "string"
        },
        "name": {
          "description": "Name of the collection",
          "type": "string"
        }
      }
    },
    "WidgetParams": {
      "type": "object",
      "properties": {
        "amount": {
          "description": "Amount that will be prefilled in the widget",
          "type": "string"
        },
        "supported_currencies": {
          "description": "Currencies that will be available in the widget. If not defined all available currencies will be shown",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "ETH",
            "USDC"
          ]
        },
        "theme": {
          "description": "Widget theme dark by default",
          "type": "string",
          "example": "light"
        }
      }
    },
    "Withdrawal": {
      "type": "object",
      "required": [
        "rollup_status",
        "sender",
        "status",
        "timestamp",
        "token",
        "transaction_id",
        "withdrawn_to_wallet"
      ],
      "properties": {
        "rollup_status": {
          "description": "Status of the on-chain batch confirmation for this withdrawal",
          "type": "string"
        },
        "sender": {
          "description": "Ethereum address of the user who requested this withdrawal",
          "type": "string"
        },
        "status": {
          "description": "Status of this withdrawal",
          "type": "string"
        },
        "timestamp": {
          "description": "Time when this withdrawal was initiated",
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/withdrawalToken"
        },
        "transaction_id": {
          "description": "Sequential ID of this transaction",
          "type": "integer"
        },
        "withdrawn_to_wallet": {
          "description": "Withdrawal has been transferred to user's Layer 1 wallet",
          "type": "boolean"
        }
      }
    },
    "acceptPrimarySaleBadRequestBody": {
      "allOf": [
        {
          "$ref": "#/definitions/acceptPrimarySaleBadRequestBodyAllOf0"
        },
        {
          "$ref": "#/definitions/acceptPrimarySaleBadRequestBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleBadRequestBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleBadRequestBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "VALIDATION_ERROR"
          ],
          "example": "VALIDATION_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleForbiddenBody": {
      "allOf": [
        {
          "$ref": "#/definitions/acceptPrimarySaleForbiddenBodyAllOf0"
        },
        {
          "$ref": "#/definitions/acceptPrimarySaleForbiddenBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleForbiddenBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleForbiddenBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "AUTHENTICATION_ERROR"
          ],
          "example": "AUTHENTICATION_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleInternalServerErrorBody": {
      "allOf": [
        {
          "$ref": "#/definitions/acceptPrimarySaleInternalServerErrorBodyAllOf0"
        },
        {
          "$ref": "#/definitions/acceptPrimarySaleInternalServerErrorBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleInternalServerErrorBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleInternalServerErrorBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "INTERNAL_SERVER_ERROR"
          ],
          "example": "INTERNAL_SERVER_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleNotFoundBody": {
      "allOf": [
        {
          "$ref": "#/definitions/acceptPrimarySaleNotFoundBodyAllOf0"
        },
        {
          "$ref": "#/definitions/acceptPrimarySaleNotFoundBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleNotFoundBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleNotFoundBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "RESOURCE_NOT_FOUND"
          ],
          "example": "RESOURCE_NOT_FOUND"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleNotImplementedBody": {
      "allOf": [
        {
          "$ref": "#/definitions/acceptPrimarySaleNotImplementedBodyAllOf0"
        },
        {
          "$ref": "#/definitions/acceptPrimarySaleNotImplementedBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleNotImplementedBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleNotImplementedBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "NOT_IMPLEMENTED_ERROR"
          ],
          "example": "NOT_IMPLEMENTED_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleOKBody": {
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "$ref": "#/definitions/acceptPrimarySaleOKBodyResult"
        }
      },
      "x-go-gen-location": "operations",
      "example": {
        "result": {
          "id": 1
        }
      }
    },
    "acceptPrimarySaleOKBodyResult": {
      "type": "object",
      "required": [
        "id",
        "studio_ether_key",
        "buyer_ether_key",
        "payment_recipient_ether_key",
        "items_recipient_ether_key",
        "payment_token",
        "payment_amount",
        "studio_data",
        "status",
        "expires_at",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "buyer_ether_key": {
          "description": "Ethereum address of the buyer",
          "type": "string",
          "example": "0x123"
        },
        "created_at": {
          "description": "Time the primary sale was created",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "expires_at": {
          "description": "Time the primary sale expires",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/acceptPrimarySaleOKBodyResultFeesItems"
          }
        },
        "id": {
          "description": "Global Primary Sale identifier",
          "type": "integer",
          "format": "int64",
          "example": 123
        },
        "items_recipient_ether_key": {
          "description": "Ethereum address of the items receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_amount": {
          "description": "Fee inclusive amount of the transfer",
          "type": "string",
          "example": "102000"
        },
        "payment_recipient_ether_key": {
          "description": "Ethereum address of the payment receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_token": {},
        "status": {
          "description": "The primary sale status",
          "type": "string",
          "enum": [
            "PENDING",
            "ACTIVE",
            "INVALID",
            "IN_PROGRESS",
            "ACCEPTED",
            "FAILED",
            "REJECTED",
            "EXPIRED"
          ]
        },
        "studio_data": {
          "description": "Arbitrary data defined by the selling party (e.g. game studio) to identify the primary sale. We suggest signing this payload to verify authenticity when processing.",
          "type": "string"
        },
        "studio_ether_key": {
          "description": "Ethereum address of the studio operating the primary sale, will be used to verify in completion",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "updated_at": {
          "description": "Time the primary sale was updated",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleOKBodyResultFeesItems": {
      "description": "Fee required to be paid for a primary sale",
      "type": "object",
      "required": [
        "type",
        "percentage",
        "amount",
        "address"
      ],
      "properties": {
        "address": {
          "description": "Ethereum address of the fee recipient",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "amount": {
          "description": "Fee amount",
          "type": "string",
          "example": "1000000000000000000"
        },
        "percentage": {
          "description": "Fee percentage in basis points (e.g. 200 for 2%)",
          "type": "integer",
          "example": 200
        },
        "type": {
          "description": "Fee type",
          "type": "string",
          "enum": [
            "ECOSYSTEM",
            "PROTOCOL"
          ],
          "example": "PRIMARY_SALE"
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleUnauthorizedBody": {
      "allOf": [
        {
          "$ref": "#/definitions/acceptPrimarySaleUnauthorizedBodyAllOf0"
        },
        {
          "$ref": "#/definitions/acceptPrimarySaleUnauthorizedBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleUnauthorizedBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleUnauthorizedBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "UNAUTHORISED_REQUEST"
          ],
          "example": "UNAUTHORISED_REQUEST"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleUnprocessableEntityBody": {
      "allOf": [
        {
          "$ref": "#/definitions/acceptPrimarySaleUnprocessableEntityBodyAllOf0"
        },
        {
          "$ref": "#/definitions/acceptPrimarySaleUnprocessableEntityBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleUnprocessableEntityBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "acceptPrimarySaleUnprocessableEntityBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "UNPROCESSABLE_ENTITY_ERROR"
          ],
          "example": "UNPROCESSABLE_ENTITY_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "aggregate.Limit": {
      "type": "object",
      "properties": {
        "max_amount": {
          "description": "Max transaction amount",
          "type": "number"
        },
        "min_amount": {
          "description": "Min transaction amount",
          "type": "number"
        }
      }
    },
    "api.OrderV3": {
      "type": "object",
      "required": [
        "amount_sold",
        "buy",
        "expiration_timestamp",
        "order_id",
        "sell",
        "status",
        "timestamp",
        "updated_timestamp",
        "user"
      ],
      "properties": {
        "amount_sold": {
          "description": "Amount of the asset already sold by this order",
          "type": "string",
          "x-nullable": true
        },
        "buy": {
          "$ref": "#/definitions/apiOrderV3Buy"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp of this order",
          "type": "string",
          "x-nullable": true
        },
        "fees": {
          "description": "Fee information for the order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderFeeInfo"
          }
        },
        "maker_fees": {
          "$ref": "#/definitions/apiOrderV3MakerFees"
        },
        "maker_taker_type": {
          "description": "MakerTakerType",
          "type": "string"
        },
        "order_id": {
          "description": "ID of the order",
          "type": "integer"
        },
        "sell": {
          "$ref": "#/definitions/apiOrderV3Sell"
        },
        "status": {
          "description": "Status of the order",
          "type": "string"
        },
        "taker_fees": {
          "$ref": "#/definitions/apiOrderV3TakerFees"
        },
        "timestamp": {
          "description": "Timestamp this order was created",
          "type": "string",
          "x-nullable": true
        },
        "updated_timestamp": {
          "description": "Updated timestamp of this order",
          "type": "string",
          "x-nullable": true
        },
        "user": {
          "description": "Ethereum address of the user who submitted the order",
          "type": "string"
        }
      }
    },
    "api.RegisterPassportUserRequest": {
      "type": "object",
      "required": [
        "eth_signature",
        "ether_key",
        "stark_key",
        "stark_signature"
      ],
      "properties": {
        "eth_signature": {
          "description": "Eth signature",
          "type": "string"
        },
        "ether_key": {
          "description": "The ether key of the user",
          "type": "string"
        },
        "stark_key": {
          "description": "Public stark key of the user",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        }
      }
    },
    "api.SDKVersionCheckResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "ok": {
          "type": "boolean"
        },
        "runtimeId": {
          "type": "string"
        }
      }
    },
    "api.SummarizeCollectionsResponse": {
      "type": "object",
      "required": [
        "cursor",
        "remaining",
        "result"
      ],
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Collections matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SummarizedCollection"
          }
        }
      }
    },
    "api.SummarizedCollection": {
      "type": "object",
      "required": [
        "collection",
        "owned_token_count"
      ],
      "properties": {
        "collection": {
          "$ref": "#/definitions/Collection"
        },
        "owned_token_count": {
          "type": "integer"
        }
      }
    },
    "apiOrderV3Buy": {
      "description": "Details of the asset being bought",
      "allOf": [
        {
          "$ref": "#/definitions/Token"
        }
      ],
      "x-go-gen-location": "models"
    },
    "apiOrderV3MakerFees": {
      "description": "MakerFees is the information about the fees that needs to be paid by the maker (liquidity)",
      "allOf": [
        {
          "$ref": "#/definitions/store.MakerTakerFee"
        }
      ],
      "x-go-gen-location": "models"
    },
    "apiOrderV3Sell": {
      "description": "Details of the asset being sold",
      "allOf": [
        {
          "$ref": "#/definitions/Token"
        }
      ],
      "x-go-gen-location": "models"
    },
    "apiOrderV3TakerFees": {
      "description": "TakerFees is the information about the fees that needs to be paid by the taker (liquidity)",
      "allOf": [
        {
          "$ref": "#/definitions/store.MakerTakerFee"
        }
      ],
      "x-go-gen-location": "models"
    },
    "assetCollection": {
      "description": "Information about the collection to which this asset belongs",
      "allOf": [
        {
          "$ref": "#/definitions/CollectionDetails"
        }
      ],
      "x-go-gen-location": "models"
    },
    "assetOrders": {
      "description": "[DEPRECATED] Open orders for this asset will always return empty. Use GET /orders",
      "allOf": [
        {
          "$ref": "#/definitions/OrderDetails"
        }
      ],
      "x-go-gen-location": "models"
    },
    "assetPropertiesCollection": {
      "description": "Details of this asset's collection",
      "allOf": [
        {
          "$ref": "#/definitions/CollectionDetails"
        }
      ],
      "x-go-gen-location": "models"
    },
    "assetWithOrdersCollection": {
      "description": "Information about the collection to which this asset belongs",
      "allOf": [
        {
          "$ref": "#/definitions/CollectionDetails"
        }
      ],
      "x-go-gen-location": "models"
    },
    "assetWithOrdersOrders": {
      "description": "Open orders for this asset",
      "allOf": [
        {
          "$ref": "#/definitions/OrderDetails"
        }
      ],
      "x-go-gen-location": "models"
    },
    "collection.Collection": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "collectionImageURL": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "iconURL": {
          "type": "string"
        },
        "lastCollectionEventID": {
          "type": "string"
        },
        "metadataAPIURL": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "projectID": {
          "type": "integer"
        },
        "projectOwnerAddress": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      }
    },
    "collectionFilterRange": {
      "description": "Range of values for this property",
      "allOf": [
        {
          "$ref": "#/definitions/Range"
        }
      ],
      "x-go-gen-location": "models"
    },
    "contract.CreateAPIRequest": {
      "type": "object",
      "properties": {
        "contract_address": {
          "type": "string"
        },
        "data_url": {
          "type": "string"
        },
        "mint_url": {
          "type": "string"
        }
      }
    },
    "contract.CreateResponse": {
      "type": "object",
      "properties": {
        "webhook_hash": {
          "type": "string"
        }
      }
    },
    "createPrimarySaleBadRequestBody": {
      "allOf": [
        {
          "$ref": "#/definitions/createPrimarySaleBadRequestBodyAllOf0"
        },
        {
          "$ref": "#/definitions/createPrimarySaleBadRequestBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleBadRequestBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleBadRequestBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "VALIDATION_ERROR"
          ],
          "example": "VALIDATION_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleCreatedBody": {
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "$ref": "#/definitions/createPrimarySaleCreatedBodyResult"
        }
      },
      "x-go-gen-location": "operations",
      "example": {
        "result": {
          "id": 1
        }
      }
    },
    "createPrimarySaleCreatedBodyResult": {
      "type": "object",
      "required": [
        "id",
        "studio_ether_key",
        "buyer_ether_key",
        "payment_recipient_ether_key",
        "items_recipient_ether_key",
        "payment_token",
        "payment_amount",
        "studio_data",
        "status",
        "expires_at",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "buyer_ether_key": {
          "description": "Ethereum address of the buyer",
          "type": "string",
          "example": "0x123"
        },
        "created_at": {
          "description": "Time the primary sale was created",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "expires_at": {
          "description": "Time the primary sale expires",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/createPrimarySaleCreatedBodyResultFeesItems"
          }
        },
        "id": {
          "description": "Global Primary Sale identifier",
          "type": "integer",
          "format": "int64",
          "example": 123
        },
        "items_recipient_ether_key": {
          "description": "Ethereum address of the items receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_amount": {
          "description": "Fee inclusive amount of the transfer",
          "type": "string",
          "example": "102000"
        },
        "payment_recipient_ether_key": {
          "description": "Ethereum address of the payment receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_token": {},
        "status": {
          "description": "The primary sale status",
          "type": "string",
          "enum": [
            "PENDING",
            "ACTIVE",
            "INVALID",
            "IN_PROGRESS",
            "ACCEPTED",
            "FAILED",
            "REJECTED",
            "EXPIRED"
          ]
        },
        "studio_data": {
          "description": "Arbitrary data defined by the selling party (e.g. game studio) to identify the primary sale. We suggest signing this payload to verify authenticity when processing.",
          "type": "string"
        },
        "studio_ether_key": {
          "description": "Ethereum address of the studio operating the primary sale, will be used to verify in completion",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "updated_at": {
          "description": "Time the primary sale was updated",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleCreatedBodyResultFeesItems": {
      "description": "Fee required to be paid for a primary sale",
      "type": "object",
      "required": [
        "type",
        "percentage",
        "amount",
        "address"
      ],
      "properties": {
        "address": {
          "description": "Ethereum address of the fee recipient",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "amount": {
          "description": "Fee amount",
          "type": "string",
          "example": "1000000000000000000"
        },
        "percentage": {
          "description": "Fee percentage in basis points (e.g. 200 for 2%)",
          "type": "integer",
          "example": 200
        },
        "type": {
          "description": "Fee type",
          "type": "string",
          "enum": [
            "ECOSYSTEM",
            "PROTOCOL"
          ],
          "example": "PRIMARY_SALE"
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleForbiddenBody": {
      "allOf": [
        {
          "$ref": "#/definitions/createPrimarySaleForbiddenBodyAllOf0"
        },
        {
          "$ref": "#/definitions/createPrimarySaleForbiddenBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleForbiddenBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleForbiddenBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "AUTHENTICATION_ERROR"
          ],
          "example": "AUTHENTICATION_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleInternalServerErrorBody": {
      "allOf": [
        {
          "$ref": "#/definitions/createPrimarySaleInternalServerErrorBodyAllOf0"
        },
        {
          "$ref": "#/definitions/createPrimarySaleInternalServerErrorBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleInternalServerErrorBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleInternalServerErrorBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "INTERNAL_SERVER_ERROR"
          ],
          "example": "INTERNAL_SERVER_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleNotFoundBody": {
      "allOf": [
        {
          "$ref": "#/definitions/createPrimarySaleNotFoundBodyAllOf0"
        },
        {
          "$ref": "#/definitions/createPrimarySaleNotFoundBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleNotFoundBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleNotFoundBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "RESOURCE_NOT_FOUND"
          ],
          "example": "RESOURCE_NOT_FOUND"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleNotImplementedBody": {
      "allOf": [
        {
          "$ref": "#/definitions/createPrimarySaleNotImplementedBodyAllOf0"
        },
        {
          "$ref": "#/definitions/createPrimarySaleNotImplementedBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleNotImplementedBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleNotImplementedBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "NOT_IMPLEMENTED_ERROR"
          ],
          "example": "NOT_IMPLEMENTED_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleParamsBody": {
      "type": "object",
      "required": [
        "studio_ether_key",
        "buyer_ether_key",
        "buyer_stark_key",
        "buyer_vault_id",
        "payment_recipient_ether_key",
        "payment_recipient_stark_key",
        "payment_recipient_vault_id",
        "items_recipient_ether_key",
        "payment_asset_id",
        "payment_amount",
        "studio_data",
        "expiration_timestamp",
        "nonce",
        "stark_signature"
      ],
      "properties": {
        "buyer_ether_key": {
          "description": "Ethereum address of the payer of the primary sale",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "buyer_stark_key": {
          "description": "Stark key of the buyer",
          "type": "string",
          "example": "0x123"
        },
        "buyer_vault_id": {
          "description": "Vault ID of the buyer",
          "type": "integer",
          "example": 12
        },
        "expiration_timestamp": {
          "description": "Time the primary sale expires",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/createPrimarySaleParamsBodyFeesItems"
          }
        },
        "items_recipient_ether_key": {
          "description": "Ethereum address of the items receiver",
          "type": "string",
          "example": "0x123"
        },
        "nonce": {
          "description": "Nonce of transaction",
          "type": "integer",
          "example": 123
        },
        "payment_amount": {
          "description": "Fee exclusive amount of the transfer",
          "type": "string",
          "example": "102000"
        },
        "payment_asset_id": {
          "description": "Asset ID of payment token",
          "type": "string",
          "example": "0x1"
        },
        "payment_recipient_ether_key": {
          "description": "Ethereum address of the recipient of the sale proceedings",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "payment_recipient_stark_key": {
          "description": "Stark key of the payment receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_recipient_vault_id": {
          "description": "Vault ID of the payment receiver",
          "type": "integer",
          "example": 12
        },
        "stark_signature": {
          "description": "StarkEx signature of the payload",
          "type": "string",
          "example": "0x123"
        },
        "studio_data": {
          "description": "Arbitrary data defined by the selling party (e.g. game studio) to identify the primary sale. We suggest signing this payload to verify authenticity when processing.",
          "type": "string"
        },
        "studio_ether_key": {
          "description": "Ethereum address of the studio operating the primary sale, will be used to verify in completion",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleParamsBodyFeesItems": {
      "description": "Fee required to be paid for a primary sale",
      "type": "object",
      "required": [
        "type",
        "percentage",
        "amount",
        "address"
      ],
      "properties": {
        "address": {
          "description": "Ethereum address of the fee recipient",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "amount": {
          "description": "Fee amount",
          "type": "string",
          "example": "1000000000000000000"
        },
        "percentage": {
          "description": "Fee percentage in basis points (e.g. 200 for 2%)",
          "type": "integer",
          "example": 200
        },
        "type": {
          "description": "Fee type",
          "type": "string",
          "enum": [
            "ECOSYSTEM",
            "PROTOCOL"
          ],
          "example": "PRIMARY_SALE"
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleUnauthorizedBody": {
      "allOf": [
        {
          "$ref": "#/definitions/createPrimarySaleUnauthorizedBodyAllOf0"
        },
        {
          "$ref": "#/definitions/createPrimarySaleUnauthorizedBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleUnauthorizedBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "createPrimarySaleUnauthorizedBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "UNAUTHORISED_REQUEST"
          ],
          "example": "UNAUTHORISED_REQUEST"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "createTradeRequestV1FeeInfo": {
      "description": "Fee details",
      "allOf": [
        {
          "$ref": "#/definitions/FeeInfo"
        }
      ],
      "x-go-gen-location": "models"
    },
    "depositToken": {
      "description": "Details of the asset being deposited",
      "allOf": [
        {
          "$ref": "#/definitions/Token"
        }
      ],
      "x-go-gen-location": "models"
    },
    "encodeAssetRequestToken": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/encodeAssetRequestTokenData"
        },
        "type": {
          "description": "The type of the token to be encoded",
          "type": "string",
          "enum": [
            "ETH",
            "ERC20",
            "ERC721"
          ]
        }
      },
      "x-go-gen-location": "models"
    },
    "encodeAssetRequestTokenData": {
      "description": "Extra token information to be encoded",
      "allOf": [
        {
          "$ref": "#/definitions/EncodeAssetTokenData"
        }
      ],
      "x-go-gen-location": "models"
    },
    "exchange.CreateExchangeAndURLResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Created transaction ID",
          "type": "integer"
        },
        "provider": {
          "description": "Provider name (e.g. moonpay)",
          "type": "string",
          "example": "moonpay"
        },
        "type": {
          "description": "Transaction type",
          "type": "string",
          "example": "onramp"
        },
        "url": {
          "description": "Widget URL",
          "type": "string"
        },
        "wallet_address": {
          "description": "Ethereum address of the user who created transaction",
          "type": "string"
        }
      }
    },
    "experimentalCreatePrimarySaleBadRequestBody": {
      "allOf": [
        {
          "$ref": "#/definitions/experimentalCreatePrimarySaleBadRequestBodyAllOf0"
        },
        {
          "$ref": "#/definitions/experimentalCreatePrimarySaleBadRequestBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleBadRequestBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleBadRequestBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "VALIDATION_ERROR"
          ],
          "example": "VALIDATION_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleCreatedBody": {
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "$ref": "#/definitions/experimentalCreatePrimarySaleCreatedBodyResult"
        }
      },
      "x-go-gen-location": "operations",
      "example": {
        "result": {
          "id": 1
        }
      }
    },
    "experimentalCreatePrimarySaleCreatedBodyResult": {
      "type": "object",
      "required": [
        "id",
        "studio_ether_key",
        "buyer_ether_key",
        "payment_recipient_ether_key",
        "items_recipient_ether_key",
        "payment_token",
        "payment_amount",
        "studio_data",
        "status",
        "expires_at",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "buyer_ether_key": {
          "description": "Ethereum address of the buyer",
          "type": "string",
          "example": "0x123"
        },
        "created_at": {
          "description": "Time the primary sale was created",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "expires_at": {
          "description": "Time the primary sale expires",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/experimentalCreatePrimarySaleCreatedBodyResultFeesItems"
          }
        },
        "id": {
          "description": "Global Primary Sale identifier",
          "type": "integer",
          "format": "int64",
          "example": 123
        },
        "items_recipient_ether_key": {
          "description": "Ethereum address of the items receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_amount": {
          "description": "Fee inclusive amount of the transfer",
          "type": "string",
          "example": "102000"
        },
        "payment_recipient_ether_key": {
          "description": "Ethereum address of the payment receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_token": {},
        "status": {
          "description": "The primary sale status",
          "type": "string",
          "enum": [
            "PENDING",
            "ACTIVE",
            "INVALID",
            "IN_PROGRESS",
            "ACCEPTED",
            "REJECTED",
            "EXPIRED"
          ]
        },
        "studio_data": {
          "description": "Arbitrary data defined by the selling party (e.g. game studio) to identify the primary sale. We suggest signing this payload to verify authenticity when processing.",
          "type": "string"
        },
        "studio_ether_key": {
          "description": "Ethereum address of the studio operating the primary sale, will be used to verify in completion",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "updated_at": {
          "description": "Time the primary sale was updated",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleCreatedBodyResultFeesItems": {
      "description": "Fee required to be paid for a primary sale",
      "type": "object",
      "required": [
        "type",
        "percentage",
        "amount",
        "address"
      ],
      "properties": {
        "address": {
          "description": "Ethereum address of the fee recipient",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "amount": {
          "description": "Fee amount",
          "type": "string",
          "example": "1000000000000000000"
        },
        "percentage": {
          "description": "Fee percentage in basis points (e.g. 200 for 2%)",
          "type": "integer",
          "example": 200
        },
        "type": {
          "description": "Fee type",
          "type": "string",
          "enum": [
            "ECOSYSTEM",
            "PROTOCOL"
          ],
          "example": "PRIMARY_SALE"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleForbiddenBody": {
      "allOf": [
        {
          "$ref": "#/definitions/experimentalCreatePrimarySaleForbiddenBodyAllOf0"
        },
        {
          "$ref": "#/definitions/experimentalCreatePrimarySaleForbiddenBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleForbiddenBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleForbiddenBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "AUTHENTICATION_ERROR"
          ],
          "example": "AUTHENTICATION_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleInternalServerErrorBody": {
      "allOf": [
        {
          "$ref": "#/definitions/experimentalCreatePrimarySaleInternalServerErrorBodyAllOf0"
        },
        {
          "$ref": "#/definitions/experimentalCreatePrimarySaleInternalServerErrorBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleInternalServerErrorBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleInternalServerErrorBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "INTERNAL_SERVER_ERROR"
          ],
          "example": "INTERNAL_SERVER_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleNotFoundBody": {
      "allOf": [
        {
          "$ref": "#/definitions/experimentalCreatePrimarySaleNotFoundBodyAllOf0"
        },
        {
          "$ref": "#/definitions/experimentalCreatePrimarySaleNotFoundBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleNotFoundBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleNotFoundBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "RESOURCE_NOT_FOUND"
          ],
          "example": "RESOURCE_NOT_FOUND"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleNotImplementedBody": {
      "allOf": [
        {
          "$ref": "#/definitions/experimentalCreatePrimarySaleNotImplementedBodyAllOf0"
        },
        {
          "$ref": "#/definitions/experimentalCreatePrimarySaleNotImplementedBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleNotImplementedBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleNotImplementedBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "NOT_IMPLEMENTED_ERROR"
          ],
          "example": "NOT_IMPLEMENTED_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleParamsBody": {
      "type": "object",
      "required": [
        "studio_ether_key",
        "buyer_ether_key",
        "buyer_stark_key",
        "buyer_vault_id",
        "payment_recipient_ether_key",
        "payment_recipient_stark_key",
        "payment_recipient_vault_id",
        "items_recipient_ether_key",
        "payment_asset_id",
        "payment_amount",
        "studio_data",
        "expiration_timestamp",
        "nonce",
        "stark_signature"
      ],
      "properties": {
        "buyer_ether_key": {
          "description": "Ethereum address of the payer of the primary sale",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "buyer_stark_key": {
          "description": "Stark key of the buyer",
          "type": "string",
          "example": "0x123"
        },
        "buyer_vault_id": {
          "description": "Vault ID of the buyer",
          "type": "integer",
          "example": 12
        },
        "expiration_timestamp": {
          "description": "Time the primary sale expires",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/experimentalCreatePrimarySaleParamsBodyFeesItems"
          }
        },
        "items_recipient_ether_key": {
          "description": "Ethereum address of the items receiver",
          "type": "string",
          "example": "0x123"
        },
        "nonce": {
          "description": "Nonce of transaction",
          "type": "integer",
          "example": 123
        },
        "payment_amount": {
          "description": "Fee exclusive amount of the transfer",
          "type": "string",
          "example": "102000"
        },
        "payment_asset_id": {
          "description": "Asset ID of payment token",
          "type": "string",
          "example": "0x1"
        },
        "payment_recipient_ether_key": {
          "description": "Ethereum address of the recipient of the sale proceedings",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "payment_recipient_stark_key": {
          "description": "Stark key of the payment receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_recipient_vault_id": {
          "description": "Vault ID of the payment receiver",
          "type": "integer",
          "example": 12
        },
        "stark_signature": {
          "description": "StarkEx signature of the payload",
          "type": "string",
          "example": "0x123"
        },
        "studio_data": {
          "description": "Arbitrary data defined by the selling party (e.g. game studio) to identify the primary sale. We suggest signing this payload to verify authenticity when processing.",
          "type": "string"
        },
        "studio_ether_key": {
          "description": "Ethereum address of the studio operating the primary sale, will be used to verify in completion",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleParamsBodyFeesItems": {
      "description": "Fee required to be paid for a primary sale",
      "type": "object",
      "required": [
        "type",
        "percentage",
        "amount",
        "address"
      ],
      "properties": {
        "address": {
          "description": "Ethereum address of the fee recipient",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "amount": {
          "description": "Fee amount",
          "type": "string",
          "example": "1000000000000000000"
        },
        "percentage": {
          "description": "Fee percentage in basis points (e.g. 200 for 2%)",
          "type": "integer",
          "example": 200
        },
        "type": {
          "description": "Fee type",
          "type": "string",
          "enum": [
            "ECOSYSTEM",
            "PROTOCOL"
          ],
          "example": "PRIMARY_SALE"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleUnauthorizedBody": {
      "allOf": [
        {
          "$ref": "#/definitions/experimentalCreatePrimarySaleUnauthorizedBodyAllOf0"
        },
        {
          "$ref": "#/definitions/experimentalCreatePrimarySaleUnauthorizedBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleUnauthorizedBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalCreatePrimarySaleUnauthorizedBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "UNAUTHORISED_REQUEST"
          ],
          "example": "UNAUTHORISED_REQUEST"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalGetPrimarySaleBadRequestBody": {
      "allOf": [
        {
          "$ref": "#/definitions/experimentalGetPrimarySaleBadRequestBodyAllOf0"
        },
        {
          "$ref": "#/definitions/experimentalGetPrimarySaleBadRequestBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "experimentalGetPrimarySaleBadRequestBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalGetPrimarySaleBadRequestBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "VALIDATION_ERROR"
          ],
          "example": "VALIDATION_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalGetPrimarySaleInternalServerErrorBody": {
      "allOf": [
        {
          "$ref": "#/definitions/experimentalGetPrimarySaleInternalServerErrorBodyAllOf0"
        },
        {
          "$ref": "#/definitions/experimentalGetPrimarySaleInternalServerErrorBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "experimentalGetPrimarySaleInternalServerErrorBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalGetPrimarySaleInternalServerErrorBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "INTERNAL_SERVER_ERROR"
          ],
          "example": "INTERNAL_SERVER_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalGetPrimarySaleNotFoundBody": {
      "allOf": [
        {
          "$ref": "#/definitions/experimentalGetPrimarySaleNotFoundBodyAllOf0"
        },
        {
          "$ref": "#/definitions/experimentalGetPrimarySaleNotFoundBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "experimentalGetPrimarySaleNotFoundBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalGetPrimarySaleNotFoundBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "RESOURCE_NOT_FOUND"
          ],
          "example": "RESOURCE_NOT_FOUND"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalGetPrimarySaleNotImplementedBody": {
      "allOf": [
        {
          "$ref": "#/definitions/experimentalGetPrimarySaleNotImplementedBodyAllOf0"
        },
        {
          "$ref": "#/definitions/experimentalGetPrimarySaleNotImplementedBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "experimentalGetPrimarySaleNotImplementedBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalGetPrimarySaleNotImplementedBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "NOT_IMPLEMENTED_ERROR"
          ],
          "example": "NOT_IMPLEMENTED_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalGetPrimarySaleOKBody": {
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "$ref": "#/definitions/experimentalGetPrimarySaleOKBodyResult"
        }
      },
      "x-go-gen-location": "operations",
      "example": {
        "result": {
          "id": 1
        }
      }
    },
    "experimentalGetPrimarySaleOKBodyResult": {
      "type": "object",
      "required": [
        "id",
        "studio_ether_key",
        "buyer_ether_key",
        "payment_recipient_ether_key",
        "items_recipient_ether_key",
        "payment_token",
        "payment_amount",
        "studio_data",
        "status",
        "expires_at",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "buyer_ether_key": {
          "description": "Ethereum address of the buyer",
          "type": "string",
          "example": "0x123"
        },
        "created_at": {
          "description": "Time the primary sale was created",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "expires_at": {
          "description": "Time the primary sale expires",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/experimentalGetPrimarySaleOKBodyResultFeesItems"
          }
        },
        "id": {
          "description": "Global Primary Sale identifier",
          "type": "integer",
          "format": "int64",
          "example": 123
        },
        "items_recipient_ether_key": {
          "description": "Ethereum address of the items receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_amount": {
          "description": "Fee inclusive amount of the transfer",
          "type": "string",
          "example": "102000"
        },
        "payment_recipient_ether_key": {
          "description": "Ethereum address of the payment receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_token": {},
        "status": {
          "description": "The primary sale status",
          "type": "string",
          "enum": [
            "PENDING",
            "ACTIVE",
            "INVALID",
            "IN_PROGRESS",
            "ACCEPTED",
            "REJECTED",
            "EXPIRED"
          ]
        },
        "studio_data": {
          "description": "Arbitrary data defined by the selling party (e.g. game studio) to identify the primary sale. We suggest signing this payload to verify authenticity when processing.",
          "type": "string"
        },
        "studio_ether_key": {
          "description": "Ethereum address of the studio operating the primary sale, will be used to verify in completion",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "updated_at": {
          "description": "Time the primary sale was updated",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "experimentalGetPrimarySaleOKBodyResultFeesItems": {
      "description": "Fee required to be paid for a primary sale",
      "type": "object",
      "required": [
        "type",
        "percentage",
        "amount",
        "address"
      ],
      "properties": {
        "address": {
          "description": "Ethereum address of the fee recipient",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "amount": {
          "description": "Fee amount",
          "type": "string",
          "example": "1000000000000000000"
        },
        "percentage": {
          "description": "Fee percentage in basis points (e.g. 200 for 2%)",
          "type": "integer",
          "example": 200
        },
        "type": {
          "description": "Fee type",
          "type": "string",
          "enum": [
            "ECOSYSTEM",
            "PROTOCOL"
          ],
          "example": "PRIMARY_SALE"
        }
      },
      "x-go-gen-location": "operations"
    },
    "feeTokenData": {
      "description": "Fee token data details",
      "allOf": [
        {
          "$ref": "#/definitions/FeeData"
        }
      ],
      "x-go-gen-location": "models"
    },
    "getPrimarySaleBadRequestBody": {
      "allOf": [
        {
          "$ref": "#/definitions/getPrimarySaleBadRequestBodyAllOf0"
        },
        {
          "$ref": "#/definitions/getPrimarySaleBadRequestBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "getPrimarySaleBadRequestBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getPrimarySaleBadRequestBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "VALIDATION_ERROR"
          ],
          "example": "VALIDATION_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "getPrimarySaleInternalServerErrorBody": {
      "allOf": [
        {
          "$ref": "#/definitions/getPrimarySaleInternalServerErrorBodyAllOf0"
        },
        {
          "$ref": "#/definitions/getPrimarySaleInternalServerErrorBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "getPrimarySaleInternalServerErrorBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getPrimarySaleInternalServerErrorBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "INTERNAL_SERVER_ERROR"
          ],
          "example": "INTERNAL_SERVER_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "getPrimarySaleNotFoundBody": {
      "allOf": [
        {
          "$ref": "#/definitions/getPrimarySaleNotFoundBodyAllOf0"
        },
        {
          "$ref": "#/definitions/getPrimarySaleNotFoundBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "getPrimarySaleNotFoundBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getPrimarySaleNotFoundBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "RESOURCE_NOT_FOUND"
          ],
          "example": "RESOURCE_NOT_FOUND"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "getPrimarySaleNotImplementedBody": {
      "allOf": [
        {
          "$ref": "#/definitions/getPrimarySaleNotImplementedBodyAllOf0"
        },
        {
          "$ref": "#/definitions/getPrimarySaleNotImplementedBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "getPrimarySaleNotImplementedBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getPrimarySaleNotImplementedBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "NOT_IMPLEMENTED_ERROR"
          ],
          "example": "NOT_IMPLEMENTED_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "getPrimarySaleOKBody": {
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "$ref": "#/definitions/getPrimarySaleOKBodyResult"
        }
      },
      "x-go-gen-location": "operations",
      "example": {
        "result": {
          "id": 1
        }
      }
    },
    "getPrimarySaleOKBodyResult": {
      "type": "object",
      "required": [
        "id",
        "studio_ether_key",
        "buyer_ether_key",
        "payment_recipient_ether_key",
        "items_recipient_ether_key",
        "payment_token",
        "payment_amount",
        "studio_data",
        "status",
        "expires_at",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "buyer_ether_key": {
          "description": "Ethereum address of the buyer",
          "type": "string",
          "example": "0x123"
        },
        "created_at": {
          "description": "Time the primary sale was created",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "expires_at": {
          "description": "Time the primary sale expires",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/getPrimarySaleOKBodyResultFeesItems"
          }
        },
        "id": {
          "description": "Global Primary Sale identifier",
          "type": "integer",
          "format": "int64",
          "example": 123
        },
        "items_recipient_ether_key": {
          "description": "Ethereum address of the items receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_amount": {
          "description": "Fee inclusive amount of the transfer",
          "type": "string",
          "example": "102000"
        },
        "payment_recipient_ether_key": {
          "description": "Ethereum address of the payment receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_token": {},
        "status": {
          "description": "The primary sale status",
          "type": "string",
          "enum": [
            "PENDING",
            "ACTIVE",
            "INVALID",
            "IN_PROGRESS",
            "ACCEPTED",
            "FAILED",
            "REJECTED",
            "EXPIRED"
          ]
        },
        "studio_data": {
          "description": "Arbitrary data defined by the selling party (e.g. game studio) to identify the primary sale. We suggest signing this payload to verify authenticity when processing.",
          "type": "string"
        },
        "studio_ether_key": {
          "description": "Ethereum address of the studio operating the primary sale, will be used to verify in completion",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "updated_at": {
          "description": "Time the primary sale was updated",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getPrimarySaleOKBodyResultFeesItems": {
      "description": "Fee required to be paid for a primary sale",
      "type": "object",
      "required": [
        "type",
        "percentage",
        "amount",
        "address"
      ],
      "properties": {
        "address": {
          "description": "Ethereum address of the fee recipient",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "amount": {
          "description": "Fee amount",
          "type": "string",
          "example": "1000000000000000000"
        },
        "percentage": {
          "description": "Fee percentage in basis points (e.g. 200 for 2%)",
          "type": "integer",
          "example": 200
        },
        "type": {
          "description": "Fee type",
          "type": "string",
          "enum": [
            "ECOSYSTEM",
            "PROTOCOL"
          ],
          "example": "PRIMARY_SALE"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getSignableDepositRequestToken": {
      "description": "Details of the token the user is depositing",
      "allOf": [
        {
          "$ref": "#/definitions/SignableToken"
        }
      ],
      "x-go-gen-location": "models"
    },
    "getSignableOrderRequestTokenBuy": {
      "description": "Token to buy",
      "allOf": [
        {
          "$ref": "#/definitions/SignableToken"
        }
      ],
      "x-go-gen-location": "models"
    },
    "getSignableOrderRequestTokenSell": {
      "description": "Token to sell",
      "allOf": [
        {
          "$ref": "#/definitions/SignableToken"
        }
      ],
      "x-go-gen-location": "models"
    },
    "getSignableOrderRequestV3TokenBuy": {
      "description": "Token to buy",
      "allOf": [
        {
          "$ref": "#/definitions/SignableToken"
        }
      ],
      "x-go-gen-location": "models"
    },
    "getSignableOrderRequestV3TokenSell": {
      "description": "Token to sell",
      "allOf": [
        {
          "$ref": "#/definitions/SignableToken"
        }
      ],
      "x-go-gen-location": "models"
    },
    "getSignableOrderResponseFeeInfo": {
      "description": "Fee information",
      "allOf": [
        {
          "$ref": "#/definitions/FeeInfo"
        }
      ],
      "x-go-gen-location": "models"
    },
    "getSignableTradeResponseFeeInfo": {
      "description": "Fee information",
      "allOf": [
        {
          "$ref": "#/definitions/FeeInfo"
        }
      ],
      "x-go-gen-location": "models"
    },
    "getSignableTradeResponseResult": {
      "description": "Signable trade result",
      "allOf": [
        {
          "$ref": "#/definitions/GetSignableTradeResult"
        }
      ],
      "x-go-gen-location": "models"
    },
    "getSignableTradeResultFeeInfo": {
      "description": "Fee details",
      "allOf": [
        {
          "$ref": "#/definitions/FeeInfo"
        }
      ],
      "x-go-gen-location": "models"
    },
    "getSignableTransferRequestToken": {
      "description": "Token to transfer",
      "allOf": [
        {
          "$ref": "#/definitions/SignableToken"
        }
      ],
      "x-go-gen-location": "models"
    },
    "getSignableWithdrawalRequestToken": {
      "description": "Token to withdraw",
      "allOf": [
        {
          "$ref": "#/definitions/SignableToken"
        }
      ],
      "x-go-gen-location": "models"
    },
    "lambdas.APIError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code",
          "type": "string"
        },
        "details": {
          "description": "The error details",
          "type": "string"
        },
        "message": {
          "description": "The error message",
          "type": "string"
        },
        "status_code": {
          "description": "The error status code",
          "type": "integer"
        }
      }
    },
    "mintToken": {
      "description": "Details of the asset which has been minted",
      "allOf": [
        {
          "$ref": "#/definitions/Token"
        }
      ],
      "x-go-gen-location": "models"
    },
    "nftprimarytransaction.CreateAPIRequest": {
      "type": "object",
      "properties": {
        "contract_address": {
          "description": "Contract address of the asset to be created",
          "type": "string"
        },
        "offer_id": {
          "description": "Temporary asset id",
          "type": "string"
        },
        "provider": {
          "description": "Provider name",
          "type": "string",
          "example": "moonpay"
        },
        "user_wallet_address": {
          "description": "Ethereum address of the user who wants to create transaction",
          "type": "string"
        },
        "widget": {
          "description": "Optional widget params",
          "$ref": "#/definitions/nftprimarytransaction.WidgetParams"
        }
      }
    },
    "nftprimarytransaction.CreateResponse": {
      "type": "object",
      "properties": {
        "contract_address": {
          "description": "Contract address of the asset to be created",
          "type": "string"
        },
        "offer_id": {
          "description": "Temporary asset id. Might be a token id if the token id is known or a generic description if it's not",
          "type": "string"
        },
        "provider": {
          "description": "Provider name",
          "type": "string"
        },
        "seller_wallet_address": {
          "description": "Wallet address that will receive the payment (in crypto) from the checkout provider for the minted NFT",
          "type": "string"
        },
        "token_id": {
          "description": "ID of the token that has been successfully minted - should be the same as `offer_id`",
          "type": "string"
        },
        "transaction_id": {
          "description": "Transaction id",
          "type": "string"
        },
        "url": {
          "description": "NFT purchase URL given by the checkout provider that the user can use to complete payment",
          "type": "string"
        },
        "user_wallet_address": {
          "description": "Ethereum address of the user who wants to create transaction",
          "type": "string"
        }
      }
    },
    "nftprimarytransaction.GetResponse": {
      "type": "object",
      "properties": {
        "contract_address": {
          "description": "Contract address of the asset",
          "type": "string"
        },
        "offer_id": {
          "description": "Temporary asset id. Might be a token id if the token id is known or a generic description if it's not",
          "type": "string"
        },
        "provider": {
          "description": "Provider name",
          "type": "string"
        },
        "seller_wallet_address": {
          "description": "Ethereum address of the seller",
          "type": "string"
        },
        "status": {
          "description": "Transaction status enums(created, waitingPayment, pending, completed, failed)",
          "type": "string"
        },
        "token_id": {
          "description": "ID of the token that has been successfully minted - might or not be the same as `offer_id`",
          "type": "string"
        },
        "transaction_id": {
          "description": "Transaction id",
          "type": "string"
        },
        "user_wallet_address": {
          "description": "Wallet address that receives the minted NFT",
          "type": "string"
        }
      }
    },
    "nftprimarytransaction.ListTransactionsResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Transactions matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nftprimarytransaction.TransactionData"
          }
        }
      }
    },
    "nftprimarytransaction.TransactionData": {
      "type": "object",
      "properties": {
        "contract_address": {
          "description": "Contract address of the asset",
          "type": "string"
        },
        "created_at": {
          "description": "Timestamp when the transaction was created",
          "type": "string"
        },
        "external_id": {
          "description": "External transaction id",
          "type": "string"
        },
        "fees_amount": {
          "description": "Fees to pay on this transaction",
          "type": "number"
        },
        "from_amount": {
          "description": "Amount of the currency specified in `from_currency` that the buyer paid for the transaction",
          "type": "number"
        },
        "from_currency": {
          "description": "Currency that the buyer used for the transaction",
          "type": "string"
        },
        "mint_id": {
          "description": "Minting transaction ID - see mintTokens response",
          "type": "string"
        },
        "mint_status": {
          "description": "Mint status",
          "type": "string"
        },
        "offer_id": {
          "description": "Temporary asset id. Might be a token id if the token id is known or a generic description if it's not",
          "type": "string"
        },
        "provider": {
          "description": "Provider name",
          "type": "string"
        },
        "seller_wallet_address": {
          "description": "Ethereum address of the seller",
          "type": "string"
        },
        "status": {
          "description": "Transaction status enums(created, waitingPayment, pending, completed, failed)",
          "type": "string"
        },
        "to_amount": {
          "description": "Amount of the currency specified in `to_currency` that the seller received from the checkout provider for the transaction",
          "type": "number"
        },
        "to_currency": {
          "description": "Currency (crypto) that the checkout provider sent to the seller for the transaction",
          "type": "string"
        },
        "token_id": {
          "description": "ID of the token that has been successfully minted - should be the same as `offer_id`",
          "type": "string"
        },
        "transaction_id": {
          "description": "Transaction id",
          "type": "string"
        },
        "updated_at": {
          "description": "Timestamp when the transaction was updated",
          "type": "string"
        },
        "user_wallet_address": {
          "description": "Wallet address that receives the minted NFT",
          "type": "string"
        }
      }
    },
    "nftprimarytransaction.WidgetParams": {
      "type": "object",
      "properties": {
        "theme": {
          "description": "enums(light, dark)",
          "type": "string",
          "example": "light"
        }
      }
    },
    "orderBuy": {
      "description": "Details of the asset being bought",
      "allOf": [
        {
          "$ref": "#/definitions/Token"
        }
      ],
      "x-go-gen-location": "models"
    },
    "orderFeeInfoToken": {
      "description": "Details of the fee currency",
      "allOf": [
        {
          "$ref": "#/definitions/FeeToken"
        }
      ],
      "x-go-gen-location": "models"
    },
    "orderSell": {
      "description": "Details of the asset being sold",
      "allOf": [
        {
          "$ref": "#/definitions/Token"
        }
      ],
      "x-go-gen-location": "models"
    },
    "orderV3Buy": {
      "description": "Details of the asset being bought",
      "allOf": [
        {
          "$ref": "#/definitions/Token"
        }
      ],
      "x-go-gen-location": "models"
    },
    "orderV3MakerFees": {
      "description": "MakerFees is the information about the fees that needs to be paid by the maker (liquidity)",
      "allOf": [
        {
          "$ref": "#/definitions/orders.MakerTakerFee"
        }
      ],
      "x-go-gen-location": "models"
    },
    "orderV3Sell": {
      "description": "Details of the asset being sold",
      "allOf": [
        {
          "$ref": "#/definitions/Token"
        }
      ],
      "x-go-gen-location": "models"
    },
    "orderV3TakerFees": {
      "description": "TakerFees is the information about the fees that needs to be paid by the taker (liquidity)",
      "allOf": [
        {
          "$ref": "#/definitions/orders.MakerTakerFee"
        }
      ],
      "x-go-gen-location": "models"
    },
    "orders.MakerTakerFee": {
      "type": "object",
      "required": [
        "quantity_with_fees"
      ],
      "properties": {
        "decimals": {
          "description": "Number of Decimals supported the fee token",
          "type": "integer"
        },
        "fees": {
          "description": "Fees",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderFeeInfo"
          }
        },
        "quantity_with_fees": {
          "description": "Quantity of this asset with the sum of all fees applied to the asset",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of the fee token",
          "type": "string"
        },
        "token_address": {
          "description": "Address of the ERC20 contract for the fee token",
          "type": "string"
        },
        "token_type": {
          "description": "Type of the fee token (ETH/ERC20)",
          "type": "string"
        }
      }
    },
    "rejectPrimarySaleBadRequestBody": {
      "allOf": [
        {
          "$ref": "#/definitions/rejectPrimarySaleBadRequestBodyAllOf0"
        },
        {
          "$ref": "#/definitions/rejectPrimarySaleBadRequestBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleBadRequestBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleBadRequestBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "VALIDATION_ERROR"
          ],
          "example": "VALIDATION_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleForbiddenBody": {
      "allOf": [
        {
          "$ref": "#/definitions/rejectPrimarySaleForbiddenBodyAllOf0"
        },
        {
          "$ref": "#/definitions/rejectPrimarySaleForbiddenBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleForbiddenBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleForbiddenBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "AUTHENTICATION_ERROR"
          ],
          "example": "AUTHENTICATION_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleInternalServerErrorBody": {
      "allOf": [
        {
          "$ref": "#/definitions/rejectPrimarySaleInternalServerErrorBodyAllOf0"
        },
        {
          "$ref": "#/definitions/rejectPrimarySaleInternalServerErrorBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleInternalServerErrorBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleInternalServerErrorBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "INTERNAL_SERVER_ERROR"
          ],
          "example": "INTERNAL_SERVER_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleNotFoundBody": {
      "allOf": [
        {
          "$ref": "#/definitions/rejectPrimarySaleNotFoundBodyAllOf0"
        },
        {
          "$ref": "#/definitions/rejectPrimarySaleNotFoundBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleNotFoundBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleNotFoundBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "RESOURCE_NOT_FOUND"
          ],
          "example": "RESOURCE_NOT_FOUND"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleNotImplementedBody": {
      "allOf": [
        {
          "$ref": "#/definitions/rejectPrimarySaleNotImplementedBodyAllOf0"
        },
        {
          "$ref": "#/definitions/rejectPrimarySaleNotImplementedBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleNotImplementedBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleNotImplementedBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "NOT_IMPLEMENTED_ERROR"
          ],
          "example": "NOT_IMPLEMENTED_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleOKBody": {
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "$ref": "#/definitions/rejectPrimarySaleOKBodyResult"
        }
      },
      "x-go-gen-location": "operations",
      "example": {
        "result": {
          "id": 1
        }
      }
    },
    "rejectPrimarySaleOKBodyResult": {
      "type": "object",
      "required": [
        "id",
        "studio_ether_key",
        "buyer_ether_key",
        "payment_recipient_ether_key",
        "items_recipient_ether_key",
        "payment_token",
        "payment_amount",
        "studio_data",
        "status",
        "expires_at",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "buyer_ether_key": {
          "description": "Ethereum address of the buyer",
          "type": "string",
          "example": "0x123"
        },
        "created_at": {
          "description": "Time the primary sale was created",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "expires_at": {
          "description": "Time the primary sale expires",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rejectPrimarySaleOKBodyResultFeesItems"
          }
        },
        "id": {
          "description": "Global Primary Sale identifier",
          "type": "integer",
          "format": "int64",
          "example": 123
        },
        "items_recipient_ether_key": {
          "description": "Ethereum address of the items receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_amount": {
          "description": "Fee inclusive amount of the transfer",
          "type": "string",
          "example": "102000"
        },
        "payment_recipient_ether_key": {
          "description": "Ethereum address of the payment receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_token": {},
        "status": {
          "description": "The primary sale status",
          "type": "string",
          "enum": [
            "PENDING",
            "ACTIVE",
            "INVALID",
            "IN_PROGRESS",
            "ACCEPTED",
            "FAILED",
            "REJECTED",
            "EXPIRED"
          ]
        },
        "studio_data": {
          "description": "Arbitrary data defined by the selling party (e.g. game studio) to identify the primary sale. We suggest signing this payload to verify authenticity when processing.",
          "type": "string"
        },
        "studio_ether_key": {
          "description": "Ethereum address of the studio operating the primary sale, will be used to verify in completion",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "updated_at": {
          "description": "Time the primary sale was updated",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleOKBodyResultFeesItems": {
      "description": "Fee required to be paid for a primary sale",
      "type": "object",
      "required": [
        "type",
        "percentage",
        "amount",
        "address"
      ],
      "properties": {
        "address": {
          "description": "Ethereum address of the fee recipient",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "amount": {
          "description": "Fee amount",
          "type": "string",
          "example": "1000000000000000000"
        },
        "percentage": {
          "description": "Fee percentage in basis points (e.g. 200 for 2%)",
          "type": "integer",
          "example": 200
        },
        "type": {
          "description": "Fee type",
          "type": "string",
          "enum": [
            "ECOSYSTEM",
            "PROTOCOL"
          ],
          "example": "PRIMARY_SALE"
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleUnauthorizedBody": {
      "allOf": [
        {
          "$ref": "#/definitions/rejectPrimarySaleUnauthorizedBodyAllOf0"
        },
        {
          "$ref": "#/definitions/rejectPrimarySaleUnauthorizedBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleUnauthorizedBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleUnauthorizedBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "UNAUTHORISED_REQUEST"
          ],
          "example": "UNAUTHORISED_REQUEST"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleUnprocessableEntityBody": {
      "allOf": [
        {
          "$ref": "#/definitions/rejectPrimarySaleUnprocessableEntityBodyAllOf0"
        },
        {
          "$ref": "#/definitions/rejectPrimarySaleUnprocessableEntityBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleUnprocessableEntityBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "rejectPrimarySaleUnprocessableEntityBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "UNPROCESSABLE_ENTITY_ERROR"
          ],
          "example": "UNPROCESSABLE_ENTITY_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleBadRequestBody": {
      "allOf": [
        {
          "$ref": "#/definitions/signableAcceptPrimarySaleBadRequestBodyAllOf0"
        },
        {
          "$ref": "#/definitions/signableAcceptPrimarySaleBadRequestBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleBadRequestBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleBadRequestBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "VALIDATION_ERROR"
          ],
          "example": "VALIDATION_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleInternalServerErrorBody": {
      "allOf": [
        {
          "$ref": "#/definitions/signableAcceptPrimarySaleInternalServerErrorBodyAllOf0"
        },
        {
          "$ref": "#/definitions/signableAcceptPrimarySaleInternalServerErrorBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleInternalServerErrorBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleInternalServerErrorBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "INTERNAL_SERVER_ERROR"
          ],
          "example": "INTERNAL_SERVER_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleNotFoundBody": {
      "allOf": [
        {
          "$ref": "#/definitions/signableAcceptPrimarySaleNotFoundBodyAllOf0"
        },
        {
          "$ref": "#/definitions/signableAcceptPrimarySaleNotFoundBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleNotFoundBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleNotFoundBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "RESOURCE_NOT_FOUND"
          ],
          "example": "RESOURCE_NOT_FOUND"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleNotImplementedBody": {
      "allOf": [
        {
          "$ref": "#/definitions/signableAcceptPrimarySaleNotImplementedBodyAllOf0"
        },
        {
          "$ref": "#/definitions/signableAcceptPrimarySaleNotImplementedBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleNotImplementedBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleNotImplementedBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "NOT_IMPLEMENTED_ERROR"
          ],
          "example": "NOT_IMPLEMENTED_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleOKBody": {
      "type": "object",
      "required": [
        "signable_message"
      ],
      "properties": {
        "signable_message": {
          "description": "Hashed Ethereum payload of the request",
          "type": "string",
          "example": "0x123"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleUnprocessableEntityBody": {
      "allOf": [
        {
          "$ref": "#/definitions/signableAcceptPrimarySaleUnprocessableEntityBodyAllOf0"
        },
        {
          "$ref": "#/definitions/signableAcceptPrimarySaleUnprocessableEntityBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleUnprocessableEntityBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableAcceptPrimarySaleUnprocessableEntityBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "UNPROCESSABLE_ENTITY_ERROR"
          ],
          "example": "UNPROCESSABLE_ENTITY_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleBadRequestBody": {
      "allOf": [
        {
          "$ref": "#/definitions/signableCreatePrimarySaleBadRequestBodyAllOf0"
        },
        {
          "$ref": "#/definitions/signableCreatePrimarySaleBadRequestBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleBadRequestBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleBadRequestBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "VALIDATION_ERROR"
          ],
          "example": "VALIDATION_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleInternalServerErrorBody": {
      "allOf": [
        {
          "$ref": "#/definitions/signableCreatePrimarySaleInternalServerErrorBodyAllOf0"
        },
        {
          "$ref": "#/definitions/signableCreatePrimarySaleInternalServerErrorBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleInternalServerErrorBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleInternalServerErrorBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "INTERNAL_SERVER_ERROR"
          ],
          "example": "INTERNAL_SERVER_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleNotFoundBody": {
      "allOf": [
        {
          "$ref": "#/definitions/signableCreatePrimarySaleNotFoundBodyAllOf0"
        },
        {
          "$ref": "#/definitions/signableCreatePrimarySaleNotFoundBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleNotFoundBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleNotFoundBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "RESOURCE_NOT_FOUND"
          ],
          "example": "RESOURCE_NOT_FOUND"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleNotImplementedBody": {
      "allOf": [
        {
          "$ref": "#/definitions/signableCreatePrimarySaleNotImplementedBodyAllOf0"
        },
        {
          "$ref": "#/definitions/signableCreatePrimarySaleNotImplementedBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleNotImplementedBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleNotImplementedBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "NOT_IMPLEMENTED_ERROR"
          ],
          "example": "NOT_IMPLEMENTED_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleOKBody": {
      "type": "object",
      "required": [
        "studio_ether_key",
        "buyer_ether_key",
        "buyer_stark_key",
        "buyer_vault_id",
        "payment_recipient_ether_key",
        "payment_recipient_stark_key",
        "payment_recipient_vault_id",
        "items_recipient_ether_key",
        "payment_asset_id",
        "payment_amount",
        "studio_data",
        "expiration_timestamp",
        "nonce",
        "payload_hash",
        "signable_message"
      ],
      "properties": {
        "buyer_ether_key": {
          "description": "Ethereum address of the payer of the primary sale",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "buyer_stark_key": {
          "description": "Stark key of the buyer",
          "type": "string",
          "example": "0x123"
        },
        "buyer_vault_id": {
          "description": "Vault ID of the buyer",
          "type": "integer",
          "example": 12
        },
        "expiration_timestamp": {
          "description": "Time the primary sale expires",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/signableCreatePrimarySaleOKBodyFeesItems"
          }
        },
        "items_recipient_ether_key": {
          "description": "Ethereum address of the items receiver",
          "type": "string",
          "example": "0x123"
        },
        "nonce": {
          "description": "Nonce of transaction",
          "type": "integer",
          "example": 123
        },
        "payload_hash": {
          "description": "Hash of the StarkEx payload",
          "type": "string",
          "example": "0x123"
        },
        "payment_amount": {
          "description": "Fee exclusive amount of the transfer",
          "type": "string",
          "example": "102000"
        },
        "payment_asset_id": {
          "description": "Asset ID of payment token",
          "type": "string",
          "example": "0x1"
        },
        "payment_recipient_ether_key": {
          "description": "Ethereum address of the recipient of the sale proceedings",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "payment_recipient_stark_key": {
          "description": "Stark key of the payment receiver",
          "type": "string",
          "example": "0x123"
        },
        "payment_recipient_vault_id": {
          "description": "Vault ID of the payment receiver",
          "type": "integer",
          "example": 12
        },
        "signable_message": {
          "description": "Hashed Ethereum payload of the request",
          "type": "string",
          "example": "0x123"
        },
        "studio_data": {
          "description": "Arbitrary data defined by the selling party (e.g. game studio) to identify the primary sale. We suggest signing this payload to verify authenticity when processing.",
          "type": "string"
        },
        "studio_ether_key": {
          "description": "Ethereum address of the studio operating the primary sale, will be used to verify in completion",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleOKBodyFeeInfo": {
      "type": "object",
      "properties": {
        "asset_id": {
          "description": "Asset ID of fee token",
          "type": "string",
          "example": "0x1"
        },
        "fee_limit": {
          "description": "Fee limit of transaction - total fee amount",
          "type": "string",
          "example": "1000000000000000000"
        },
        "source_vault_id": {
          "description": "Vault ID of fee payer",
          "type": "integer",
          "example": 12
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleOKBodyFeesItems": {
      "description": "Fee required to be paid for a primary sale",
      "type": "object",
      "required": [
        "type",
        "percentage",
        "amount",
        "address"
      ],
      "properties": {
        "address": {
          "description": "Ethereum address of the fee recipient",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "amount": {
          "description": "Fee amount",
          "type": "string",
          "example": "1000000000000000000"
        },
        "percentage": {
          "description": "Fee percentage in basis points (e.g. 200 for 2%)",
          "type": "integer",
          "example": 200
        },
        "type": {
          "description": "Fee type",
          "type": "string",
          "enum": [
            "ECOSYSTEM",
            "PROTOCOL"
          ],
          "example": "PRIMARY_SALE"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleParamsBody": {
      "type": "object",
      "required": [
        "studio_ether_key",
        "buyer_ether_key",
        "payment_recipient_ether_key",
        "items_recipient_ether_key",
        "payment_token",
        "payment_amount",
        "studio_data"
      ],
      "properties": {
        "buyer_ether_key": {
          "description": "Ethereum address of the payer of the primary sale",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "expiration_timestamp": {
          "description": "Time the primary sale expires",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-07T07:20:50.52Z"
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/signableCreatePrimarySaleParamsBodyFeesItems"
          }
        },
        "items_recipient_ether_key": {
          "description": "Ethereum address of the recipient of the items - in many cases this will be the same as account, but sometimes you may wish to gift the items to another address.",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "payment_amount": {
          "description": "Fee exclusive amount of the primary sale",
          "type": "string",
          "example": "1000000000000000000"
        },
        "payment_recipient_ether_key": {
          "description": "Ethereum address of the recipient of the sale proceedings",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "payment_token": {},
        "studio_data": {
          "description": "Arbitrary data defined by the selling party (e.g. game studio) to identify the primary sale. We suggest signing this payload to verify authenticity when processing.",
          "type": "string"
        },
        "studio_ether_key": {
          "description": "Ethereum address of the studio operating the primary sale, will be used to verify in completion",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableCreatePrimarySaleParamsBodyFeesItems": {
      "description": "A fee object used in requests",
      "type": "object",
      "required": [
        "fee_percentage",
        "address"
      ],
      "properties": {
        "address": {
          "description": "Ethereum address of the fee recipient",
          "type": "string",
          "example": "0x64E3F78E6C55299d004D45EF43ADaf5A7D83c9B8"
        },
        "fee_percentage": {
          "description": "Fee percentage in basis points (e.g. 200 for 2%)",
          "type": "integer",
          "example": 200
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleBadRequestBody": {
      "allOf": [
        {
          "$ref": "#/definitions/signableRejectPrimarySaleBadRequestBodyAllOf0"
        },
        {
          "$ref": "#/definitions/signableRejectPrimarySaleBadRequestBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleBadRequestBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleBadRequestBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "VALIDATION_ERROR"
          ],
          "example": "VALIDATION_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleInternalServerErrorBody": {
      "allOf": [
        {
          "$ref": "#/definitions/signableRejectPrimarySaleInternalServerErrorBodyAllOf0"
        },
        {
          "$ref": "#/definitions/signableRejectPrimarySaleInternalServerErrorBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleInternalServerErrorBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleInternalServerErrorBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "INTERNAL_SERVER_ERROR"
          ],
          "example": "INTERNAL_SERVER_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleNotFoundBody": {
      "allOf": [
        {
          "$ref": "#/definitions/signableRejectPrimarySaleNotFoundBodyAllOf0"
        },
        {
          "$ref": "#/definitions/signableRejectPrimarySaleNotFoundBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleNotFoundBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleNotFoundBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "RESOURCE_NOT_FOUND"
          ],
          "example": "RESOURCE_NOT_FOUND"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleNotImplementedBody": {
      "allOf": [
        {
          "$ref": "#/definitions/signableRejectPrimarySaleNotImplementedBodyAllOf0"
        },
        {
          "$ref": "#/definitions/signableRejectPrimarySaleNotImplementedBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleNotImplementedBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleNotImplementedBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "NOT_IMPLEMENTED_ERROR"
          ],
          "example": "NOT_IMPLEMENTED_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleOKBody": {
      "type": "object",
      "required": [
        "signable_message"
      ],
      "properties": {
        "signable_message": {
          "description": "Hashed Ethereum payload of the request",
          "type": "string",
          "example": "0x123"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleUnprocessableEntityBody": {
      "allOf": [
        {
          "$ref": "#/definitions/signableRejectPrimarySaleUnprocessableEntityBodyAllOf0"
        },
        {
          "$ref": "#/definitions/signableRejectPrimarySaleUnprocessableEntityBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleUnprocessableEntityBodyAllOf0": {
      "type": "object",
      "required": [
        "message",
        "link",
        "trace_id"
      ],
      "properties": {
        "link": {
          "description": "Link to IMX documentation that can help resolve this error",
          "type": "string",
          "example": "https://docs.x.immutable.com/reference/#/"
        },
        "message": {
          "description": "Error Message",
          "type": "string",
          "example": "all fields must be provided"
        },
        "trace_id": {
          "description": "Trace ID of the initial request",
          "type": "string",
          "example": "e47634b79a5cd6894ddc9639ec4aad26"
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableRejectPrimarySaleUnprocessableEntityBodyAllOf1": {
      "type": "object",
      "required": [
        "code",
        "details"
      ],
      "properties": {
        "code": {
          "description": "Error Code",
          "type": "string",
          "enum": [
            "UNPROCESSABLE_ENTITY_ERROR"
          ],
          "example": "UNPROCESSABLE_ENTITY_ERROR"
        },
        "details": {
          "description": "Additional details to help resolve the error",
          "type": "object",
          "x-nullable": true
        }
      },
      "x-go-gen-location": "operations"
    },
    "signableTransferDetailsToken": {
      "description": "Token to transfer",
      "allOf": [
        {
          "$ref": "#/definitions/SignableToken"
        }
      ],
      "x-go-gen-location": "models"
    },
    "signableTransferDetailsV2Token": {
      "description": "Token to transfer",
      "allOf": [
        {
          "$ref": "#/definitions/SignableToken"
        }
      ],
      "x-go-gen-location": "models"
    },
    "signableTransferResponseDetailsToken": {
      "description": "Token in request to match in SDK implementation",
      "allOf": [
        {
          "$ref": "#/definitions/SignableToken"
        }
      ],
      "x-go-gen-location": "models"
    },
    "store.MakerTakerFee": {
      "type": "object",
      "required": [
        "quantity_with_fees"
      ],
      "properties": {
        "fees": {
          "description": "Fees",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderFeeInfo"
          }
        },
        "quantity_with_fees": {
          "description": "Quantity of this asset with the sum of all fees applied to the asset",
          "type": "string"
        }
      }
    },
    "summarizedCollectionCollection": {
      "description": "Collection and it's metadata",
      "allOf": [
        {
          "$ref": "#/definitions/Collection"
        }
      ],
      "x-go-gen-location": "models"
    },
    "tokenDataOAIGen": {
      "description": "Token details of this asset",
      "allOf": [
        {
          "$ref": "#/definitions/TokenData"
        }
      ],
      "x-go-gen-location": "models"
    },
    "tokenDataProperties": {
      "description": "Properties of this asset",
      "allOf": [
        {
          "$ref": "#/definitions/AssetProperties"
        }
      ],
      "x-go-gen-location": "models"
    },
    "tradeA": {
      "description": "Side A of this trade (the buy order)",
      "allOf": [
        {
          "$ref": "#/definitions/TradeSide"
        }
      ],
      "x-go-gen-location": "models"
    },
    "tradeB": {
      "description": "Side B of this trade (the sell order)",
      "allOf": [
        {
          "$ref": "#/definitions/TradeSide"
        }
      ],
      "x-go-gen-location": "models"
    },
    "trades.CreateTradeRequest": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "asset_id_buy",
        "asset_id_sell",
        "expiration_timestamp",
        "nonce",
        "order_id",
        "stark_key",
        "stark_signature",
        "vault_id_buy",
        "vault_id_sell"
      ],
      "properties": {
        "amount_buy": {
          "description": "Amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "asset_id_buy": {
          "description": "ID of the asset to buy",
          "type": "string"
        },
        "asset_id_sell": {
          "description": "ID of the asset to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this trade",
          "type": "integer"
        },
        "fee_info": {
          "$ref": "#/definitions/tradesCreateTradeRequestFeeInfo"
        },
        "fees": {
          "description": "Fee information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeEntry"
          }
        },
        "include_fees": {
          "description": "[deprecated] All orders include fees since the introduction of protocol fees",
          "type": "boolean"
        },
        "nonce": {
          "description": "Nonce of the trade",
          "type": "integer"
        },
        "order_id": {
          "description": "ID of the order",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the user creating trade",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        },
        "vault_id_buy": {
          "description": "ID of the vault into which the traded asset will be placed",
          "type": "integer"
        },
        "vault_id_sell": {
          "description": "ID of the vault to sell from",
          "type": "integer"
        }
      }
    },
    "tradesCreateTradeRequestFeeInfo": {
      "description": "Fee details",
      "allOf": [
        {
          "$ref": "#/definitions/FeeInfo"
        }
      ],
      "x-go-gen-location": "models"
    },
    "transferToken": {
      "description": "Token transferred by the user",
      "allOf": [
        {
          "$ref": "#/definitions/Token"
        }
      ],
      "x-go-gen-location": "models"
    },
    "withdrawalToken": {
      "description": "Details of the asset this user is withdrawing",
      "allOf": [
        {
          "$ref": "#/definitions/Token"
        }
      ],
      "x-go-gen-location": "models"
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "ImxEthAddress": {
      "type": "apiKey",
      "name": "x-imx-eth-address",
      "in": "header"
    },
    "ImxEthSignature": {
      "type": "apiKey",
      "name": "x-imx-eth-signature",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Primary Sales endpoints",
      "name": "primary-sales"
    },
    {
      "description": "Primary Sales endpoints",
      "name": "primary_sales"
    }
  ],
  "x-components": {
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../../../../common/openapi/errors/api_errors_v2.yaml#/definitions/APIError400"
            }
          }
        },
        "description": "Bad Request (400)"
      },
      "ForbiddenRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../../../../common/openapi/errors/api_errors_v2.yaml#/definitions/APIError403"
            }
          }
        },
        "description": "Forbidden (403)"
      },
      "InternalServerError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../../../../common/openapi/errors/api_errors_v2.yaml#/definitions/APIError500"
            }
          }
        },
        "description": "Internal Server Error (500)"
      },
      "NotFound": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../../../../common/openapi/errors/api_errors_v2.yaml#/definitions/APIError404"
            }
          }
        },
        "description": "The specified resource was not found (404)"
      },
      "NotImplementedError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../../../../common/openapi/errors/api_errors_v2.yaml#/definitions/APIError501"
            }
          }
        },
        "description": "Not Implemented Error (501)"
      },
      "TooManyRequests": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../../../../common/openapi/errors/api_errors_v2.yaml#/definitions/APIError429"
            }
          }
        },
        "description": "Too Many Requests (429)"
      },
      "UnauthorisedRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../../../../common/openapi/errors/api_errors_v2.yaml#/definitions/APIError401"
            }
          }
        },
        "description": "Unauthorised Request (401)"
      },
      "UnprocessableEntity": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../../../../common/openapi/errors/api_errors_v2.yaml#/definitions/APIError422"
            }
          }
        },
        "description": "Unprocessable Entity (422)"
      }
    }
  }
}