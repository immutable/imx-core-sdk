/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  RegistrationV4,
  RegistrationV4Interface,
} from "../../../contracts/v4/RegistrationV4";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_imx",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ethKey",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "starkKey",
        type: "uint256",
      },
    ],
    name: "NoFundsToWithdraw",
    type: "error",
  },
  {
    inputs: [],
    name: "getVersion",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "imx",
    outputs: [
      {
        internalType: "contract CoreV4",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "starkKey",
        type: "uint256",
      },
    ],
    name: "isRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ethKey",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "starkKey",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "assetType",
        type: "uint256",
      },
    ],
    name: "registerAndWithdrawAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ethKey",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "starkKey",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "assetType",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "registerAndWithdrawNft",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ethKey",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "starkKey",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "assetType",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "mintingBlob",
        type: "bytes",
      },
    ],
    name: "registerWithdrawAndMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ethKey",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "starkKey",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "assetType",
        type: "uint256",
      },
    ],
    name: "withdrawAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620012bc380380620012bc8339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b608051611145620001776000396000818161016d01528181610229015281816102c2015281816102f30152818161038501528181610429015281816104bb0152818161056e01528181610629015281816106c9015281816107c4015261085b01526111456000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063352eb84c1161005b578063352eb84c146100da57806343fa186d146100f6578063579a698814610112578063d2fc99b5146101425761007d565b8063022cabbc146100825780630d8e6e2c1461009e5780630f08025f146100bc575b600080fd5b61009c600480360381019061009791906109fb565b61015e565b005b6100a6610225565b6040516100b39190610b13565b60405180910390f35b6100c46102c0565b6040516100d19190610b94565b60405180910390f35b6100f460048036038101906100ef9190610baf565b6102e4565b005b610110600480360381019061010b9190610c49565b61041a565b005b61012c60048036038101906101279190610d05565b610553565b6040516101399190610d4d565b60405180910390f35b61015c60048036038101906101579190610d68565b610625565b005b61016784610553565b6101fd577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bea84187868686866040518563ffffffff1660e01b81526004016101ca9493929190610e26565b600060405180830381600087803b1580156101e457600080fd5b505af11580156101f8573d6000803e3d6000fd5b505050505b61021e8573ffffffffffffffffffffffffffffffffffffffff168583610625565b5050505050565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ffa1ad746040518163ffffffff1660e01b8152600401600060405180830381865afa158015610292573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102bb9190610f87565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6102ed85610553565b610383577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bea84187878787876040518563ffffffff1660e01b81526004016103509493929190610e26565b600060405180830381600087803b15801561036a57600080fd5b505af115801561037e573d6000803e3d6000fd5b505050505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663019b417a8684846040518463ffffffff1660e01b81526004016103e093929190610fd0565b600060405180830381600087803b1580156103fa57600080fd5b505af115801561040e573d6000803e3d6000fd5b50505050505050505050565b61042386610553565b6104b9577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bea84187888888886040518563ffffffff1660e01b81526004016104869493929190610e26565b600060405180830381600087803b1580156104a057600080fd5b505af11580156104b4573d6000803e3d6000fd5b505050505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d91443b7878585856040518563ffffffff1660e01b81526004016105189493929190611007565b600060405180830381600087803b15801561053257600080fd5b505af1158015610546573d6000803e3d6000fd5b5050505050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631dbd1da7846040518263ffffffff1660e01b81526004016105c59190611047565b602060405180830381865afa1580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106069190611077565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ec3161b085846040518363ffffffff1660e01b81526004016106829291906110a4565b602060405180830381865afa15801561069f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c391906110e2565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ec3161b085856040518363ffffffff1660e01b81526004016107229291906110a4565b602060405180830381865afa15801561073f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076391906110e2565b90506000821480156107755750600081145b156107b95784846040517f1362cdf20000000000000000000000000000000000000000000000000000000081526004016107b09291906110a4565b60405180910390fd5b6000821115610850577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663441a3e7086856040518363ffffffff1660e01b815260040161081d9291906110a4565b600060405180830381600087803b15801561083757600080fd5b505af115801561084b573d6000803e3d6000fd5b505050505b60008111156108e7577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663441a3e7085856040518363ffffffff1660e01b81526004016108b49291906110a4565b600060405180830381600087803b1580156108ce57600080fd5b505af11580156108e2573d6000803e3d6000fd5b505050505b5050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061092d82610902565b9050919050565b61093d81610922565b811461094857600080fd5b50565b60008135905061095a81610934565b92915050565b6000819050919050565b61097381610960565b811461097e57600080fd5b50565b6000813590506109908161096a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126109bb576109ba610996565b5b8235905067ffffffffffffffff8111156109d8576109d761099b565b5b6020830191508360018202830111156109f4576109f36109a0565b5b9250929050565b600080600080600060808688031215610a1757610a166108f8565b5b6000610a258882890161094b565b9550506020610a3688828901610981565b945050604086013567ffffffffffffffff811115610a5757610a566108fd565b5b610a63888289016109a5565b93509350506060610a7688828901610981565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b83811015610abd578082015181840152602081019050610aa2565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ae582610a83565b610aef8185610a8e565b9350610aff818560208601610a9f565b610b0881610ac9565b840191505092915050565b60006020820190508181036000830152610b2d8184610ada565b905092915050565b6000819050919050565b6000610b5a610b55610b5084610902565b610b35565b610902565b9050919050565b6000610b6c82610b3f565b9050919050565b6000610b7e82610b61565b9050919050565b610b8e81610b73565b82525050565b6000602082019050610ba96000830184610b85565b92915050565b60008060008060008060a08789031215610bcc57610bcb6108f8565b5b6000610bda89828a0161094b565b9650506020610beb89828a01610981565b955050604087013567ffffffffffffffff811115610c0c57610c0b6108fd565b5b610c1889828a016109a5565b94509450506060610c2b89828a01610981565b9250506080610c3c89828a01610981565b9150509295509295509295565b600080600080600080600060a0888a031215610c6857610c676108f8565b5b6000610c768a828b0161094b565b9750506020610c878a828b01610981565b965050604088013567ffffffffffffffff811115610ca857610ca76108fd565b5b610cb48a828b016109a5565b95509550506060610cc78a828b01610981565b935050608088013567ffffffffffffffff811115610ce857610ce76108fd565b5b610cf48a828b016109a5565b925092505092959891949750929550565b600060208284031215610d1b57610d1a6108f8565b5b6000610d2984828501610981565b91505092915050565b60008115159050919050565b610d4781610d32565b82525050565b6000602082019050610d626000830184610d3e565b92915050565b600080600060608486031215610d8157610d806108f8565b5b6000610d8f86828701610981565b9350506020610da086828701610981565b9250506040610db186828701610981565b9150509250925092565b610dc481610922565b82525050565b610dd381610960565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000610e058385610dd9565b9350610e12838584610dea565b610e1b83610ac9565b840190509392505050565b6000606082019050610e3b6000830187610dbb565b610e486020830186610dca565b8181036040830152610e5b818486610df9565b905095945050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ea382610ac9565b810181811067ffffffffffffffff82111715610ec257610ec1610e6b565b5b80604052505050565b6000610ed56108ee565b9050610ee18282610e9a565b919050565b600067ffffffffffffffff821115610f0157610f00610e6b565b5b610f0a82610ac9565b9050602081019050919050565b6000610f2a610f2584610ee6565b610ecb565b905082815260208101848484011115610f4657610f45610e66565b5b610f51848285610a9f565b509392505050565b600082601f830112610f6e57610f6d610996565b5b8151610f7e848260208601610f17565b91505092915050565b600060208284031215610f9d57610f9c6108f8565b5b600082015167ffffffffffffffff811115610fbb57610fba6108fd565b5b610fc784828501610f59565b91505092915050565b6000606082019050610fe56000830186610dca565b610ff26020830185610dca565b610fff6040830184610dca565b949350505050565b600060608201905061101c6000830187610dca565b6110296020830186610dca565b818103604083015261103c818486610df9565b905095945050505050565b600060208201905061105c6000830184610dca565b92915050565b60008151905061107181610934565b92915050565b60006020828403121561108d5761108c6108f8565b5b600061109b84828501611062565b91505092915050565b60006040820190506110b96000830185610dca565b6110c66020830184610dca565b9392505050565b6000815190506110dc8161096a565b92915050565b6000602082840312156110f8576110f76108f8565b5b6000611106848285016110cd565b9150509291505056fea2646970667358221220c33e1830b470bf1e012ac831ec80242d6268e5e6e990b7e1574a230f71533ebd64736f6c63430008130033";

type RegistrationV4ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistrationV4ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RegistrationV4__factory extends ContractFactory {
  constructor(...args: RegistrationV4ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _imx: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RegistrationV4> {
    return super.deploy(_imx, overrides || {}) as Promise<RegistrationV4>;
  }
  override getDeployTransaction(
    _imx: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_imx, overrides || {});
  }
  override attach(address: string): RegistrationV4 {
    return super.attach(address) as RegistrationV4;
  }
  override connect(signer: Signer): RegistrationV4__factory {
    return super.connect(signer) as RegistrationV4__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistrationV4Interface {
    return new utils.Interface(_abi) as RegistrationV4Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RegistrationV4 {
    return new Contract(address, _abi, signerOrProvider) as RegistrationV4;
  }
}
