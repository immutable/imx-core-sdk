/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CoreInterface extends utils.Interface {
  functions: {
    "announceAvailabilityVerifierRemovalIntent(address)": FunctionFragment;
    "announceVerifierRemovalIntent(address)": FunctionFragment;
    "deposit(uint256,uint256,uint256)": FunctionFragment;
    "deposit(uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositCancel(uint256,uint256,uint256)": FunctionFragment;
    "depositERC20(uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositEth(uint256,uint256,uint256)": FunctionFragment;
    "depositNft(uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositNftReclaim(uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositReclaim(uint256,uint256,uint256)": FunctionFragment;
    "escape(uint256,uint256,uint256,uint256)": FunctionFragment;
    "freezeRequest(uint256,uint256)": FunctionFragment;
    "fullWithdrawalRequest(uint256,uint256)": FunctionFragment;
    "getAssetInfo(uint256)": FunctionFragment;
    "getCancellationRequest(uint256,uint256,uint256)": FunctionFragment;
    "getDepositBalance(uint256,uint256,uint256)": FunctionFragment;
    "getEthKey(uint256)": FunctionFragment;
    "getFullWithdrawalRequest(uint256,uint256)": FunctionFragment;
    "getLastBatchId()": FunctionFragment;
    "getOrderRoot()": FunctionFragment;
    "getOrderTreeHeight()": FunctionFragment;
    "getQuantizedDepositBalance(uint256,uint256,uint256)": FunctionFragment;
    "getQuantum(uint256)": FunctionFragment;
    "getRegisteredAvailabilityVerifiers()": FunctionFragment;
    "getRegisteredVerifiers()": FunctionFragment;
    "getSequenceNumber()": FunctionFragment;
    "getVaultRoot()": FunctionFragment;
    "getVaultTreeHeight()": FunctionFragment;
    "getWithdrawalBalance(uint256,uint256)": FunctionFragment;
    "isAvailabilityVerifier(address)": FunctionFragment;
    "isFrozen()": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "isTokenAdmin(address)": FunctionFragment;
    "isUserAdmin(address)": FunctionFragment;
    "isVerifier(address)": FunctionFragment;
    "mainAcceptGovernance()": FunctionFragment;
    "mainCancelNomination()": FunctionFragment;
    "mainIsGovernor(address)": FunctionFragment;
    "mainNominateNewGovernor(address)": FunctionFragment;
    "mainRemoveGovernor(address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "registerAndDepositERC20(address,uint256,bytes,uint256,uint256,uint256)": FunctionFragment;
    "registerAndDepositEth(address,uint256,bytes,uint256,uint256)": FunctionFragment;
    "registerAvailabilityVerifier(address,string)": FunctionFragment;
    "registerOperator(address)": FunctionFragment;
    "registerToken(uint256,bytes)": FunctionFragment;
    "registerTokenAdmin(address)": FunctionFragment;
    "registerUser(address,uint256,bytes)": FunctionFragment;
    "registerUserAdmin(address)": FunctionFragment;
    "registerVerifier(address,string)": FunctionFragment;
    "removeAvailabilityVerifier(address)": FunctionFragment;
    "removeVerifier(address)": FunctionFragment;
    "unFreeze()": FunctionFragment;
    "unregisterOperator(address)": FunctionFragment;
    "unregisterTokenAdmin(address)": FunctionFragment;
    "unregisterUserAdmin(address)": FunctionFragment;
    "updateState(uint256[],uint256[])": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawAndMint(uint256,uint256,bytes)": FunctionFragment;
    "withdrawNft(uint256,uint256,uint256)": FunctionFragment;
    "withdrawNftTo(uint256,uint256,uint256,address)": FunctionFragment;
    "withdrawTo(uint256,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "announceAvailabilityVerifierRemovalIntent"
      | "announceVerifierRemovalIntent"
      | "deposit(uint256,uint256,uint256)"
      | "deposit(uint256,uint256,uint256,uint256)"
      | "depositCancel"
      | "depositERC20"
      | "depositEth"
      | "depositNft"
      | "depositNftReclaim"
      | "depositReclaim"
      | "escape"
      | "freezeRequest"
      | "fullWithdrawalRequest"
      | "getAssetInfo"
      | "getCancellationRequest"
      | "getDepositBalance"
      | "getEthKey"
      | "getFullWithdrawalRequest"
      | "getLastBatchId"
      | "getOrderRoot"
      | "getOrderTreeHeight"
      | "getQuantizedDepositBalance"
      | "getQuantum"
      | "getRegisteredAvailabilityVerifiers"
      | "getRegisteredVerifiers"
      | "getSequenceNumber"
      | "getVaultRoot"
      | "getVaultTreeHeight"
      | "getWithdrawalBalance"
      | "isAvailabilityVerifier"
      | "isFrozen"
      | "isOperator"
      | "isTokenAdmin"
      | "isUserAdmin"
      | "isVerifier"
      | "mainAcceptGovernance"
      | "mainCancelNomination"
      | "mainIsGovernor"
      | "mainNominateNewGovernor"
      | "mainRemoveGovernor"
      | "onERC721Received"
      | "registerAndDepositERC20"
      | "registerAndDepositEth"
      | "registerAvailabilityVerifier"
      | "registerOperator"
      | "registerToken"
      | "registerTokenAdmin"
      | "registerUser"
      | "registerUserAdmin"
      | "registerVerifier"
      | "removeAvailabilityVerifier"
      | "removeVerifier"
      | "unFreeze"
      | "unregisterOperator"
      | "unregisterTokenAdmin"
      | "unregisterUserAdmin"
      | "updateState"
      | "withdraw"
      | "withdrawAndMint"
      | "withdrawNft"
      | "withdrawNftTo"
      | "withdrawTo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "announceAvailabilityVerifierRemovalIntent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "announceVerifierRemovalIntent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCancel",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNft",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNftReclaim",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositReclaim",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escape",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fullWithdrawalRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCancellationRequest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositBalance",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFullWithdrawalRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderTreeHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuantizedDepositBalance",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuantum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredAvailabilityVerifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredVerifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSequenceNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultTreeHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalBalance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailabilityVerifier",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isFrozen", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTokenAdmin",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isUserAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "isVerifier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mainAcceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainCancelNomination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainIsGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mainNominateNewGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mainRemoveGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndDepositERC20",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndDepositEth",
    values: [string, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAvailabilityVerifier",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTokenAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUserAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVerifier",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAvailabilityVerifier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unFreeze", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unregisterOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterTokenAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterUserAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndMint",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNft",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNftTo",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "announceAvailabilityVerifierRemovalIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceVerifierRemovalIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositNftReclaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositReclaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escape", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fullWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCancellationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEthKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFullWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderTreeHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuantizedDepositBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuantum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredAvailabilityVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSequenceNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultTreeHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVerifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mainAcceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainCancelNomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainIsGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainNominateNewGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainRemoveGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndDepositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndDepositEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUserAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unFreeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterUserAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNftTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;

  events: {
    "LogDeposit(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogDepositCancel(uint256,uint256,uint256)": EventFragment;
    "LogDepositCancelReclaimed(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogDepositNftCancelReclaimed(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogFullWithdrawalRequest(uint256,uint256)": EventFragment;
    "LogMintWithdrawalPerformed(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogMintableWithdrawalAllowed(uint256,uint256,uint256)": EventFragment;
    "LogNftDeposit(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogNftWithdrawalAllowed(uint256,uint256)": EventFragment;
    "LogNftWithdrawalPerformed(uint256,uint256,uint256,uint256,address)": EventFragment;
    "LogRootUpdate(uint256,uint256,uint256,uint256)": EventFragment;
    "LogStateTransitionFact(bytes32)": EventFragment;
    "LogVaultBalanceChangeApplied(address,uint256,uint256,int256)": EventFragment;
    "LogWithdrawalAllowed(uint256,uint256,uint256,uint256)": EventFragment;
    "LogWithdrawalPerformed(uint256,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepositCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepositCancelReclaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogDepositNftCancelReclaimed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFullWithdrawalRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMintWithdrawalPerformed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogMintableWithdrawalAllowed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNftDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNftWithdrawalAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNftWithdrawalPerformed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRootUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogStateTransitionFact"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogVaultBalanceChangeApplied"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawalAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawalPerformed"): EventFragment;
}

export interface LogDepositEventObject {
  depositorEthKey: string;
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogDepositEventObject
>;

export type LogDepositEventFilter = TypedEventFilter<LogDepositEvent>;

export interface LogDepositCancelEventObject {
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetId: BigNumber;
}
export type LogDepositCancelEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogDepositCancelEventObject
>;

export type LogDepositCancelEventFilter =
  TypedEventFilter<LogDepositCancelEvent>;

export interface LogDepositCancelReclaimedEventObject {
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogDepositCancelReclaimedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogDepositCancelReclaimedEventObject
>;

export type LogDepositCancelReclaimedEventFilter =
  TypedEventFilter<LogDepositCancelReclaimedEvent>;

export interface LogDepositNftCancelReclaimedEventObject {
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetType: BigNumber;
  tokenId: BigNumber;
  assetId: BigNumber;
}
export type LogDepositNftCancelReclaimedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogDepositNftCancelReclaimedEventObject
>;

export type LogDepositNftCancelReclaimedEventFilter =
  TypedEventFilter<LogDepositNftCancelReclaimedEvent>;

export interface LogFullWithdrawalRequestEventObject {
  starkKey: BigNumber;
  vaultId: BigNumber;
}
export type LogFullWithdrawalRequestEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogFullWithdrawalRequestEventObject
>;

export type LogFullWithdrawalRequestEventFilter =
  TypedEventFilter<LogFullWithdrawalRequestEvent>;

export interface LogMintWithdrawalPerformedEventObject {
  ownerKey: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
  assetId: BigNumber;
}
export type LogMintWithdrawalPerformedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogMintWithdrawalPerformedEventObject
>;

export type LogMintWithdrawalPerformedEventFilter =
  TypedEventFilter<LogMintWithdrawalPerformedEvent>;

export interface LogMintableWithdrawalAllowedEventObject {
  ownerKey: BigNumber;
  assetId: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogMintableWithdrawalAllowedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogMintableWithdrawalAllowedEventObject
>;

export type LogMintableWithdrawalAllowedEventFilter =
  TypedEventFilter<LogMintableWithdrawalAllowedEvent>;

export interface LogNftDepositEventObject {
  depositorEthKey: string;
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetType: BigNumber;
  tokenId: BigNumber;
  assetId: BigNumber;
}
export type LogNftDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogNftDepositEventObject
>;

export type LogNftDepositEventFilter = TypedEventFilter<LogNftDepositEvent>;

export interface LogNftWithdrawalAllowedEventObject {
  ownerKey: BigNumber;
  assetId: BigNumber;
}
export type LogNftWithdrawalAllowedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogNftWithdrawalAllowedEventObject
>;

export type LogNftWithdrawalAllowedEventFilter =
  TypedEventFilter<LogNftWithdrawalAllowedEvent>;

export interface LogNftWithdrawalPerformedEventObject {
  ownerKey: BigNumber;
  assetType: BigNumber;
  tokenId: BigNumber;
  assetId: BigNumber;
  recipient: string;
}
export type LogNftWithdrawalPerformedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  LogNftWithdrawalPerformedEventObject
>;

export type LogNftWithdrawalPerformedEventFilter =
  TypedEventFilter<LogNftWithdrawalPerformedEvent>;

export interface LogRootUpdateEventObject {
  sequenceNumber: BigNumber;
  batchId: BigNumber;
  vaultRoot: BigNumber;
  orderRoot: BigNumber;
}
export type LogRootUpdateEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LogRootUpdateEventObject
>;

export type LogRootUpdateEventFilter = TypedEventFilter<LogRootUpdateEvent>;

export interface LogStateTransitionFactEventObject {
  stateTransitionFact: string;
}
export type LogStateTransitionFactEvent = TypedEvent<
  [string],
  LogStateTransitionFactEventObject
>;

export type LogStateTransitionFactEventFilter =
  TypedEventFilter<LogStateTransitionFactEvent>;

export interface LogVaultBalanceChangeAppliedEventObject {
  ethKey: string;
  assetId: BigNumber;
  vaultId: BigNumber;
  quantizedAmountChange: BigNumber;
}
export type LogVaultBalanceChangeAppliedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LogVaultBalanceChangeAppliedEventObject
>;

export type LogVaultBalanceChangeAppliedEventFilter =
  TypedEventFilter<LogVaultBalanceChangeAppliedEvent>;

export interface LogWithdrawalAllowedEventObject {
  ownerKey: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogWithdrawalAllowedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LogWithdrawalAllowedEventObject
>;

export type LogWithdrawalAllowedEventFilter =
  TypedEventFilter<LogWithdrawalAllowedEvent>;

export interface LogWithdrawalPerformedEventObject {
  ownerKey: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
  recipient: string;
}
export type LogWithdrawalPerformedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  LogWithdrawalPerformedEventObject
>;

export type LogWithdrawalPerformedEventFilter =
  TypedEventFilter<LogWithdrawalPerformedEvent>;

export interface Core extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    announceAvailabilityVerifierRemovalIntent(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    announceVerifierRemovalIntent(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCancel(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositERC20(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositEth(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositNft(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositNftReclaim(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositReclaim(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    escape(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      assetId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freezeRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAssetInfo(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { assetInfo: string }>;

    getCancellationRequest(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { request: BigNumber }>;

    getDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getEthKey(
      starkKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { ethKey: string }>;

    getFullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    getLastBatchId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { batchId: BigNumber }>;

    getOrderRoot(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { root: BigNumber }>;

    getOrderTreeHeight(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { height: BigNumber }>;

    getQuantizedDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getQuantum(
      presumedAssetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quantum: BigNumber }>;

    getRegisteredAvailabilityVerifiers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRegisteredVerifiers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSequenceNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { seq: BigNumber }>;

    getVaultRoot(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { root: BigNumber }>;

    getVaultTreeHeight(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { height: BigNumber }>;

    getWithdrawalBalance(
      ownerKey: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    isAvailabilityVerifier(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isFrozen(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isOperator(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTokenAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isUserAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isVerifier(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mainAcceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mainCancelNomination(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mainIsGovernor(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mainNominateNewGovernor(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mainRemoveGovernor(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAndDepositERC20(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAndDepositEth(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAvailabilityVerifier(
      arg0: string,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerOperator(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerToken(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerTokenAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerUser(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerUserAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerVerifier(
      arg0: string,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAvailabilityVerifier(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeVerifier(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unFreeze(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterOperator(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterTokenAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterUserAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateState(
      publicInput: BigNumberish[],
      applicationData: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAndMint(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      mintingBlob: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawNft(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawNftTo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  announceAvailabilityVerifierRemovalIntent(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  announceVerifierRemovalIntent(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256,uint256)"(
    starkKey: BigNumberish,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256,uint256,uint256)"(
    starkKey: BigNumberish,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    quantizedAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCancel(
    starkKey: BigNumberish,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositERC20(
    starkKey: BigNumberish,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    quantizedAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositEth(
    starkKey: BigNumberish,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositNft(
    starkKey: BigNumberish,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositNftReclaim(
    starkKey: BigNumberish,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositReclaim(
    starkKey: BigNumberish,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  escape(
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    assetId: BigNumberish,
    quantizedAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freezeRequest(
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fullWithdrawalRequest(
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAssetInfo(
    assetType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCancellationRequest(
    starkKey: BigNumberish,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositBalance(
    starkKey: BigNumberish,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEthKey(starkKey: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getFullWithdrawalRequest(
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLastBatchId(overrides?: CallOverrides): Promise<BigNumber>;

  getOrderRoot(overrides?: CallOverrides): Promise<BigNumber>;

  getOrderTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

  getQuantizedDepositBalance(
    starkKey: BigNumberish,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQuantum(
    presumedAssetType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRegisteredAvailabilityVerifiers(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRegisteredVerifiers(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSequenceNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultRoot(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

  getWithdrawalBalance(
    ownerKey: BigNumberish,
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAvailabilityVerifier(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isFrozen(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isOperator(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTokenAdmin(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isUserAdmin(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isVerifier(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mainAcceptGovernance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mainCancelNomination(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mainIsGovernor(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mainNominateNewGovernor(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mainRemoveGovernor(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAndDepositERC20(
    ethKey: string,
    starkKey: BigNumberish,
    signature: BytesLike,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    quantizedAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAndDepositEth(
    ethKey: string,
    starkKey: BigNumberish,
    signature: BytesLike,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAvailabilityVerifier(
    arg0: string,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerOperator(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerToken(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerTokenAdmin(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerUser(
    arg0: string,
    arg1: BigNumberish,
    arg2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerUserAdmin(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerVerifier(
    arg0: string,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAvailabilityVerifier(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeVerifier(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unFreeze(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unregisterOperator(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unregisterTokenAdmin(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unregisterUserAdmin(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateState(
    publicInput: BigNumberish[],
    applicationData: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    ownerKey: BigNumberish,
    assetType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAndMint(
    ownerKey: BigNumberish,
    assetType: BigNumberish,
    mintingBlob: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawNft(
    ownerKey: BigNumberish,
    assetType: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawNftTo(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTo(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    announceAvailabilityVerifierRemovalIntent(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<void>;

    announceVerifierRemovalIntent(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCancel(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC20(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositEth(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNft(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNftReclaim(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositReclaim(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    escape(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      assetId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    freezeRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssetInfo(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCancellationRequest(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthKey(
      starkKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getFullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getQuantizedDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuantum(
      presumedAssetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredAvailabilityVerifiers(
      overrides?: CallOverrides
    ): Promise<void>;

    getRegisteredVerifiers(overrides?: CallOverrides): Promise<void>;

    getSequenceNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawalBalance(
      ownerKey: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAvailabilityVerifier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isFrozen(overrides?: CallOverrides): Promise<void>;

    isOperator(arg0: string, overrides?: CallOverrides): Promise<void>;

    isTokenAdmin(arg0: string, overrides?: CallOverrides): Promise<void>;

    isUserAdmin(arg0: string, overrides?: CallOverrides): Promise<void>;

    isVerifier(arg0: string, overrides?: CallOverrides): Promise<void>;

    mainAcceptGovernance(overrides?: CallOverrides): Promise<void>;

    mainCancelNomination(overrides?: CallOverrides): Promise<void>;

    mainIsGovernor(arg0: string, overrides?: CallOverrides): Promise<void>;

    mainNominateNewGovernor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mainRemoveGovernor(arg0: string, overrides?: CallOverrides): Promise<void>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAndDepositERC20(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAndDepositEth(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAvailabilityVerifier(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerOperator(arg0: string, overrides?: CallOverrides): Promise<void>;

    registerToken(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    registerTokenAdmin(arg0: string, overrides?: CallOverrides): Promise<void>;

    registerUser(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    registerUserAdmin(arg0: string, overrides?: CallOverrides): Promise<void>;

    registerVerifier(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAvailabilityVerifier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeVerifier(arg0: string, overrides?: CallOverrides): Promise<void>;

    unFreeze(overrides?: CallOverrides): Promise<void>;

    unregisterOperator(arg0: string, overrides?: CallOverrides): Promise<void>;

    unregisterTokenAdmin(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterUserAdmin(arg0: string, overrides?: CallOverrides): Promise<void>;

    updateState(
      publicInput: BigNumberish[],
      applicationData: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAndMint(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      mintingBlob: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNft(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNftTo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogDeposit(address,uint256,uint256,uint256,uint256,uint256)"(
      depositorEthKey?: null,
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositEventFilter;
    LogDeposit(
      depositorEthKey?: null,
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositEventFilter;

    "LogDepositCancel(uint256,uint256,uint256)"(
      starkKey?: null,
      vaultId?: null,
      assetId?: null
    ): LogDepositCancelEventFilter;
    LogDepositCancel(
      starkKey?: null,
      vaultId?: null,
      assetId?: null
    ): LogDepositCancelEventFilter;

    "LogDepositCancelReclaimed(uint256,uint256,uint256,uint256,uint256)"(
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositCancelReclaimedEventFilter;
    LogDepositCancelReclaimed(
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositCancelReclaimedEventFilter;

    "LogDepositNftCancelReclaimed(uint256,uint256,uint256,uint256,uint256)"(
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null
    ): LogDepositNftCancelReclaimedEventFilter;
    LogDepositNftCancelReclaimed(
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null
    ): LogDepositNftCancelReclaimedEventFilter;

    "LogFullWithdrawalRequest(uint256,uint256)"(
      starkKey?: null,
      vaultId?: null
    ): LogFullWithdrawalRequestEventFilter;
    LogFullWithdrawalRequest(
      starkKey?: null,
      vaultId?: null
    ): LogFullWithdrawalRequestEventFilter;

    "LogMintWithdrawalPerformed(uint256,uint256,uint256,uint256,uint256)"(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null,
      assetId?: null
    ): LogMintWithdrawalPerformedEventFilter;
    LogMintWithdrawalPerformed(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null,
      assetId?: null
    ): LogMintWithdrawalPerformedEventFilter;

    "LogMintableWithdrawalAllowed(uint256,uint256,uint256)"(
      ownerKey?: null,
      assetId?: null,
      quantizedAmount?: null
    ): LogMintableWithdrawalAllowedEventFilter;
    LogMintableWithdrawalAllowed(
      ownerKey?: null,
      assetId?: null,
      quantizedAmount?: null
    ): LogMintableWithdrawalAllowedEventFilter;

    "LogNftDeposit(address,uint256,uint256,uint256,uint256,uint256)"(
      depositorEthKey?: null,
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null
    ): LogNftDepositEventFilter;
    LogNftDeposit(
      depositorEthKey?: null,
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null
    ): LogNftDepositEventFilter;

    "LogNftWithdrawalAllowed(uint256,uint256)"(
      ownerKey?: null,
      assetId?: null
    ): LogNftWithdrawalAllowedEventFilter;
    LogNftWithdrawalAllowed(
      ownerKey?: null,
      assetId?: null
    ): LogNftWithdrawalAllowedEventFilter;

    "LogNftWithdrawalPerformed(uint256,uint256,uint256,uint256,address)"(
      ownerKey?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null,
      recipient?: null
    ): LogNftWithdrawalPerformedEventFilter;
    LogNftWithdrawalPerformed(
      ownerKey?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null,
      recipient?: null
    ): LogNftWithdrawalPerformedEventFilter;

    "LogRootUpdate(uint256,uint256,uint256,uint256)"(
      sequenceNumber?: null,
      batchId?: null,
      vaultRoot?: null,
      orderRoot?: null
    ): LogRootUpdateEventFilter;
    LogRootUpdate(
      sequenceNumber?: null,
      batchId?: null,
      vaultRoot?: null,
      orderRoot?: null
    ): LogRootUpdateEventFilter;

    "LogStateTransitionFact(bytes32)"(
      stateTransitionFact?: null
    ): LogStateTransitionFactEventFilter;
    LogStateTransitionFact(
      stateTransitionFact?: null
    ): LogStateTransitionFactEventFilter;

    "LogVaultBalanceChangeApplied(address,uint256,uint256,int256)"(
      ethKey?: null,
      assetId?: null,
      vaultId?: null,
      quantizedAmountChange?: null
    ): LogVaultBalanceChangeAppliedEventFilter;
    LogVaultBalanceChangeApplied(
      ethKey?: null,
      assetId?: null,
      vaultId?: null,
      quantizedAmountChange?: null
    ): LogVaultBalanceChangeAppliedEventFilter;

    "LogWithdrawalAllowed(uint256,uint256,uint256,uint256)"(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogWithdrawalAllowedEventFilter;
    LogWithdrawalAllowed(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogWithdrawalAllowedEventFilter;

    "LogWithdrawalPerformed(uint256,uint256,uint256,uint256,address)"(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null,
      recipient?: null
    ): LogWithdrawalPerformedEventFilter;
    LogWithdrawalPerformed(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null,
      recipient?: null
    ): LogWithdrawalPerformedEventFilter;
  };

  estimateGas: {
    announceAvailabilityVerifierRemovalIntent(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    announceVerifierRemovalIntent(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCancel(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositERC20(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositEth(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositNft(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositNftReclaim(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositReclaim(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    escape(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      assetId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freezeRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAssetInfo(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCancellationRequest(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthKey(
      starkKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getQuantizedDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuantum(
      presumedAssetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredAvailabilityVerifiers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRegisteredVerifiers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSequenceNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawalBalance(
      ownerKey: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAvailabilityVerifier(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isFrozen(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isOperator(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTokenAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isUserAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isVerifier(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mainAcceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mainCancelNomination(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mainIsGovernor(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mainNominateNewGovernor(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mainRemoveGovernor(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAndDepositERC20(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAndDepositEth(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAvailabilityVerifier(
      arg0: string,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerOperator(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerToken(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerTokenAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerUser(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerUserAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerVerifier(
      arg0: string,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAvailabilityVerifier(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeVerifier(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unFreeze(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unregisterOperator(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unregisterTokenAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unregisterUserAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateState(
      publicInput: BigNumberish[],
      applicationData: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAndMint(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      mintingBlob: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawNft(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawNftTo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    announceAvailabilityVerifierRemovalIntent(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    announceVerifierRemovalIntent(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCancel(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositERC20(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositEth(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositNft(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositNftReclaim(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositReclaim(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    escape(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      assetId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freezeRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAssetInfo(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCancellationRequest(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthKey(
      starkKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastBatchId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderTreeHeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuantizedDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuantum(
      presumedAssetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredAvailabilityVerifiers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRegisteredVerifiers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSequenceNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultTreeHeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalBalance(
      ownerKey: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAvailabilityVerifier(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isFrozen(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isOperator(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTokenAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isUserAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isVerifier(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mainAcceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mainCancelNomination(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mainIsGovernor(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mainNominateNewGovernor(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mainRemoveGovernor(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAndDepositERC20(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAndDepositEth(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAvailabilityVerifier(
      arg0: string,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerOperator(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerToken(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerTokenAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerUser(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerUserAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerVerifier(
      arg0: string,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAvailabilityVerifier(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeVerifier(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unFreeze(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unregisterOperator(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unregisterTokenAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unregisterUserAdmin(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateState(
      publicInput: BigNumberish[],
      applicationData: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAndMint(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      mintingBlob: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNft(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNftTo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
