/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface StarkV4Interface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "initialize(bytes)": FunctionFragment;
    "DEPOSIT_CANCEL_DELAY()": FunctionFragment;
    "FREEZE_GRACE_PERIOD()": FunctionFragment;
    "MAIN_GOVERNANCE_INFO_TAG()": FunctionFragment;
    "MAX_FORCED_ACTIONS_REQS_PER_BLOCK()": FunctionFragment;
    "MAX_VERIFIER_COUNT()": FunctionFragment;
    "UNFREEZE_DELAY()": FunctionFragment;
    "VERIFIER_REMOVAL_DELAY()": FunctionFragment;
    "announceAvailabilityVerifierRemovalIntent(address)": FunctionFragment;
    "announceVerifierRemovalIntent(address)": FunctionFragment;
    "getRegisteredAvailabilityVerifiers()": FunctionFragment;
    "getRegisteredVerifiers()": FunctionFragment;
    "isAvailabilityVerifier(address)": FunctionFragment;
    "isFrozen()": FunctionFragment;
    "isVerifier(address)": FunctionFragment;
    "mainAcceptGovernance()": FunctionFragment;
    "mainCancelNomination()": FunctionFragment;
    "mainIsGovernor(address)": FunctionFragment;
    "mainNominateNewGovernor(address)": FunctionFragment;
    "mainRemoveGovernor(address)": FunctionFragment;
    "registerAvailabilityVerifier(address,string)": FunctionFragment;
    "registerVerifier(address,string)": FunctionFragment;
    "removeAvailabilityVerifier(address)": FunctionFragment;
    "removeVerifier(address)": FunctionFragment;
    "unFreeze()": FunctionFragment;
    "defaultVaultWithdrawalLock()": FunctionFragment;
    "deposit(uint256,uint256,uint256)": FunctionFragment;
    "deposit(uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositCancel(uint256,uint256,uint256)": FunctionFragment;
    "depositERC20(uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositEth(uint256,uint256,uint256)": FunctionFragment;
    "depositNft(uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositNftReclaim(uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositReclaim(uint256,uint256,uint256)": FunctionFragment;
    "getActionCount()": FunctionFragment;
    "getActionHashByIndex(uint256)": FunctionFragment;
    "getAssetInfo(uint256)": FunctionFragment;
    "getCancellationRequest(uint256,uint256,uint256)": FunctionFragment;
    "getDepositBalance(uint256,uint256,uint256)": FunctionFragment;
    "getEthKey(uint256)": FunctionFragment;
    "getFullWithdrawalRequest(uint256,uint256)": FunctionFragment;
    "getQuantizedDepositBalance(uint256,uint256,uint256)": FunctionFragment;
    "getQuantum(uint256)": FunctionFragment;
    "getWithdrawalBalance(uint256,uint256)": FunctionFragment;
    "isAssetRegistered(uint256)": FunctionFragment;
    "isTokenAdmin(address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "orderRegistryAddress()": FunctionFragment;
    "registerAndDepositERC20(address,uint256,bytes,uint256,uint256,uint256)": FunctionFragment;
    "registerAndDepositEth(address,uint256,bytes,uint256,uint256)": FunctionFragment;
    "registerEthAddress(address,uint256,bytes)": FunctionFragment;
    "registerSender(uint256,bytes)": FunctionFragment;
    "registerToken(uint256,bytes)": FunctionFragment;
    "registerToken(uint256,bytes,uint256)": FunctionFragment;
    "registerTokenAdmin(address)": FunctionFragment;
    "unregisterTokenAdmin(address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawAndMint(uint256,uint256,bytes)": FunctionFragment;
    "withdrawNft(uint256,uint256,uint256)": FunctionFragment;
    "STARKEX_MAX_DEFAULT_VAULT_LOCK()": FunctionFragment;
    "escape(uint256,uint256,uint256,uint256)": FunctionFragment;
    "getLastBatchId()": FunctionFragment;
    "getOrderRoot()": FunctionFragment;
    "getOrderTreeHeight()": FunctionFragment;
    "getSequenceNumber()": FunctionFragment;
    "getVaultRoot()": FunctionFragment;
    "getVaultTreeHeight()": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "registerOperator(address)": FunctionFragment;
    "unregisterOperator(address)": FunctionFragment;
    "updateState(uint256[],uint256[])": FunctionFragment;
    "freezeRequest(uint256,uint256)": FunctionFragment;
    "fullWithdrawalRequest(uint256,uint256)": FunctionFragment;
    "depositERC20ToVault(uint256,uint256,uint256)": FunctionFragment;
    "depositEthToVault(uint256,uint256)": FunctionFragment;
    "getQuantizedVaultBalance(address,uint256,uint256)": FunctionFragment;
    "getVaultBalance(address,uint256,uint256)": FunctionFragment;
    "getVaultWithdrawalLock(address,uint256,uint256)": FunctionFragment;
    "isStrictVaultBalancePolicy()": FunctionFragment;
    "isVaultLocked(address,uint256,uint256)": FunctionFragment;
    "lockVault(uint256,uint256,uint256)": FunctionFragment;
    "setDefaultVaultWithdrawalLock(uint256)": FunctionFragment;
    "withdrawFromVault(uint256,uint256,uint256)": FunctionFragment;
    "updateImplementationActivationTime(address,bytes,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "VERSION"
      | "initialize"
      | "DEPOSIT_CANCEL_DELAY"
      | "FREEZE_GRACE_PERIOD"
      | "MAIN_GOVERNANCE_INFO_TAG"
      | "MAX_FORCED_ACTIONS_REQS_PER_BLOCK"
      | "MAX_VERIFIER_COUNT"
      | "UNFREEZE_DELAY"
      | "VERIFIER_REMOVAL_DELAY"
      | "announceAvailabilityVerifierRemovalIntent"
      | "announceVerifierRemovalIntent"
      | "getRegisteredAvailabilityVerifiers"
      | "getRegisteredVerifiers"
      | "isAvailabilityVerifier"
      | "isFrozen"
      | "isVerifier"
      | "mainAcceptGovernance"
      | "mainCancelNomination"
      | "mainIsGovernor"
      | "mainNominateNewGovernor"
      | "mainRemoveGovernor"
      | "registerAvailabilityVerifier"
      | "registerVerifier"
      | "removeAvailabilityVerifier"
      | "removeVerifier"
      | "unFreeze"
      | "defaultVaultWithdrawalLock"
      | "deposit(uint256,uint256,uint256)"
      | "deposit(uint256,uint256,uint256,uint256)"
      | "depositCancel"
      | "depositERC20"
      | "depositEth"
      | "depositNft"
      | "depositNftReclaim"
      | "depositReclaim"
      | "getActionCount"
      | "getActionHashByIndex"
      | "getAssetInfo"
      | "getCancellationRequest"
      | "getDepositBalance"
      | "getEthKey"
      | "getFullWithdrawalRequest"
      | "getQuantizedDepositBalance"
      | "getQuantum"
      | "getWithdrawalBalance"
      | "isAssetRegistered"
      | "isTokenAdmin"
      | "onERC721Received"
      | "orderRegistryAddress"
      | "registerAndDepositERC20"
      | "registerAndDepositEth"
      | "registerEthAddress"
      | "registerSender"
      | "registerToken(uint256,bytes)"
      | "registerToken(uint256,bytes,uint256)"
      | "registerTokenAdmin"
      | "unregisterTokenAdmin"
      | "withdraw"
      | "withdrawAndMint"
      | "withdrawNft"
      | "STARKEX_MAX_DEFAULT_VAULT_LOCK"
      | "escape"
      | "getLastBatchId"
      | "getOrderRoot"
      | "getOrderTreeHeight"
      | "getSequenceNumber"
      | "getVaultRoot"
      | "getVaultTreeHeight"
      | "isOperator"
      | "registerOperator"
      | "unregisterOperator"
      | "updateState"
      | "freezeRequest"
      | "fullWithdrawalRequest"
      | "depositERC20ToVault"
      | "depositEthToVault"
      | "getQuantizedVaultBalance"
      | "getVaultBalance"
      | "getVaultWithdrawalLock"
      | "isStrictVaultBalancePolicy"
      | "isVaultLocked"
      | "lockVault"
      | "setDefaultVaultWithdrawalLock"
      | "withdrawFromVault"
      | "updateImplementationActivationTime"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "DEPOSIT_CANCEL_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FREEZE_GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAIN_GOVERNANCE_INFO_TAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FORCED_ACTIONS_REQS_PER_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VERIFIER_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNFREEZE_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_REMOVAL_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "announceAvailabilityVerifierRemovalIntent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "announceVerifierRemovalIntent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredAvailabilityVerifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredVerifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailabilityVerifier",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isFrozen", values?: undefined): string;
  encodeFunctionData(functionFragment: "isVerifier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mainAcceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainCancelNomination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainIsGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mainNominateNewGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mainRemoveGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAvailabilityVerifier",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVerifier",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAvailabilityVerifier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unFreeze", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defaultVaultWithdrawalLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCancel",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNft",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNftReclaim",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositReclaim",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActionHashByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCancellationRequest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositBalance",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFullWithdrawalRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuantizedDepositBalance",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuantum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalBalance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetRegistered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orderRegistryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndDepositERC20",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndDepositEth",
    values: [string, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEthAddress",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSender",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken(uint256,bytes)",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken(uint256,bytes,uint256)",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTokenAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterTokenAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndMint",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNft",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "STARKEX_MAX_DEFAULT_VAULT_LOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escape",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderTreeHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSequenceNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultTreeHeight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fullWithdrawalRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20ToVault",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEthToVault",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuantizedVaultBalance",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultBalance",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultWithdrawalLock",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isStrictVaultBalancePolicy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultLocked",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockVault",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultVaultWithdrawalLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromVault",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateImplementationActivationTime",
    values: [string, BytesLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEPOSIT_CANCEL_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FREEZE_GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAIN_GOVERNANCE_INFO_TAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FORCED_ACTIONS_REQS_PER_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VERIFIER_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNFREEZE_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_REMOVAL_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceAvailabilityVerifierRemovalIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceVerifierRemovalIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredAvailabilityVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isVerifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mainAcceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainCancelNomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainIsGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainNominateNewGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainRemoveGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unFreeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultVaultWithdrawalLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositNftReclaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositReclaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionHashByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCancellationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEthKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFullWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuantizedDepositBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuantum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAssetRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderRegistryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndDepositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndDepositEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEthAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken(uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken(uint256,bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STARKEX_MAX_DEFAULT_VAULT_LOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escape", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderTreeHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSequenceNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultTreeHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fullWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20ToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositEthToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuantizedVaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultWithdrawalLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStrictVaultBalancePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultVaultWithdrawalLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateImplementationActivationTime",
    data: BytesLike
  ): Result;

  events: {
    "LogFrozen()": EventFragment;
    "LogNewGovernorAccepted(address)": EventFragment;
    "LogNominatedGovernor(address)": EventFragment;
    "LogNominationCancelled()": EventFragment;
    "LogRegistered(address,string)": EventFragment;
    "LogRemovalIntent(address,string)": EventFragment;
    "LogRemoved(address,string)": EventFragment;
    "LogRemovedGovernor(address)": EventFragment;
    "LogUnFrozen()": EventFragment;
    "LogDeposit(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogDepositCancel(uint256,uint256,uint256)": EventFragment;
    "LogDepositCancelReclaimed(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogDepositNftCancelReclaimed(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogMintWithdrawalPerformed(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogMintableWithdrawalAllowed(uint256,uint256,uint256)": EventFragment;
    "LogNftDeposit(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogNftWithdrawalAllowed(uint256,uint256)": EventFragment;
    "LogNftWithdrawalPerformed(uint256,uint256,uint256,uint256,address)": EventFragment;
    "LogTokenAdminAdded(address)": EventFragment;
    "LogTokenAdminRemoved(address)": EventFragment;
    "LogTokenRegistered(uint256,bytes,uint256)": EventFragment;
    "LogUserRegistered(address,uint256,address)": EventFragment;
    "LogWithdrawalAllowed(uint256,uint256,uint256,uint256)": EventFragment;
    "LogWithdrawalPerformed(uint256,uint256,uint256,uint256,address)": EventFragment;
    "LogOperatorAdded(address)": EventFragment;
    "LogOperatorRemoved(address)": EventFragment;
    "LogRootUpdate(uint256,uint256,uint256,uint256)": EventFragment;
    "LogStateTransitionFact(bytes32)": EventFragment;
    "LogVaultBalanceChangeApplied(address,uint256,uint256,int256)": EventFragment;
    "LogFullWithdrawalRequest(uint256,uint256)": EventFragment;
    "LogDefaultVaultWithdrawalLockSet(uint256)": EventFragment;
    "LogDepositToVault(address,uint256,uint256,uint256,uint256)": EventFragment;
    "LogVaultWithdrawalLockSet(address,uint256,uint256,uint256)": EventFragment;
    "LogWithdrawalFromVault(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ImplementationActivationRescheduled(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNewGovernorAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNominatedGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNominationCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemovalIntent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemovedGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUnFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepositCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepositCancelReclaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogDepositNftCancelReclaimed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMintWithdrawalPerformed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogMintableWithdrawalAllowed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNftDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNftWithdrawalAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNftWithdrawalPerformed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokenAdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokenAdminRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokenRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUserRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawalAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawalPerformed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOperatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOperatorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRootUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogStateTransitionFact"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogVaultBalanceChangeApplied"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFullWithdrawalRequest"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogDefaultVaultWithdrawalLockSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepositToVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogVaultWithdrawalLockSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawalFromVault"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ImplementationActivationRescheduled"
  ): EventFragment;
}

export interface LogFrozenEventObject {}
export type LogFrozenEvent = TypedEvent<[], LogFrozenEventObject>;

export type LogFrozenEventFilter = TypedEventFilter<LogFrozenEvent>;

export interface LogNewGovernorAcceptedEventObject {
  acceptedGovernor: string;
}
export type LogNewGovernorAcceptedEvent = TypedEvent<
  [string],
  LogNewGovernorAcceptedEventObject
>;

export type LogNewGovernorAcceptedEventFilter =
  TypedEventFilter<LogNewGovernorAcceptedEvent>;

export interface LogNominatedGovernorEventObject {
  nominatedGovernor: string;
}
export type LogNominatedGovernorEvent = TypedEvent<
  [string],
  LogNominatedGovernorEventObject
>;

export type LogNominatedGovernorEventFilter =
  TypedEventFilter<LogNominatedGovernorEvent>;

export interface LogNominationCancelledEventObject {}
export type LogNominationCancelledEvent = TypedEvent<
  [],
  LogNominationCancelledEventObject
>;

export type LogNominationCancelledEventFilter =
  TypedEventFilter<LogNominationCancelledEvent>;

export interface LogRegisteredEventObject {
  entry: string;
  entryId: string;
}
export type LogRegisteredEvent = TypedEvent<
  [string, string],
  LogRegisteredEventObject
>;

export type LogRegisteredEventFilter = TypedEventFilter<LogRegisteredEvent>;

export interface LogRemovalIntentEventObject {
  entry: string;
  entryId: string;
}
export type LogRemovalIntentEvent = TypedEvent<
  [string, string],
  LogRemovalIntentEventObject
>;

export type LogRemovalIntentEventFilter =
  TypedEventFilter<LogRemovalIntentEvent>;

export interface LogRemovedEventObject {
  entry: string;
  entryId: string;
}
export type LogRemovedEvent = TypedEvent<
  [string, string],
  LogRemovedEventObject
>;

export type LogRemovedEventFilter = TypedEventFilter<LogRemovedEvent>;

export interface LogRemovedGovernorEventObject {
  removedGovernor: string;
}
export type LogRemovedGovernorEvent = TypedEvent<
  [string],
  LogRemovedGovernorEventObject
>;

export type LogRemovedGovernorEventFilter =
  TypedEventFilter<LogRemovedGovernorEvent>;

export interface LogUnFrozenEventObject {}
export type LogUnFrozenEvent = TypedEvent<[], LogUnFrozenEventObject>;

export type LogUnFrozenEventFilter = TypedEventFilter<LogUnFrozenEvent>;

export interface LogDepositEventObject {
  depositorEthKey: string;
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogDepositEventObject
>;

export type LogDepositEventFilter = TypedEventFilter<LogDepositEvent>;

export interface LogDepositCancelEventObject {
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetId: BigNumber;
}
export type LogDepositCancelEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogDepositCancelEventObject
>;

export type LogDepositCancelEventFilter =
  TypedEventFilter<LogDepositCancelEvent>;

export interface LogDepositCancelReclaimedEventObject {
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogDepositCancelReclaimedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogDepositCancelReclaimedEventObject
>;

export type LogDepositCancelReclaimedEventFilter =
  TypedEventFilter<LogDepositCancelReclaimedEvent>;

export interface LogDepositNftCancelReclaimedEventObject {
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetType: BigNumber;
  tokenId: BigNumber;
  assetId: BigNumber;
}
export type LogDepositNftCancelReclaimedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogDepositNftCancelReclaimedEventObject
>;

export type LogDepositNftCancelReclaimedEventFilter =
  TypedEventFilter<LogDepositNftCancelReclaimedEvent>;

export interface LogMintWithdrawalPerformedEventObject {
  ownerKey: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
  assetId: BigNumber;
}
export type LogMintWithdrawalPerformedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogMintWithdrawalPerformedEventObject
>;

export type LogMintWithdrawalPerformedEventFilter =
  TypedEventFilter<LogMintWithdrawalPerformedEvent>;

export interface LogMintableWithdrawalAllowedEventObject {
  ownerKey: BigNumber;
  assetId: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogMintableWithdrawalAllowedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogMintableWithdrawalAllowedEventObject
>;

export type LogMintableWithdrawalAllowedEventFilter =
  TypedEventFilter<LogMintableWithdrawalAllowedEvent>;

export interface LogNftDepositEventObject {
  depositorEthKey: string;
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetType: BigNumber;
  tokenId: BigNumber;
  assetId: BigNumber;
}
export type LogNftDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogNftDepositEventObject
>;

export type LogNftDepositEventFilter = TypedEventFilter<LogNftDepositEvent>;

export interface LogNftWithdrawalAllowedEventObject {
  ownerKey: BigNumber;
  assetId: BigNumber;
}
export type LogNftWithdrawalAllowedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogNftWithdrawalAllowedEventObject
>;

export type LogNftWithdrawalAllowedEventFilter =
  TypedEventFilter<LogNftWithdrawalAllowedEvent>;

export interface LogNftWithdrawalPerformedEventObject {
  ownerKey: BigNumber;
  assetType: BigNumber;
  tokenId: BigNumber;
  assetId: BigNumber;
  recipient: string;
}
export type LogNftWithdrawalPerformedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  LogNftWithdrawalPerformedEventObject
>;

export type LogNftWithdrawalPerformedEventFilter =
  TypedEventFilter<LogNftWithdrawalPerformedEvent>;

export interface LogTokenAdminAddedEventObject {
  tokenAdmin: string;
}
export type LogTokenAdminAddedEvent = TypedEvent<
  [string],
  LogTokenAdminAddedEventObject
>;

export type LogTokenAdminAddedEventFilter =
  TypedEventFilter<LogTokenAdminAddedEvent>;

export interface LogTokenAdminRemovedEventObject {
  tokenAdmin: string;
}
export type LogTokenAdminRemovedEvent = TypedEvent<
  [string],
  LogTokenAdminRemovedEventObject
>;

export type LogTokenAdminRemovedEventFilter =
  TypedEventFilter<LogTokenAdminRemovedEvent>;

export interface LogTokenRegisteredEventObject {
  assetType: BigNumber;
  assetInfo: string;
  quantum: BigNumber;
}
export type LogTokenRegisteredEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  LogTokenRegisteredEventObject
>;

export type LogTokenRegisteredEventFilter =
  TypedEventFilter<LogTokenRegisteredEvent>;

export interface LogUserRegisteredEventObject {
  ethKey: string;
  starkKey: BigNumber;
  sender: string;
}
export type LogUserRegisteredEvent = TypedEvent<
  [string, BigNumber, string],
  LogUserRegisteredEventObject
>;

export type LogUserRegisteredEventFilter =
  TypedEventFilter<LogUserRegisteredEvent>;

export interface LogWithdrawalAllowedEventObject {
  ownerKey: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogWithdrawalAllowedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LogWithdrawalAllowedEventObject
>;

export type LogWithdrawalAllowedEventFilter =
  TypedEventFilter<LogWithdrawalAllowedEvent>;

export interface LogWithdrawalPerformedEventObject {
  ownerKey: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
  recipient: string;
}
export type LogWithdrawalPerformedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  LogWithdrawalPerformedEventObject
>;

export type LogWithdrawalPerformedEventFilter =
  TypedEventFilter<LogWithdrawalPerformedEvent>;

export interface LogOperatorAddedEventObject {
  operator: string;
}
export type LogOperatorAddedEvent = TypedEvent<
  [string],
  LogOperatorAddedEventObject
>;

export type LogOperatorAddedEventFilter =
  TypedEventFilter<LogOperatorAddedEvent>;

export interface LogOperatorRemovedEventObject {
  operator: string;
}
export type LogOperatorRemovedEvent = TypedEvent<
  [string],
  LogOperatorRemovedEventObject
>;

export type LogOperatorRemovedEventFilter =
  TypedEventFilter<LogOperatorRemovedEvent>;

export interface LogRootUpdateEventObject {
  sequenceNumber: BigNumber;
  batchId: BigNumber;
  vaultRoot: BigNumber;
  orderRoot: BigNumber;
}
export type LogRootUpdateEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LogRootUpdateEventObject
>;

export type LogRootUpdateEventFilter = TypedEventFilter<LogRootUpdateEvent>;

export interface LogStateTransitionFactEventObject {
  stateTransitionFact: string;
}
export type LogStateTransitionFactEvent = TypedEvent<
  [string],
  LogStateTransitionFactEventObject
>;

export type LogStateTransitionFactEventFilter =
  TypedEventFilter<LogStateTransitionFactEvent>;

export interface LogVaultBalanceChangeAppliedEventObject {
  ethKey: string;
  assetId: BigNumber;
  vaultId: BigNumber;
  quantizedAmountChange: BigNumber;
}
export type LogVaultBalanceChangeAppliedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LogVaultBalanceChangeAppliedEventObject
>;

export type LogVaultBalanceChangeAppliedEventFilter =
  TypedEventFilter<LogVaultBalanceChangeAppliedEvent>;

export interface LogFullWithdrawalRequestEventObject {
  starkKey: BigNumber;
  vaultId: BigNumber;
}
export type LogFullWithdrawalRequestEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogFullWithdrawalRequestEventObject
>;

export type LogFullWithdrawalRequestEventFilter =
  TypedEventFilter<LogFullWithdrawalRequestEvent>;

export interface LogDefaultVaultWithdrawalLockSetEventObject {
  newDefaultLockTime: BigNumber;
}
export type LogDefaultVaultWithdrawalLockSetEvent = TypedEvent<
  [BigNumber],
  LogDefaultVaultWithdrawalLockSetEventObject
>;

export type LogDefaultVaultWithdrawalLockSetEventFilter =
  TypedEventFilter<LogDefaultVaultWithdrawalLockSetEvent>;

export interface LogDepositToVaultEventObject {
  ethKey: string;
  assetId: BigNumber;
  vaultId: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogDepositToVaultEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  LogDepositToVaultEventObject
>;

export type LogDepositToVaultEventFilter =
  TypedEventFilter<LogDepositToVaultEvent>;

export interface LogVaultWithdrawalLockSetEventObject {
  ethKey: string;
  assetId: BigNumber;
  vaultId: BigNumber;
  timeRelease: BigNumber;
}
export type LogVaultWithdrawalLockSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LogVaultWithdrawalLockSetEventObject
>;

export type LogVaultWithdrawalLockSetEventFilter =
  TypedEventFilter<LogVaultWithdrawalLockSetEvent>;

export interface LogWithdrawalFromVaultEventObject {
  ethKey: string;
  assetId: BigNumber;
  vaultId: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogWithdrawalFromVaultEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  LogWithdrawalFromVaultEventObject
>;

export type LogWithdrawalFromVaultEventFilter =
  TypedEventFilter<LogWithdrawalFromVaultEvent>;

export interface ImplementationActivationRescheduledEventObject {
  implementation: string;
  updatedActivationTime: BigNumber;
}
export type ImplementationActivationRescheduledEvent = TypedEvent<
  [string, BigNumber],
  ImplementationActivationRescheduledEventObject
>;

export type ImplementationActivationRescheduledEventFilter =
  TypedEventFilter<ImplementationActivationRescheduledEvent>;

export interface StarkV4 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StarkV4Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    DEPOSIT_CANCEL_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    FREEZE_GRACE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAIN_GOVERNANCE_INFO_TAG(overrides?: CallOverrides): Promise<[string]>;

    MAX_FORCED_ACTIONS_REQS_PER_BLOCK(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_VERIFIER_COUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNFREEZE_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERIFIER_REMOVAL_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    announceAvailabilityVerifierRemovalIntent(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    announceVerifierRemovalIntent(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getRegisteredAvailabilityVerifiers(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _verifers: string[] }>;

    getRegisteredVerifiers(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _verifers: string[] }>;

    isAvailabilityVerifier(
      verifierAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    isVerifier(
      verifierAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mainAcceptGovernance(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mainCancelNomination(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mainIsGovernor(
      testGovernor: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mainNominateNewGovernor(
      newGovernor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mainRemoveGovernor(
      governorForRemoval: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerAvailabilityVerifier(
      verifier: string,
      identifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerVerifier(
      verifier: string,
      identifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeAvailabilityVerifier(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeVerifier(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unFreeze(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    defaultVaultWithdrawalLock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "deposit(uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositCancel(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositERC20(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositEth(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositNft(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositNftReclaim(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositReclaim(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getActionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getActionHashByIndex(
      actionIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAssetInfo(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { assetInfo: string }>;

    getCancellationRequest(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { request: BigNumber }>;

    getDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getEthKey(
      ownerKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    getQuantizedDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getQuantum(
      presumedAssetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quantum: BigNumber }>;

    getWithdrawalBalance(
      ownerKey: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    isAssetRegistered(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenAdmin(
      testedAdmin: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    orderRegistryAddress(overrides?: CallOverrides): Promise<[string]>;

    registerAndDepositERC20(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerAndDepositEth(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerEthAddress(
      ethKey: string,
      starkKey: BigNumberish,
      starkSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerSender(
      starkKey: BigNumberish,
      starkSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "registerToken(uint256,bytes)"(
      assetType: BigNumberish,
      assetInfo: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "registerToken(uint256,bytes,uint256)"(
      assetType: BigNumberish,
      assetInfo: BytesLike,
      quantum: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerTokenAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unregisterTokenAdmin(
      oldAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAndMint(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      mintingBlob: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawNft(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    STARKEX_MAX_DEFAULT_VAULT_LOCK(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    escape(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      assetId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getLastBatchId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { batchId: BigNumber }>;

    getOrderRoot(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { root: BigNumber }>;

    getOrderTreeHeight(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { height: BigNumber }>;

    getSequenceNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { seq: BigNumber }>;

    getVaultRoot(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { root: BigNumber }>;

    getVaultTreeHeight(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { height: BigNumber }>;

    isOperator(
      testedOperator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerOperator(
      newOperator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unregisterOperator(
      removedOperator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateState(
      publicInput: BigNumberish[],
      applicationData: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    freezeRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositERC20ToVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositEthToVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getQuantizedVaultBalance(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultBalance(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultWithdrawalLock(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isStrictVaultBalancePolicy(overrides?: CallOverrides): Promise<[boolean]>;

    isVaultLocked(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      lockTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDefaultVaultWithdrawalLock(
      newDefaultTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawFromVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateImplementationActivationTime(
      implementation: string,
      data: BytesLike,
      finalize: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  initialize(
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  DEPOSIT_CANCEL_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  FREEZE_GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  MAIN_GOVERNANCE_INFO_TAG(overrides?: CallOverrides): Promise<string>;

  MAX_FORCED_ACTIONS_REQS_PER_BLOCK(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MAX_VERIFIER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  UNFREEZE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  VERIFIER_REMOVAL_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  announceAvailabilityVerifierRemovalIntent(
    verifier: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  announceVerifierRemovalIntent(
    verifier: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getRegisteredAvailabilityVerifiers(
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRegisteredVerifiers(overrides?: CallOverrides): Promise<string[]>;

  isAvailabilityVerifier(
    verifierAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFrozen(overrides?: CallOverrides): Promise<boolean>;

  isVerifier(
    verifierAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mainAcceptGovernance(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mainCancelNomination(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mainIsGovernor(
    testGovernor: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mainNominateNewGovernor(
    newGovernor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mainRemoveGovernor(
    governorForRemoval: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerAvailabilityVerifier(
    verifier: string,
    identifier: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerVerifier(
    verifier: string,
    identifier: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeAvailabilityVerifier(
    verifier: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeVerifier(
    verifier: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unFreeze(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  defaultVaultWithdrawalLock(overrides?: CallOverrides): Promise<BigNumber>;

  "deposit(uint256,uint256,uint256)"(
    starkKey: BigNumberish,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256,uint256,uint256)"(
    starkKey: BigNumberish,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    quantizedAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositCancel(
    starkKey: BigNumberish,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositERC20(
    starkKey: BigNumberish,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    quantizedAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositEth(
    starkKey: BigNumberish,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositNft(
    starkKey: BigNumberish,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositNftReclaim(
    starkKey: BigNumberish,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositReclaim(
    starkKey: BigNumberish,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getActionCount(overrides?: CallOverrides): Promise<BigNumber>;

  getActionHashByIndex(
    actionIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAssetInfo(
    assetType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCancellationRequest(
    starkKey: BigNumberish,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositBalance(
    starkKey: BigNumberish,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEthKey(ownerKey: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getFullWithdrawalRequest(
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQuantizedDepositBalance(
    starkKey: BigNumberish,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQuantum(
    presumedAssetType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdrawalBalance(
    ownerKey: BigNumberish,
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAssetRegistered(
    assetType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenAdmin(
    testedAdmin: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  orderRegistryAddress(overrides?: CallOverrides): Promise<string>;

  registerAndDepositERC20(
    ethKey: string,
    starkKey: BigNumberish,
    signature: BytesLike,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    quantizedAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerAndDepositEth(
    ethKey: string,
    starkKey: BigNumberish,
    signature: BytesLike,
    assetType: BigNumberish,
    vaultId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerEthAddress(
    ethKey: string,
    starkKey: BigNumberish,
    starkSignature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerSender(
    starkKey: BigNumberish,
    starkSignature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "registerToken(uint256,bytes)"(
    assetType: BigNumberish,
    assetInfo: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "registerToken(uint256,bytes,uint256)"(
    assetType: BigNumberish,
    assetInfo: BytesLike,
    quantum: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerTokenAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unregisterTokenAdmin(
    oldAdmin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    ownerKey: BigNumberish,
    assetType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAndMint(
    ownerKey: BigNumberish,
    assetType: BigNumberish,
    mintingBlob: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawNft(
    ownerKey: BigNumberish,
    assetType: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  STARKEX_MAX_DEFAULT_VAULT_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  escape(
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    assetId: BigNumberish,
    quantizedAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getLastBatchId(overrides?: CallOverrides): Promise<BigNumber>;

  getOrderRoot(overrides?: CallOverrides): Promise<BigNumber>;

  getOrderTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

  getSequenceNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultRoot(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

  isOperator(
    testedOperator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerOperator(
    newOperator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unregisterOperator(
    removedOperator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateState(
    publicInput: BigNumberish[],
    applicationData: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  freezeRequest(
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fullWithdrawalRequest(
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositERC20ToVault(
    assetId: BigNumberish,
    vaultId: BigNumberish,
    quantizedAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositEthToVault(
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getQuantizedVaultBalance(
    ethKey: string,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultBalance(
    ethKey: string,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultWithdrawalLock(
    ethKey: string,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isStrictVaultBalancePolicy(overrides?: CallOverrides): Promise<boolean>;

  isVaultLocked(
    ethKey: string,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockVault(
    assetId: BigNumberish,
    vaultId: BigNumberish,
    lockTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDefaultVaultWithdrawalLock(
    newDefaultTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawFromVault(
    assetId: BigNumberish,
    vaultId: BigNumberish,
    quantizedAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateImplementationActivationTime(
    implementation: string,
    data: BytesLike,
    finalize: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    initialize(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    DEPOSIT_CANCEL_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    FREEZE_GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MAIN_GOVERNANCE_INFO_TAG(overrides?: CallOverrides): Promise<string>;

    MAX_FORCED_ACTIONS_REQS_PER_BLOCK(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_VERIFIER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    UNFREEZE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    VERIFIER_REMOVAL_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    announceAvailabilityVerifierRemovalIntent(
      verifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    announceVerifierRemovalIntent(
      verifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getRegisteredAvailabilityVerifiers(
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRegisteredVerifiers(overrides?: CallOverrides): Promise<string[]>;

    isAvailabilityVerifier(
      verifierAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFrozen(overrides?: CallOverrides): Promise<boolean>;

    isVerifier(
      verifierAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mainAcceptGovernance(overrides?: CallOverrides): Promise<void>;

    mainCancelNomination(overrides?: CallOverrides): Promise<void>;

    mainIsGovernor(
      testGovernor: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mainNominateNewGovernor(
      newGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mainRemoveGovernor(
      governorForRemoval: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAvailabilityVerifier(
      verifier: string,
      identifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerVerifier(
      verifier: string,
      identifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAvailabilityVerifier(
      verifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeVerifier(verifier: string, overrides?: CallOverrides): Promise<void>;

    unFreeze(overrides?: CallOverrides): Promise<void>;

    defaultVaultWithdrawalLock(overrides?: CallOverrides): Promise<BigNumber>;

    "deposit(uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCancel(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC20(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositEth(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNft(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNftReclaim(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositReclaim(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getActionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getActionHashByIndex(
      actionIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetInfo(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCancellationRequest(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthKey(
      ownerKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getFullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuantizedDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuantum(
      presumedAssetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalBalance(
      ownerKey: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAssetRegistered(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenAdmin(
      testedAdmin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    orderRegistryAddress(overrides?: CallOverrides): Promise<string>;

    registerAndDepositERC20(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAndDepositEth(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerEthAddress(
      ethKey: string,
      starkKey: BigNumberish,
      starkSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSender(
      starkKey: BigNumberish,
      starkSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerToken(uint256,bytes)"(
      assetType: BigNumberish,
      assetInfo: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerToken(uint256,bytes,uint256)"(
      assetType: BigNumberish,
      assetInfo: BytesLike,
      quantum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerTokenAdmin(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterTokenAdmin(
      oldAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAndMint(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      mintingBlob: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNft(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    STARKEX_MAX_DEFAULT_VAULT_LOCK(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escape(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      assetId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getLastBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getSequenceNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      testedOperator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerOperator(
      newOperator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterOperator(
      removedOperator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateState(
      publicInput: BigNumberish[],
      applicationData: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    freezeRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC20ToVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositEthToVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getQuantizedVaultBalance(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultBalance(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultWithdrawalLock(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStrictVaultBalancePolicy(overrides?: CallOverrides): Promise<boolean>;

    isVaultLocked(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      lockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultVaultWithdrawalLock(
      newDefaultTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateImplementationActivationTime(
      implementation: string,
      data: BytesLike,
      finalize: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogFrozen()"(): LogFrozenEventFilter;
    LogFrozen(): LogFrozenEventFilter;

    "LogNewGovernorAccepted(address)"(
      acceptedGovernor?: null
    ): LogNewGovernorAcceptedEventFilter;
    LogNewGovernorAccepted(
      acceptedGovernor?: null
    ): LogNewGovernorAcceptedEventFilter;

    "LogNominatedGovernor(address)"(
      nominatedGovernor?: null
    ): LogNominatedGovernorEventFilter;
    LogNominatedGovernor(
      nominatedGovernor?: null
    ): LogNominatedGovernorEventFilter;

    "LogNominationCancelled()"(): LogNominationCancelledEventFilter;
    LogNominationCancelled(): LogNominationCancelledEventFilter;

    "LogRegistered(address,string)"(
      entry?: null,
      entryId?: null
    ): LogRegisteredEventFilter;
    LogRegistered(entry?: null, entryId?: null): LogRegisteredEventFilter;

    "LogRemovalIntent(address,string)"(
      entry?: null,
      entryId?: null
    ): LogRemovalIntentEventFilter;
    LogRemovalIntent(entry?: null, entryId?: null): LogRemovalIntentEventFilter;

    "LogRemoved(address,string)"(
      entry?: null,
      entryId?: null
    ): LogRemovedEventFilter;
    LogRemoved(entry?: null, entryId?: null): LogRemovedEventFilter;

    "LogRemovedGovernor(address)"(
      removedGovernor?: null
    ): LogRemovedGovernorEventFilter;
    LogRemovedGovernor(removedGovernor?: null): LogRemovedGovernorEventFilter;

    "LogUnFrozen()"(): LogUnFrozenEventFilter;
    LogUnFrozen(): LogUnFrozenEventFilter;

    "LogDeposit(address,uint256,uint256,uint256,uint256,uint256)"(
      depositorEthKey?: null,
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositEventFilter;
    LogDeposit(
      depositorEthKey?: null,
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositEventFilter;

    "LogDepositCancel(uint256,uint256,uint256)"(
      starkKey?: null,
      vaultId?: null,
      assetId?: null
    ): LogDepositCancelEventFilter;
    LogDepositCancel(
      starkKey?: null,
      vaultId?: null,
      assetId?: null
    ): LogDepositCancelEventFilter;

    "LogDepositCancelReclaimed(uint256,uint256,uint256,uint256,uint256)"(
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositCancelReclaimedEventFilter;
    LogDepositCancelReclaimed(
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositCancelReclaimedEventFilter;

    "LogDepositNftCancelReclaimed(uint256,uint256,uint256,uint256,uint256)"(
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null
    ): LogDepositNftCancelReclaimedEventFilter;
    LogDepositNftCancelReclaimed(
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null
    ): LogDepositNftCancelReclaimedEventFilter;

    "LogMintWithdrawalPerformed(uint256,uint256,uint256,uint256,uint256)"(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null,
      assetId?: null
    ): LogMintWithdrawalPerformedEventFilter;
    LogMintWithdrawalPerformed(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null,
      assetId?: null
    ): LogMintWithdrawalPerformedEventFilter;

    "LogMintableWithdrawalAllowed(uint256,uint256,uint256)"(
      ownerKey?: null,
      assetId?: null,
      quantizedAmount?: null
    ): LogMintableWithdrawalAllowedEventFilter;
    LogMintableWithdrawalAllowed(
      ownerKey?: null,
      assetId?: null,
      quantizedAmount?: null
    ): LogMintableWithdrawalAllowedEventFilter;

    "LogNftDeposit(address,uint256,uint256,uint256,uint256,uint256)"(
      depositorEthKey?: null,
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null
    ): LogNftDepositEventFilter;
    LogNftDeposit(
      depositorEthKey?: null,
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null
    ): LogNftDepositEventFilter;

    "LogNftWithdrawalAllowed(uint256,uint256)"(
      ownerKey?: null,
      assetId?: null
    ): LogNftWithdrawalAllowedEventFilter;
    LogNftWithdrawalAllowed(
      ownerKey?: null,
      assetId?: null
    ): LogNftWithdrawalAllowedEventFilter;

    "LogNftWithdrawalPerformed(uint256,uint256,uint256,uint256,address)"(
      ownerKey?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null,
      recipient?: null
    ): LogNftWithdrawalPerformedEventFilter;
    LogNftWithdrawalPerformed(
      ownerKey?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null,
      recipient?: null
    ): LogNftWithdrawalPerformedEventFilter;

    "LogTokenAdminAdded(address)"(
      tokenAdmin?: null
    ): LogTokenAdminAddedEventFilter;
    LogTokenAdminAdded(tokenAdmin?: null): LogTokenAdminAddedEventFilter;

    "LogTokenAdminRemoved(address)"(
      tokenAdmin?: null
    ): LogTokenAdminRemovedEventFilter;
    LogTokenAdminRemoved(tokenAdmin?: null): LogTokenAdminRemovedEventFilter;

    "LogTokenRegistered(uint256,bytes,uint256)"(
      assetType?: null,
      assetInfo?: null,
      quantum?: null
    ): LogTokenRegisteredEventFilter;
    LogTokenRegistered(
      assetType?: null,
      assetInfo?: null,
      quantum?: null
    ): LogTokenRegisteredEventFilter;

    "LogUserRegistered(address,uint256,address)"(
      ethKey?: null,
      starkKey?: null,
      sender?: null
    ): LogUserRegisteredEventFilter;
    LogUserRegistered(
      ethKey?: null,
      starkKey?: null,
      sender?: null
    ): LogUserRegisteredEventFilter;

    "LogWithdrawalAllowed(uint256,uint256,uint256,uint256)"(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogWithdrawalAllowedEventFilter;
    LogWithdrawalAllowed(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogWithdrawalAllowedEventFilter;

    "LogWithdrawalPerformed(uint256,uint256,uint256,uint256,address)"(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null,
      recipient?: null
    ): LogWithdrawalPerformedEventFilter;
    LogWithdrawalPerformed(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null,
      recipient?: null
    ): LogWithdrawalPerformedEventFilter;

    "LogOperatorAdded(address)"(operator?: null): LogOperatorAddedEventFilter;
    LogOperatorAdded(operator?: null): LogOperatorAddedEventFilter;

    "LogOperatorRemoved(address)"(
      operator?: null
    ): LogOperatorRemovedEventFilter;
    LogOperatorRemoved(operator?: null): LogOperatorRemovedEventFilter;

    "LogRootUpdate(uint256,uint256,uint256,uint256)"(
      sequenceNumber?: null,
      batchId?: null,
      vaultRoot?: null,
      orderRoot?: null
    ): LogRootUpdateEventFilter;
    LogRootUpdate(
      sequenceNumber?: null,
      batchId?: null,
      vaultRoot?: null,
      orderRoot?: null
    ): LogRootUpdateEventFilter;

    "LogStateTransitionFact(bytes32)"(
      stateTransitionFact?: null
    ): LogStateTransitionFactEventFilter;
    LogStateTransitionFact(
      stateTransitionFact?: null
    ): LogStateTransitionFactEventFilter;

    "LogVaultBalanceChangeApplied(address,uint256,uint256,int256)"(
      ethKey?: null,
      assetId?: null,
      vaultId?: null,
      quantizedAmountChange?: null
    ): LogVaultBalanceChangeAppliedEventFilter;
    LogVaultBalanceChangeApplied(
      ethKey?: null,
      assetId?: null,
      vaultId?: null,
      quantizedAmountChange?: null
    ): LogVaultBalanceChangeAppliedEventFilter;

    "LogFullWithdrawalRequest(uint256,uint256)"(
      starkKey?: null,
      vaultId?: null
    ): LogFullWithdrawalRequestEventFilter;
    LogFullWithdrawalRequest(
      starkKey?: null,
      vaultId?: null
    ): LogFullWithdrawalRequestEventFilter;

    "LogDefaultVaultWithdrawalLockSet(uint256)"(
      newDefaultLockTime?: null
    ): LogDefaultVaultWithdrawalLockSetEventFilter;
    LogDefaultVaultWithdrawalLockSet(
      newDefaultLockTime?: null
    ): LogDefaultVaultWithdrawalLockSetEventFilter;

    "LogDepositToVault(address,uint256,uint256,uint256,uint256)"(
      ethKey?: null,
      assetId?: null,
      vaultId?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositToVaultEventFilter;
    LogDepositToVault(
      ethKey?: null,
      assetId?: null,
      vaultId?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositToVaultEventFilter;

    "LogVaultWithdrawalLockSet(address,uint256,uint256,uint256)"(
      ethKey?: null,
      assetId?: null,
      vaultId?: null,
      timeRelease?: null
    ): LogVaultWithdrawalLockSetEventFilter;
    LogVaultWithdrawalLockSet(
      ethKey?: null,
      assetId?: null,
      vaultId?: null,
      timeRelease?: null
    ): LogVaultWithdrawalLockSetEventFilter;

    "LogWithdrawalFromVault(address,uint256,uint256,uint256,uint256)"(
      ethKey?: null,
      assetId?: null,
      vaultId?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogWithdrawalFromVaultEventFilter;
    LogWithdrawalFromVault(
      ethKey?: null,
      assetId?: null,
      vaultId?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogWithdrawalFromVaultEventFilter;

    "ImplementationActivationRescheduled(address,uint256)"(
      implementation?: string | null,
      updatedActivationTime?: null
    ): ImplementationActivationRescheduledEventFilter;
    ImplementationActivationRescheduled(
      implementation?: string | null,
      updatedActivationTime?: null
    ): ImplementationActivationRescheduledEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    DEPOSIT_CANCEL_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    FREEZE_GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MAIN_GOVERNANCE_INFO_TAG(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FORCED_ACTIONS_REQS_PER_BLOCK(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_VERIFIER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    UNFREEZE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    VERIFIER_REMOVAL_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    announceAvailabilityVerifierRemovalIntent(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    announceVerifierRemovalIntent(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getRegisteredAvailabilityVerifiers(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredVerifiers(overrides?: CallOverrides): Promise<BigNumber>;

    isAvailabilityVerifier(
      verifierAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    isVerifier(
      verifierAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainAcceptGovernance(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mainCancelNomination(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mainIsGovernor(
      testGovernor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainNominateNewGovernor(
      newGovernor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mainRemoveGovernor(
      governorForRemoval: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerAvailabilityVerifier(
      verifier: string,
      identifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerVerifier(
      verifier: string,
      identifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeAvailabilityVerifier(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeVerifier(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unFreeze(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    defaultVaultWithdrawalLock(overrides?: CallOverrides): Promise<BigNumber>;

    "deposit(uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "deposit(uint256,uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositCancel(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositERC20(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositEth(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    depositNft(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositNftReclaim(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositReclaim(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getActionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getActionHashByIndex(
      actionIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetInfo(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCancellationRequest(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthKey(
      ownerKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuantizedDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuantum(
      presumedAssetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalBalance(
      ownerKey: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAssetRegistered(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenAdmin(
      testedAdmin: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    orderRegistryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    registerAndDepositERC20(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerAndDepositEth(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    registerEthAddress(
      ethKey: string,
      starkKey: BigNumberish,
      starkSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerSender(
      starkKey: BigNumberish,
      starkSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "registerToken(uint256,bytes)"(
      assetType: BigNumberish,
      assetInfo: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "registerToken(uint256,bytes,uint256)"(
      assetType: BigNumberish,
      assetInfo: BytesLike,
      quantum: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerTokenAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unregisterTokenAdmin(
      oldAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawAndMint(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      mintingBlob: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawNft(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    STARKEX_MAX_DEFAULT_VAULT_LOCK(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escape(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      assetId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getLastBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getSequenceNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      testedOperator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerOperator(
      newOperator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unregisterOperator(
      removedOperator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateState(
      publicInput: BigNumberish[],
      applicationData: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    freezeRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositERC20ToVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositEthToVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getQuantizedVaultBalance(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultBalance(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultWithdrawalLock(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStrictVaultBalancePolicy(overrides?: CallOverrides): Promise<BigNumber>;

    isVaultLocked(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      lockTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDefaultVaultWithdrawalLock(
      newDefaultTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawFromVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateImplementationActivationTime(
      implementation: string,
      data: BytesLike,
      finalize: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    DEPOSIT_CANCEL_DELAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FREEZE_GRACE_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAIN_GOVERNANCE_INFO_TAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_FORCED_ACTIONS_REQS_PER_BLOCK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_VERIFIER_COUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNFREEZE_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERIFIER_REMOVAL_DELAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    announceAvailabilityVerifierRemovalIntent(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    announceVerifierRemovalIntent(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getRegisteredAvailabilityVerifiers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredVerifiers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAvailabilityVerifier(
      verifierAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFrozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isVerifier(
      verifierAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainAcceptGovernance(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mainCancelNomination(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mainIsGovernor(
      testGovernor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainNominateNewGovernor(
      newGovernor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mainRemoveGovernor(
      governorForRemoval: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerAvailabilityVerifier(
      verifier: string,
      identifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerVerifier(
      verifier: string,
      identifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeAvailabilityVerifier(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeVerifier(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unFreeze(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    defaultVaultWithdrawalLock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256,uint256,uint256)"(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositCancel(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositERC20(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositEth(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositNft(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositNftReclaim(
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositReclaim(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getActionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActionHashByIndex(
      actionIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetInfo(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCancellationRequest(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthKey(
      ownerKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuantizedDepositBalance(
      starkKey: BigNumberish,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuantum(
      presumedAssetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalBalance(
      ownerKey: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAssetRegistered(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenAdmin(
      testedAdmin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    orderRegistryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerAndDepositERC20(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerAndDepositEth(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerEthAddress(
      ethKey: string,
      starkKey: BigNumberish,
      starkSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerSender(
      starkKey: BigNumberish,
      starkSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "registerToken(uint256,bytes)"(
      assetType: BigNumberish,
      assetInfo: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "registerToken(uint256,bytes,uint256)"(
      assetType: BigNumberish,
      assetInfo: BytesLike,
      quantum: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerTokenAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unregisterTokenAdmin(
      oldAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAndMint(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      mintingBlob: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawNft(
      ownerKey: BigNumberish,
      assetType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    STARKEX_MAX_DEFAULT_VAULT_LOCK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    escape(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      assetId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getLastBatchId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderTreeHeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSequenceNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultTreeHeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      testedOperator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerOperator(
      newOperator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unregisterOperator(
      removedOperator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateState(
      publicInput: BigNumberish[],
      applicationData: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    freezeRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fullWithdrawalRequest(
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositERC20ToVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositEthToVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getQuantizedVaultBalance(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultBalance(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultWithdrawalLock(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStrictVaultBalancePolicy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVaultLocked(
      ethKey: string,
      assetId: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      lockTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDefaultVaultWithdrawalLock(
      newDefaultTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawFromVault(
      assetId: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateImplementationActivationTime(
      implementation: string,
      data: BytesLike,
      finalize: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
