/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface RegistrationV4Interface extends utils.Interface {
  functions: {
    "getVersion()": FunctionFragment;
    "imx()": FunctionFragment;
    "isRegistered(uint256)": FunctionFragment;
    "registerAndWithdrawAll(address,uint256,bytes,uint256)": FunctionFragment;
    "registerAndWithdrawNft(address,uint256,bytes,uint256,uint256)": FunctionFragment;
    "registerWithdrawAndMint(address,uint256,bytes,uint256,bytes)": FunctionFragment;
    "withdrawAll(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getVersion"
      | "imx"
      | "isRegistered"
      | "registerAndWithdrawAll"
      | "registerAndWithdrawNft"
      | "registerWithdrawAndMint"
      | "withdrawAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "imx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndWithdrawAll",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndWithdrawNft",
    values: [string, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerWithdrawAndMint",
    values: [string, BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "imx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndWithdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndWithdrawNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWithdrawAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RegistrationV4 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistrationV4Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getVersion(overrides?: CallOverrides): Promise<[string]>;

    imx(overrides?: CallOverrides): Promise<[string]>;

    isRegistered(
      starkKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerAndWithdrawAll(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerAndWithdrawNft(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerWithdrawAndMint(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      mintingBlob: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAll(
      ethKey: BigNumberish,
      starkKey: BigNumberish,
      assetType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getVersion(overrides?: CallOverrides): Promise<string>;

  imx(overrides?: CallOverrides): Promise<string>;

  isRegistered(
    starkKey: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerAndWithdrawAll(
    ethKey: string,
    starkKey: BigNumberish,
    signature: BytesLike,
    assetType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerAndWithdrawNft(
    ethKey: string,
    starkKey: BigNumberish,
    signature: BytesLike,
    assetType: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerWithdrawAndMint(
    ethKey: string,
    starkKey: BigNumberish,
    signature: BytesLike,
    assetType: BigNumberish,
    mintingBlob: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAll(
    ethKey: BigNumberish,
    starkKey: BigNumberish,
    assetType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getVersion(overrides?: CallOverrides): Promise<string>;

    imx(overrides?: CallOverrides): Promise<string>;

    isRegistered(
      starkKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerAndWithdrawAll(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAndWithdrawNft(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerWithdrawAndMint(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      mintingBlob: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(
      ethKey: BigNumberish,
      starkKey: BigNumberish,
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    imx(overrides?: CallOverrides): Promise<BigNumber>;

    isRegistered(
      starkKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAndWithdrawAll(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerAndWithdrawNft(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerWithdrawAndMint(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      mintingBlob: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawAll(
      ethKey: BigNumberish,
      starkKey: BigNumberish,
      assetType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    imx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRegistered(
      starkKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerAndWithdrawAll(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerAndWithdrawNft(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerWithdrawAndMint(
      ethKey: string,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      mintingBlob: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      ethKey: BigNumberish,
      starkKey: BigNumberish,
      assetType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}