/* tslint:disable */
/* eslint-disable */
/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LambdasAPIError } from '../models';
// @ts-ignore
import { NftsecondarytransactionCheckOrderResponse } from '../models';
// @ts-ignore
import { NftsecondarytransactionCheckUserResponse } from '../models';
// @ts-ignore
import { NftsecondarytransactionCreateAPIRequest } from '../models';
// @ts-ignore
import { NftsecondarytransactionCreateResponse } from '../models';
// @ts-ignore
import { NftsecondarytransactionGetTransactionResponse } from '../models';
// @ts-ignore
import { NftsecondarytransactionListTransactionsResponse } from '../models';
/**
 * NonCryptoCheckoutApi - axios parameter creator
 * @export
 */
export const NonCryptoCheckoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a transaction to purchase an asset via a non-crypto checkout method
         * @summary Create a non-crypto checkout transaction
         * @param {NftsecondarytransactionCreateAPIRequest} createAPIRequest req
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNonCryptoCheckoutTransaction: async (createAPIRequest: NftsecondarytransactionCreateAPIRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAPIRequest' is not null or undefined
            assertParamExists('createNonCryptoCheckoutTransaction', 'createAPIRequest', createAPIRequest)
            const localVarPath = `/v2/nft/secondary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAPIRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Checks if an order can be purchased via a non-crypto checkout method
         * @summary Get orders eligible for non-crypto checkout
         * @param {'moonpay'} provider Name of provider of non-crypto checkout integration
         * @param {number} orderId Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonCryptoCheckoutOrderAvailability: async (provider: 'moonpay', orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('getNonCryptoCheckoutOrderAvailability', 'provider', provider)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getNonCryptoCheckoutOrderAvailability', 'orderId', orderId)
            const localVarPath = `/v2/nft/secondary/verify/{provider}/order/{order_id}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)))
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the KYC status (`{ verified: true | false }`) of a user for selling NFTs via non-crypto checkout
         * @summary Get KYC status of a seller of a non-crypto checkout order
         * @param {'moonpay'} provider Name of provider of non-crypto checkout integration
         * @param {string} walletAddress Seller\&#39;s ImmutableX (L2) wallet address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonCryptoCheckoutSellerKycStatus: async (provider: 'moonpay', walletAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('getNonCryptoCheckoutSellerKycStatus', 'provider', provider)
            // verify required parameter 'walletAddress' is not null or undefined
            assertParamExists('getNonCryptoCheckoutSellerKycStatus', 'walletAddress', walletAddress)
            const localVarPath = `/v2/nft/secondary/verify/{provider}/user/{wallet_address}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)))
                .replace(`{${"wallet_address"}}`, encodeURIComponent(String(walletAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets non-crypto checkout transaction by its ID
         * @summary Get non-crypto checkout transaction by ID
         * @param {string} transactionId Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonCryptoCheckoutTransaction: async (transactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('getNonCryptoCheckoutTransaction', 'transactionId', transactionId)
            const localVarPath = `/v2/nft/secondary/{transaction_id}`
                .replace(`{${"transaction_id"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of successful non-crypto checkout transactions
         * @summary Get a list of non-crypto checkout transactions
         * @param {number} [pageSize] Page size of the result
         * @param {string} [cursor] Cursor
         * @param {'transaction_id' | 'status' | 'amount' | 'mint_id'} [orderBy] Property to sort by
         * @param {string} [direction] Direction to sort (asc/desc)
         * @param {string} [transactionId] Transaction ID
         * @param {number} [orderId] Order ID
         * @param {string} [walletAddress] Ethereum address of the user who wants to create transaction
         * @param {string} [status] Transaction status
         * @param {'moonpay'} [provider] Name of provider of non-crypto checkout integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonCryptoCheckoutTransactions: async (pageSize?: number, cursor?: string, orderBy?: 'transaction_id' | 'status' | 'amount' | 'mint_id', direction?: string, transactionId?: string, orderId?: number, walletAddress?: string, status?: string, provider?: 'moonpay', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/nft/secondary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (transactionId !== undefined) {
                localVarQueryParameter['transaction_id'] = transactionId;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }

            if (walletAddress !== undefined) {
                localVarQueryParameter['wallet_address'] = walletAddress;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NonCryptoCheckoutApi - functional programming interface
 * @export
 */
export const NonCryptoCheckoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NonCryptoCheckoutApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a transaction to purchase an asset via a non-crypto checkout method
         * @summary Create a non-crypto checkout transaction
         * @param {NftsecondarytransactionCreateAPIRequest} createAPIRequest req
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNonCryptoCheckoutTransaction(createAPIRequest: NftsecondarytransactionCreateAPIRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NftsecondarytransactionCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNonCryptoCheckoutTransaction(createAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Checks if an order can be purchased via a non-crypto checkout method
         * @summary Get orders eligible for non-crypto checkout
         * @param {'moonpay'} provider Name of provider of non-crypto checkout integration
         * @param {number} orderId Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNonCryptoCheckoutOrderAvailability(provider: 'moonpay', orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NftsecondarytransactionCheckOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNonCryptoCheckoutOrderAvailability(provider, orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the KYC status (`{ verified: true | false }`) of a user for selling NFTs via non-crypto checkout
         * @summary Get KYC status of a seller of a non-crypto checkout order
         * @param {'moonpay'} provider Name of provider of non-crypto checkout integration
         * @param {string} walletAddress Seller\&#39;s ImmutableX (L2) wallet address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNonCryptoCheckoutSellerKycStatus(provider: 'moonpay', walletAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NftsecondarytransactionCheckUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNonCryptoCheckoutSellerKycStatus(provider, walletAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets non-crypto checkout transaction by its ID
         * @summary Get non-crypto checkout transaction by ID
         * @param {string} transactionId Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNonCryptoCheckoutTransaction(transactionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NftsecondarytransactionGetTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNonCryptoCheckoutTransaction(transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of successful non-crypto checkout transactions
         * @summary Get a list of non-crypto checkout transactions
         * @param {number} [pageSize] Page size of the result
         * @param {string} [cursor] Cursor
         * @param {'transaction_id' | 'status' | 'amount' | 'mint_id'} [orderBy] Property to sort by
         * @param {string} [direction] Direction to sort (asc/desc)
         * @param {string} [transactionId] Transaction ID
         * @param {number} [orderId] Order ID
         * @param {string} [walletAddress] Ethereum address of the user who wants to create transaction
         * @param {string} [status] Transaction status
         * @param {'moonpay'} [provider] Name of provider of non-crypto checkout integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNonCryptoCheckoutTransactions(pageSize?: number, cursor?: string, orderBy?: 'transaction_id' | 'status' | 'amount' | 'mint_id', direction?: string, transactionId?: string, orderId?: number, walletAddress?: string, status?: string, provider?: 'moonpay', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NftsecondarytransactionListTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNonCryptoCheckoutTransactions(pageSize, cursor, orderBy, direction, transactionId, orderId, walletAddress, status, provider, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NonCryptoCheckoutApi - factory interface
 * @export
 */
export const NonCryptoCheckoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NonCryptoCheckoutApiFp(configuration)
    return {
        /**
         * Creates a transaction to purchase an asset via a non-crypto checkout method
         * @summary Create a non-crypto checkout transaction
         * @param {NftsecondarytransactionCreateAPIRequest} createAPIRequest req
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNonCryptoCheckoutTransaction(createAPIRequest: NftsecondarytransactionCreateAPIRequest, options?: any): AxiosPromise<NftsecondarytransactionCreateResponse> {
            return localVarFp.createNonCryptoCheckoutTransaction(createAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Checks if an order can be purchased via a non-crypto checkout method
         * @summary Get orders eligible for non-crypto checkout
         * @param {'moonpay'} provider Name of provider of non-crypto checkout integration
         * @param {number} orderId Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonCryptoCheckoutOrderAvailability(provider: 'moonpay', orderId: number, options?: any): AxiosPromise<NftsecondarytransactionCheckOrderResponse> {
            return localVarFp.getNonCryptoCheckoutOrderAvailability(provider, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the KYC status (`{ verified: true | false }`) of a user for selling NFTs via non-crypto checkout
         * @summary Get KYC status of a seller of a non-crypto checkout order
         * @param {'moonpay'} provider Name of provider of non-crypto checkout integration
         * @param {string} walletAddress Seller\&#39;s ImmutableX (L2) wallet address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonCryptoCheckoutSellerKycStatus(provider: 'moonpay', walletAddress: string, options?: any): AxiosPromise<NftsecondarytransactionCheckUserResponse> {
            return localVarFp.getNonCryptoCheckoutSellerKycStatus(provider, walletAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets non-crypto checkout transaction by its ID
         * @summary Get non-crypto checkout transaction by ID
         * @param {string} transactionId Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonCryptoCheckoutTransaction(transactionId: string, options?: any): AxiosPromise<NftsecondarytransactionGetTransactionResponse> {
            return localVarFp.getNonCryptoCheckoutTransaction(transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of successful non-crypto checkout transactions
         * @summary Get a list of non-crypto checkout transactions
         * @param {number} [pageSize] Page size of the result
         * @param {string} [cursor] Cursor
         * @param {'transaction_id' | 'status' | 'amount' | 'mint_id'} [orderBy] Property to sort by
         * @param {string} [direction] Direction to sort (asc/desc)
         * @param {string} [transactionId] Transaction ID
         * @param {number} [orderId] Order ID
         * @param {string} [walletAddress] Ethereum address of the user who wants to create transaction
         * @param {string} [status] Transaction status
         * @param {'moonpay'} [provider] Name of provider of non-crypto checkout integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonCryptoCheckoutTransactions(pageSize?: number, cursor?: string, orderBy?: 'transaction_id' | 'status' | 'amount' | 'mint_id', direction?: string, transactionId?: string, orderId?: number, walletAddress?: string, status?: string, provider?: 'moonpay', options?: any): AxiosPromise<NftsecondarytransactionListTransactionsResponse> {
            return localVarFp.getNonCryptoCheckoutTransactions(pageSize, cursor, orderBy, direction, transactionId, orderId, walletAddress, status, provider, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNonCryptoCheckoutTransaction operation in NonCryptoCheckoutApi.
 * @export
 * @interface NonCryptoCheckoutApiCreateNonCryptoCheckoutTransactionRequest
 */
export interface NonCryptoCheckoutApiCreateNonCryptoCheckoutTransactionRequest {
    /**
     * req
     * @type {NftsecondarytransactionCreateAPIRequest}
     * @memberof NonCryptoCheckoutApiCreateNonCryptoCheckoutTransaction
     */
    readonly createAPIRequest: NftsecondarytransactionCreateAPIRequest
}

/**
 * Request parameters for getNonCryptoCheckoutOrderAvailability operation in NonCryptoCheckoutApi.
 * @export
 * @interface NonCryptoCheckoutApiGetNonCryptoCheckoutOrderAvailabilityRequest
 */
export interface NonCryptoCheckoutApiGetNonCryptoCheckoutOrderAvailabilityRequest {
    /**
     * Name of provider of non-crypto checkout integration
     * @type {'moonpay'}
     * @memberof NonCryptoCheckoutApiGetNonCryptoCheckoutOrderAvailability
     */
    readonly provider: 'moonpay'

    /**
     * Order ID
     * @type {number}
     * @memberof NonCryptoCheckoutApiGetNonCryptoCheckoutOrderAvailability
     */
    readonly orderId: number
}

/**
 * Request parameters for getNonCryptoCheckoutSellerKycStatus operation in NonCryptoCheckoutApi.
 * @export
 * @interface NonCryptoCheckoutApiGetNonCryptoCheckoutSellerKycStatusRequest
 */
export interface NonCryptoCheckoutApiGetNonCryptoCheckoutSellerKycStatusRequest {
    /**
     * Name of provider of non-crypto checkout integration
     * @type {'moonpay'}
     * @memberof NonCryptoCheckoutApiGetNonCryptoCheckoutSellerKycStatus
     */
    readonly provider: 'moonpay'

    /**
     * Seller\&#39;s ImmutableX (L2) wallet address
     * @type {string}
     * @memberof NonCryptoCheckoutApiGetNonCryptoCheckoutSellerKycStatus
     */
    readonly walletAddress: string
}

/**
 * Request parameters for getNonCryptoCheckoutTransaction operation in NonCryptoCheckoutApi.
 * @export
 * @interface NonCryptoCheckoutApiGetNonCryptoCheckoutTransactionRequest
 */
export interface NonCryptoCheckoutApiGetNonCryptoCheckoutTransactionRequest {
    /**
     * Transaction ID
     * @type {string}
     * @memberof NonCryptoCheckoutApiGetNonCryptoCheckoutTransaction
     */
    readonly transactionId: string
}

/**
 * Request parameters for getNonCryptoCheckoutTransactions operation in NonCryptoCheckoutApi.
 * @export
 * @interface NonCryptoCheckoutApiGetNonCryptoCheckoutTransactionsRequest
 */
export interface NonCryptoCheckoutApiGetNonCryptoCheckoutTransactionsRequest {
    /**
     * Page size of the result
     * @type {number}
     * @memberof NonCryptoCheckoutApiGetNonCryptoCheckoutTransactions
     */
    readonly pageSize?: number

    /**
     * Cursor
     * @type {string}
     * @memberof NonCryptoCheckoutApiGetNonCryptoCheckoutTransactions
     */
    readonly cursor?: string

    /**
     * Property to sort by
     * @type {'transaction_id' | 'status' | 'amount' | 'mint_id'}
     * @memberof NonCryptoCheckoutApiGetNonCryptoCheckoutTransactions
     */
    readonly orderBy?: 'transaction_id' | 'status' | 'amount' | 'mint_id'

    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof NonCryptoCheckoutApiGetNonCryptoCheckoutTransactions
     */
    readonly direction?: string

    /**
     * Transaction ID
     * @type {string}
     * @memberof NonCryptoCheckoutApiGetNonCryptoCheckoutTransactions
     */
    readonly transactionId?: string

    /**
     * Order ID
     * @type {number}
     * @memberof NonCryptoCheckoutApiGetNonCryptoCheckoutTransactions
     */
    readonly orderId?: number

    /**
     * Ethereum address of the user who wants to create transaction
     * @type {string}
     * @memberof NonCryptoCheckoutApiGetNonCryptoCheckoutTransactions
     */
    readonly walletAddress?: string

    /**
     * Transaction status
     * @type {string}
     * @memberof NonCryptoCheckoutApiGetNonCryptoCheckoutTransactions
     */
    readonly status?: string

    /**
     * Name of provider of non-crypto checkout integration
     * @type {'moonpay'}
     * @memberof NonCryptoCheckoutApiGetNonCryptoCheckoutTransactions
     */
    readonly provider?: 'moonpay'
}

/**
 * NonCryptoCheckoutApi - object-oriented interface
 * @export
 * @class NonCryptoCheckoutApi
 * @extends {BaseAPI}
 */
export class NonCryptoCheckoutApi extends BaseAPI {
    /**
     * Creates a transaction to purchase an asset via a non-crypto checkout method
     * @summary Create a non-crypto checkout transaction
     * @param {NonCryptoCheckoutApiCreateNonCryptoCheckoutTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NonCryptoCheckoutApi
     */
    public createNonCryptoCheckoutTransaction(requestParameters: NonCryptoCheckoutApiCreateNonCryptoCheckoutTransactionRequest, options?: AxiosRequestConfig) {
        return NonCryptoCheckoutApiFp(this.configuration).createNonCryptoCheckoutTransaction(requestParameters.createAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Checks if an order can be purchased via a non-crypto checkout method
     * @summary Get orders eligible for non-crypto checkout
     * @param {NonCryptoCheckoutApiGetNonCryptoCheckoutOrderAvailabilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NonCryptoCheckoutApi
     */
    public getNonCryptoCheckoutOrderAvailability(requestParameters: NonCryptoCheckoutApiGetNonCryptoCheckoutOrderAvailabilityRequest, options?: AxiosRequestConfig) {
        return NonCryptoCheckoutApiFp(this.configuration).getNonCryptoCheckoutOrderAvailability(requestParameters.provider, requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the KYC status (`{ verified: true | false }`) of a user for selling NFTs via non-crypto checkout
     * @summary Get KYC status of a seller of a non-crypto checkout order
     * @param {NonCryptoCheckoutApiGetNonCryptoCheckoutSellerKycStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NonCryptoCheckoutApi
     */
    public getNonCryptoCheckoutSellerKycStatus(requestParameters: NonCryptoCheckoutApiGetNonCryptoCheckoutSellerKycStatusRequest, options?: AxiosRequestConfig) {
        return NonCryptoCheckoutApiFp(this.configuration).getNonCryptoCheckoutSellerKycStatus(requestParameters.provider, requestParameters.walletAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets non-crypto checkout transaction by its ID
     * @summary Get non-crypto checkout transaction by ID
     * @param {NonCryptoCheckoutApiGetNonCryptoCheckoutTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NonCryptoCheckoutApi
     */
    public getNonCryptoCheckoutTransaction(requestParameters: NonCryptoCheckoutApiGetNonCryptoCheckoutTransactionRequest, options?: AxiosRequestConfig) {
        return NonCryptoCheckoutApiFp(this.configuration).getNonCryptoCheckoutTransaction(requestParameters.transactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of successful non-crypto checkout transactions
     * @summary Get a list of non-crypto checkout transactions
     * @param {NonCryptoCheckoutApiGetNonCryptoCheckoutTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NonCryptoCheckoutApi
     */
    public getNonCryptoCheckoutTransactions(requestParameters: NonCryptoCheckoutApiGetNonCryptoCheckoutTransactionsRequest = {}, options?: AxiosRequestConfig) {
        return NonCryptoCheckoutApiFp(this.configuration).getNonCryptoCheckoutTransactions(requestParameters.pageSize, requestParameters.cursor, requestParameters.orderBy, requestParameters.direction, requestParameters.transactionId, requestParameters.orderId, requestParameters.walletAddress, requestParameters.status, requestParameters.provider, options).then((request) => request(this.axios, this.basePath));
    }
}
