/* tslint:disable */
/* eslint-disable */
/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIError } from '../models';
// @ts-ignore
import { AddMetadataSchemaToCollectionRequest } from '../models';
// @ts-ignore
import { MetadataSchemaProperty } from '../models';
// @ts-ignore
import { MetadataSchemaRequest } from '../models';
// @ts-ignore
import { SuccessResponse } from '../models';
/**
 * MetadataApi - axios parameter creator
 * @export
 */
export const MetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add metadata schema to collection
         * @summary Add metadata schema to collection
         * @param {string} address Collection contract address
         * @param {string} iMXSignature String created by signing wallet address and timestamp
         * @param {string} iMXTimestamp Unix Epoc timestamp
         * @param {AddMetadataSchemaToCollectionRequest} addMetadataSchemaToCollectionRequest add metadata schema to a collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMetadataSchemaToCollection: async (address: string, iMXSignature: string, iMXTimestamp: string, addMetadataSchemaToCollectionRequest: AddMetadataSchemaToCollectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('addMetadataSchemaToCollection', 'address', address)
            // verify required parameter 'iMXSignature' is not null or undefined
            assertParamExists('addMetadataSchemaToCollection', 'iMXSignature', iMXSignature)
            // verify required parameter 'iMXTimestamp' is not null or undefined
            assertParamExists('addMetadataSchemaToCollection', 'iMXTimestamp', iMXTimestamp)
            // verify required parameter 'addMetadataSchemaToCollectionRequest' is not null or undefined
            assertParamExists('addMetadataSchemaToCollection', 'addMetadataSchemaToCollectionRequest', addMetadataSchemaToCollectionRequest)
            const localVarPath = `/v1/collections/{address}/metadata-schema`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iMXSignature != null) {
                localVarHeaderParameter['IMX-Signature'] = String(iMXSignature);
            }

            if (iMXTimestamp != null) {
                localVarHeaderParameter['IMX-Timestamp'] = String(iMXTimestamp);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addMetadataSchemaToCollectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get collection metadata schema
         * @summary Get collection metadata schema
         * @param {string} address Collection contract address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadataSchema: async (address: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('getMetadataSchema', 'address', address)
            const localVarPath = `/v1/collections/{address}/metadata-schema`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update metadata schema by name
         * @summary Update metadata schema by name
         * @param {string} address Collection contract address
         * @param {string} name Metadata schema name
         * @param {string} iMXSignature String created by signing wallet address and timestamp
         * @param {string} iMXTimestamp Unix Epoc timestamp
         * @param {MetadataSchemaRequest} metadataSchemaRequest update metadata schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetadataSchemaByName: async (address: string, name: string, iMXSignature: string, iMXTimestamp: string, metadataSchemaRequest: MetadataSchemaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('updateMetadataSchemaByName', 'address', address)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateMetadataSchemaByName', 'name', name)
            // verify required parameter 'iMXSignature' is not null or undefined
            assertParamExists('updateMetadataSchemaByName', 'iMXSignature', iMXSignature)
            // verify required parameter 'iMXTimestamp' is not null or undefined
            assertParamExists('updateMetadataSchemaByName', 'iMXTimestamp', iMXTimestamp)
            // verify required parameter 'metadataSchemaRequest' is not null or undefined
            assertParamExists('updateMetadataSchemaByName', 'metadataSchemaRequest', metadataSchemaRequest)
            const localVarPath = `/v1/collections/{address}/metadata-schema/{name}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iMXSignature != null) {
                localVarHeaderParameter['IMX-Signature'] = String(iMXSignature);
            }

            if (iMXTimestamp != null) {
                localVarHeaderParameter['IMX-Timestamp'] = String(iMXTimestamp);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(metadataSchemaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetadataApi - functional programming interface
 * @export
 */
export const MetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * Add metadata schema to collection
         * @summary Add metadata schema to collection
         * @param {string} address Collection contract address
         * @param {string} iMXSignature String created by signing wallet address and timestamp
         * @param {string} iMXTimestamp Unix Epoc timestamp
         * @param {AddMetadataSchemaToCollectionRequest} addMetadataSchemaToCollectionRequest add metadata schema to a collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMetadataSchemaToCollection(address: string, iMXSignature: string, iMXTimestamp: string, addMetadataSchemaToCollectionRequest: AddMetadataSchemaToCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMetadataSchemaToCollection(address, iMXSignature, iMXTimestamp, addMetadataSchemaToCollectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get collection metadata schema
         * @summary Get collection metadata schema
         * @param {string} address Collection contract address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadataSchema(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MetadataSchemaProperty>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetadataSchema(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update metadata schema by name
         * @summary Update metadata schema by name
         * @param {string} address Collection contract address
         * @param {string} name Metadata schema name
         * @param {string} iMXSignature String created by signing wallet address and timestamp
         * @param {string} iMXTimestamp Unix Epoc timestamp
         * @param {MetadataSchemaRequest} metadataSchemaRequest update metadata schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMetadataSchemaByName(address: string, name: string, iMXSignature: string, iMXTimestamp: string, metadataSchemaRequest: MetadataSchemaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMetadataSchemaByName(address, name, iMXSignature, iMXTimestamp, metadataSchemaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetadataApi - factory interface
 * @export
 */
export const MetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetadataApiFp(configuration)
    return {
        /**
         * Add metadata schema to collection
         * @summary Add metadata schema to collection
         * @param {string} address Collection contract address
         * @param {string} iMXSignature String created by signing wallet address and timestamp
         * @param {string} iMXTimestamp Unix Epoc timestamp
         * @param {AddMetadataSchemaToCollectionRequest} addMetadataSchemaToCollectionRequest add metadata schema to a collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMetadataSchemaToCollection(address: string, iMXSignature: string, iMXTimestamp: string, addMetadataSchemaToCollectionRequest: AddMetadataSchemaToCollectionRequest, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.addMetadataSchemaToCollection(address, iMXSignature, iMXTimestamp, addMetadataSchemaToCollectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get collection metadata schema
         * @summary Get collection metadata schema
         * @param {string} address Collection contract address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadataSchema(address: string, options?: any): AxiosPromise<Array<MetadataSchemaProperty>> {
            return localVarFp.getMetadataSchema(address, options).then((request) => request(axios, basePath));
        },
        /**
         * Update metadata schema by name
         * @summary Update metadata schema by name
         * @param {string} address Collection contract address
         * @param {string} name Metadata schema name
         * @param {string} iMXSignature String created by signing wallet address and timestamp
         * @param {string} iMXTimestamp Unix Epoc timestamp
         * @param {MetadataSchemaRequest} metadataSchemaRequest update metadata schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetadataSchemaByName(address: string, name: string, iMXSignature: string, iMXTimestamp: string, metadataSchemaRequest: MetadataSchemaRequest, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.updateMetadataSchemaByName(address, name, iMXSignature, iMXTimestamp, metadataSchemaRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addMetadataSchemaToCollection operation in MetadataApi.
 * @export
 * @interface MetadataApiAddMetadataSchemaToCollectionRequest
 */
export interface MetadataApiAddMetadataSchemaToCollectionRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof MetadataApiAddMetadataSchemaToCollection
     */
    readonly address: string

    /**
     * String created by signing wallet address and timestamp
     * @type {string}
     * @memberof MetadataApiAddMetadataSchemaToCollection
     */
    readonly iMXSignature: string

    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof MetadataApiAddMetadataSchemaToCollection
     */
    readonly iMXTimestamp: string

    /**
     * add metadata schema to a collection
     * @type {AddMetadataSchemaToCollectionRequest}
     * @memberof MetadataApiAddMetadataSchemaToCollection
     */
    readonly addMetadataSchemaToCollectionRequest: AddMetadataSchemaToCollectionRequest
}

/**
 * Request parameters for getMetadataSchema operation in MetadataApi.
 * @export
 * @interface MetadataApiGetMetadataSchemaRequest
 */
export interface MetadataApiGetMetadataSchemaRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof MetadataApiGetMetadataSchema
     */
    readonly address: string
}

/**
 * Request parameters for updateMetadataSchemaByName operation in MetadataApi.
 * @export
 * @interface MetadataApiUpdateMetadataSchemaByNameRequest
 */
export interface MetadataApiUpdateMetadataSchemaByNameRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly address: string

    /**
     * Metadata schema name
     * @type {string}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly name: string

    /**
     * String created by signing wallet address and timestamp
     * @type {string}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly iMXSignature: string

    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly iMXTimestamp: string

    /**
     * update metadata schema
     * @type {MetadataSchemaRequest}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly metadataSchemaRequest: MetadataSchemaRequest
}

/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export class MetadataApi extends BaseAPI {
    /**
     * Add metadata schema to collection
     * @summary Add metadata schema to collection
     * @param {MetadataApiAddMetadataSchemaToCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public addMetadataSchemaToCollection(requestParameters: MetadataApiAddMetadataSchemaToCollectionRequest, options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).addMetadataSchemaToCollection(requestParameters.address, requestParameters.iMXSignature, requestParameters.iMXTimestamp, requestParameters.addMetadataSchemaToCollectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get collection metadata schema
     * @summary Get collection metadata schema
     * @param {MetadataApiGetMetadataSchemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public getMetadataSchema(requestParameters: MetadataApiGetMetadataSchemaRequest, options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).getMetadataSchema(requestParameters.address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update metadata schema by name
     * @summary Update metadata schema by name
     * @param {MetadataApiUpdateMetadataSchemaByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public updateMetadataSchemaByName(requestParameters: MetadataApiUpdateMetadataSchemaByNameRequest, options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).updateMetadataSchemaByName(requestParameters.address, requestParameters.name, requestParameters.iMXSignature, requestParameters.iMXTimestamp, requestParameters.metadataSchemaRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
